#+title: Dot-Z-Macs
#+author: Dylan McDowell
#+startup: content
#+property: header-args :tangle "~/dotz/editors/emacs.d/init.el"

/last updated/: 2019-12-08 22:20:24

* Table of Contents :TOC@3:noexport:
- [[#about][About]]
  - [[#literate-programming-in-org][Literate Programming in Org]]
  - [[#system-requirements][System Requirements]]
- [[#early-init][Early-Init]]
  - [[#header][Header]]
  - [[#preliminary-configuration][Preliminary Configuration]]
    - [[#garbage-collection][Garbage Collection]]
    - [[#pre-gui-optimization][Pre-Gui Optimization]]
  - [[#footer][Footer]]
- [[#init][Init]]
  - [[#header-1][Header]]
  - [[#package-management][Package Management]]
    - [[#straight][Straight]]
    - [[#use-package][Use-Package]]
  - [[#initial-demands][Initial Demands]]
    - [[#benchmark-init][Benchmark-Init]]
    - [[#exec-path-from-shell][Exec-Path-From-Shell]]
    - [[#no-littering][No-Littering]]
    - [[#el-patch][El-Patch]]
    - [[#general][General]]
    - [[#blackout][Blackout]]
    - [[#org-plus-contrib][Org-Plus-Contrib]]
  - [[#personal-configuration][Personal Configuration]]
    - [[#variables][Variables]]
    - [[#functions][Functions]]
    - [[#hooks--advice][Hooks & Advice]]
    - [[#keybindings][Keybindings]]
  - [[#built-in-defaults][Built-In Defaults]]
    - [[#advice-built-in][Advice (Built-In)]]
    - [[#align-built-in][Align (Built-In)]]
    - [[#ansi-color-built-in][Ansi-Color (Built-In)]]
    - [[#auth-source-built-in][Auth-Source (Built-In)]]
    - [[#autorevert-built-in][Autorevert (Built-In)]]
    - [[#bookmark-built-in][Bookmark (Built-In)]]
    - [[#calculator-built-in][Calculator (Built-In)]]
    - [[#calendar-built-in][Calendar (Built-In)]]
    - [[#comint-built-in][Comint (Built-In)]]
    - [[#compile-built-in][Compile (Built-In)]]
    - [[#cus-start-built-in][Cus-Start (Built-In)]]
    - [[#delsel-built-in][Delsel (Built-In)]]
    - [[#dired-built-in][Dired (Built-In)]]
    - [[#wdired-built-in][WDired (Built-In)]]
    - [[#dired-x-built-in][Dired-X (Built-In)]]
    - [[#eldoc-built-in][Eldoc (Built-In)]]
    - [[#elisp-mode-built-in][Elisp-Mode (Built-In)]]
    - [[#emacs-lock-built-in][Emacs-Lock (Built-In)]]
    - [[#epa-built-in][Epa (Built-In)]]
    - [[#epg-built-in][Epg (Built-In)]]
    - [[#face-remap-built-in][Face-Remap (Built-In)]]
    - [[#eww-built-in][Eww (Built-In)]]
    - [[#browse-url-built-in][Browse-Url (Built-In)]]
    - [[#files-built-in][Files (Built-In)]]
    - [[#frame-built-in][Frame (Built-In)]]
    - [[#gnutls-built-in][Gnutls (Built-In)]]
    - [[#help-built-in][Help (Built-In)]]
    - [[#ispell-built-in][Ispell (Built-In)]]
    - [[#make-mode-built-in][Make-Mode (Built-In)]]
    - [[#minibuffer-built-in][Minibuffer (Built-In)]]
    - [[#ns-win-built-in][NS-Win (Built-In)]]
    - [[#pixel-scroll-built-in][Pixel-Scroll (Built-In)]]
    - [[#prog-mode-built-in][Prog-Mode (Built-In)]]
    - [[#recentf-built-in][Recentf (Built-In)]]
    - [[#savehist-built-in][Savehist (Built-In)]]
    - [[#saveplace-built-in][Saveplace (Built-In)]]
    - [[#select-built-in][Select (Built-In)]]
    - [[#shell-built-in][Shell (Built-In)]]
    - [[#simple-built-in][Simple (Built-In)]]
    - [[#smerge-built-in][Smerge (Built-In)]]
    - [[#time-built-in][Time (Built-In)]]
    - [[#uniquify-built-in][Uniquify (Built-In)]]
    - [[#vc-hooks-built-in][VC-Hooks (Built-In)]]
    - [[#view-built-in][View (Built-In)]]
    - [[#winner-built-in][Winner (Built-In)]]
  - [[#user-files][User Files]]
    - [[#custom-file][Custom File]]
    - [[#secret-file][Secret File]]
  - [[#themes--aesthetics][Themes & Aesthetics]]
    - [[#all-the-icons][All-The-Icons]]
    - [[#gruvbox-theme][Gruvbox Theme]]
    - [[#smart-mode-line][Smart-Mode-Line]]
    - [[#default-text-scale][Default-Text-Scale]]
    - [[#page-break-lines][Page-Break-Lines]]
  - [[#system][System]]
    - [[#emacs-async][Emacs-Async]]
    - [[#osx-trash][OSX-Trash]]
    - [[#restart-emacs][Restart-Emacs]]
    - [[#firestarter][Firestarter]]
    - [[#gcmh][GCMH]]
  - [[#project-management][Project Management]]
    - [[#projectile][Projectile]]
    - [[#direnv][Direnv]]
  - [[#frameworks][Frameworks]]
    - [[#prescient][Prescient]]
    - [[#ivy-prescient][Ivy-Prescient]]
    - [[#flx][FLX]]
    - [[#ivy][Ivy]]
    - [[#counsel][Counsel]]
    - [[#swiper][Swiper]]
  - [[#autocompletion][Autocompletion]]
    - [[#company-mode][Company-Mode]]
    - [[#company-prescient][Company-Prescient]]
    - [[#company-flx][Company-FLX]]
    - [[#yasnippet][Yasnippet]]
  - [[#documentation][Documentation]]
    - [[#helpful][Helpful]]
  - [[#editing-tools][Editing Tools]]
    - [[#multiple-cursors][Multiple-Cursors]]
    - [[#zop-to-char][Zop-To-Char]]
    - [[#interactive-align][Interactive-Align]]
    - [[#visual-regexp][Visual-Regexp]]
    - [[#visual-regexp-steroids][Visual-Regexp-Steroids]]
    - [[#anzu][Anzu]]
    - [[#deadgrep][Deadgrep]]
    - [[#expand-region][Expand-Region]]
    - [[#string-inflection][String-Inflection]]
    - [[#emacs-format-all-the-code][Emacs-Format-All-The-Code]]
  - [[#minor-modes][Minor Modes]]
    - [[#editorconfig][EditorConfig]]
    - [[#ws-butler][WS-Butler]]
    - [[#whitespace-cleanup][Whitespace-Cleanup]]
    - [[#undo-tree][Undo-Tree]]
    - [[#aggressive-indent][Aggressive-Indent]]
    - [[#hungry-delete][Hungry-Delete]]
    - [[#highlight-indent-guides][Highlight-Indent-Guides]]
    - [[#rainbow-delimiters][Rainbow-Delimiters]]
    - [[#rainbow-mode][Rainbow-Mode]]
  - [[#navigation][Navigation]]
    - [[#avy][Avy]]
    - [[#ace-window][Ace-Window]]
    - [[#windower][Windower]]
    - [[#windmove][Windmove]]
    - [[#dumb-jump][Dumb-Jump]]
    - [[#diredfl][Diredfl]]
    - [[#all-the-icons-dired][All-The-Icons-Dired]]
    - [[#dired-hacks][Dired-Hacks]]
    - [[#dired-git-info][Dired-Git-Info]]
    - [[#fd-dired][FD-Dired]]
    - [[#ibuffer][iBuffer]]
  - [[#productivity][Productivity]]
    - [[#org][Org]]
  - [[#email][Email]]
    - [[#notmuch][NotMuch]]
  - [[#media][Media]]
    - [[#spotify][Spotify]]
    - [[#htmlize][HTMLize]]
  - [[#version-control][Version Control]]
    - [[#magit][Magit]]
    - [[#transient][Transient]]
    - [[#git-commit][Git-Commit]]
    - [[#forge][Forge]]
    - [[#git-gutter][Git-Gutter]]
    - [[#git-time-machine][Git-Time-Machine]]
    - [[#with-editor][With-Editor]]
    - [[#emacs-vdiff][Emacs-VDiff]]
  - [[#language-server-support][Language Server Support]]
    - [[#lsp-mode][LSP-Mode]]
  - [[#syntax--linting][Syntax & Linting]]
    - [[#flycheck][Flycheck]]
    - [[#flycheck-posframe][Flycheck-Posframe]]
    - [[#flycheck-popup-tip][Flycheck-Popup-Tip]]
    - [[#flycheck-pos-tip][Flycheck-Pos-Tip]]
    - [[#flycheck-pycheckers][Flycheck-Pycheckers]]
  - [[#languages][Languages]]
    - [[#markdown][Markdown]]
    - [[#yaml][YAML]]
    - [[#latex][LaTeX]]
    - [[#julia][Julia]]
    - [[#python][Python]]
  - [[#miscellaneous][Miscellaneous]]
    - [[#speedtype][SpeedType]]
  - [[#footer-1][Footer]]
- [[#conclusion][Conclusion]]
- [[#citations][Citations]]

* About
#+ATTR_HTML: :width 1000px
#+ATTR_ORG: :width 1000
[[file:assets/config-preview.png]]

** Literate Programming in Org
This document is my current emacs config which contains the code for my =early-init.el= file and =init.el= file. You may be wondering how one file can contain code for two different configuration files. Through the power of =org-babel-tangle=, I am able to configure and document my entire emacs experience in a single Org file. There are several reasons to organize one's configuration this way. I hope these reasons become obvious as you browse through, but personally I find it much easier to document my choices using a markup language. This way I can store links and reference back to forum threads and other places when updating. I can also include pictures throughout and organize code-blocks with specific names to make navigation quick and painless. If you're interested in creating a similar setup, take a look at the raw-version of this file. There is important information contained in the header and throughout the file to make this work. Once you have a proper the proper settings, start adding src-blocks and then run =M-x org-babel-tangle <RET>=. Your config files will then be generated and Emacs will use those files when starting up. I have also written a hook that tangles this file everytime I save.

** System Requirements

| Hardware             |      OS | Emacs Version |
|----------------------+---------+---------------|
| 15" 2019 MacBook Pro | 10.14.6 |       27.0.50 |
| 15" 2019 MacBook Pro |         |       27.0.50 |

-------------------------------------------------------------------

* Early-Init
:properties:
:header-args: :tangle "~/dotz/editors/emacs.d/early-init.el"
:end:
** Header
#+name: early-init-header-block
#+begin_src emacs-lisp
  ;;; early-init.el --- Early initialization. -*- lexical-binding: t; buffer-read-only: t-*-
  ;;;
  ;;; Commentary:
  ;;; Emacs `early-init.el' config by dylanjm
  ;;; This file was automatically generated by `org-babel-tangle'.
  ;;; Do not change this file.  Main config is located in emacs.d/dotemacs.org
  ;;;
  ;;; Code:
#+end_src

** Preliminary Configuration
You'll see a similar configuration in other dotfiles online. By default, Emac's runs it garbage collector when the
*** Garbage Collection
#+name: early-init-gc-block
#+begin_src emacs-lisp
  (defvar default-file-name-handler-alist file-name-handler-alist)
  (defvar extended-gc-cons-threshold most-positive-fixnum)
  (defvar default-gc-cons-threshold 20000000)

  (setq-default auto-window-vscroll nil
                bidi-display-reordering 'left-to-right
                command-line-ns-option-alist nil
                frame-inhibit-implied-resize t)

  (setq file-name-handler-alist nil
        gc-cons-percentage 0.6
        gc-cons-threshold extended-gc-cons-threshold
        package-enable-at-startup nil)

  (defun djm/return-vars-to-normal ()
    (setq file-name-handler-alist default-file-name-handler-alist
          gc-cons-percentage 0.1))

  (add-hook 'after-init-hook #'djm/return-vars-to-normal)
  (run-with-idle-timer 5 nil (lambda ()
                               (setq-default gc-cons-threshold default-gc-cons-threshold)
                               (garbage-collect)
                               (message "GC returning to normal")))
#+end_src

*** Pre-Gui Optimization
#+name: early-init-pre-gui-block
#+begin_src emacs-lisp
  (setq-default default-frame-alist '((ns-transparent-titlebar . t)
                                      (tool-bar-lines . 0)
                                      (ns-appearance . dark)
                                      (vertical-scroll-bars)))
#+end_src
** Footer
#+name: early-init-footer-block
#+begin_src emacs-lisp
  (provide 'early-init)
  ;;; early-init.el ends here
#+end_src

-------------------------------------------------------------------
* Init
** Header
#+name: init-header-block
#+begin_src emacs-lisp
  ;;; init.el --- Emacs main configuration file -*- lexical-binding: t; buffer-read-only: t-*-
  ;;;
  ;;; Commentary:
  ;;; Emacs `init.el' config by dylanjm.
  ;;; This file was automatically generated by `org-babel-tangle'.
  ;;; Do not change this file.  Main config is located in emacs.d/dotemacs.org
  ;;;
  ;;; Code:
#+end_src

** Package Management
*** [[https://github.com/raxod502/straight.el][Straight]]
#+name: early-init-straight-block
#+begin_src emacs-lisp
  (eval-and-compile
    (defvar straight-recipes-gnu-elpa-use-mirror t)
    (defvar bootstrap-version 5)
    (defvar bootstrap-file
      (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory)))

  (setq-default straight-cache-autoloads t
                straight-recipe-overrides nil
                straight-repository-branch "develop"
                straight-use-package-by-default t
                straight-enable-use-package-integration t
                straight-check-for-modifications '(check-on-save find-when-checking))

  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))

  (load bootstrap-file nil 'nomessage)
#+end_src

*** [[https://github.com/jwiegley/use-package][Use-Package]]
#+name: init-block-use-package-block
#+begin_src emacs-lisp
  (setq-default use-package-verbose t
                use-package-always-defer t
                use-package-compute-statistics t)

  (straight-use-package 'use-package)
#+end_src

** Initial Demands
*** [[https://github.com/dholm/benchmark-init-el][Benchmark-Init]]
#+name: early-init-no-littering-block
#+begin_src emacs-lisp :tangle no
  (use-package benchmark-init
    :demand t :straight t
    :init (benchmark-init/activate))
    ;;(add-hook 'pre-command-hook #'benchmark-init/deactivate))
#+end_src

*** [[https://github.com/purcell/exec-path-from-shell][Exec-Path-From-Shell]]
#+name: init-environment-block
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :demand t :straight t
    :if (eq system-type 'darwin)
    :init
    (setq exec-path-from-shell-check-startup-files t
                  exec-path-from-shell-variables '("PATH" "MANPATH" "DOTFILES" "XDG_CACHE_HOME" "GPG_TTY")
                  exec-path-from-shell-arguments '("-i"))
    (exec-path-from-shell-initialize))
#+end_src
*** [[https://github.com/emacscollective/no-littering][No-Littering]]
#+name: early-init-no-littering-block
#+begin_src emacs-lisp
  (use-package no-littering
    :demand t :straight t
    :init
    (setq no-littering-etc-directory "~/.cache/emacs/etc/"
          no-littering-var-directory "~/.cache/emacs/var/"))
#+end_src

*** [[https://github.com/raxod502/el-patch][El-Patch]]
#+name: init-el-patch-block
#+begin_src emacs-lisp
  (use-package el-patch :straight t)
  (eval-when-compile
    (require 'el-patch))
#+end_src

*** [[https://github.com/noctuid/general.el][General]]
#+name: init-general-block
#+begin_src emacs-lisp
  (use-package general :demand t :straight t)
#+end_src

*** [[https://github.com/raxod502/blackout][Blackout]]
#+name: init-blackout-block
#+begin_src emacs-lisp
  (use-package blackout
    :demand t
    :straight (:host github :repo "raxod502/blackout"))
#+end_src

*** Org-Plus-Contrib
#+name: ini-org-plus-contrib-block
#+begin_src emacs-lisp
  (straight-use-package 'org-plus-contrib)
#+end_src

** Personal Configuration
*** Variables
#+name: init-variables-block
#+begin_src emacs-lisp
  (defvar djm--assets-directory    (concat user-emacs-directory "assets/"))
  (defvar djm--lisp-directory      (concat user-emacs-directory "lisp/"))
  (defvar djm--straight-directory  (concat user-emacs-directory "straight/"))
  (defvar djm--yasnippet-directory (concat user-emacs-directory "snippets/"))

  (defvar djm--org-agenda-directory "~/org/")

  (defvar djm--custom-file  "~/.cache/emacs/etc/custom.el")
  (defvar djm--secret-file "~/.cache/emacs/etc/secret.el")

  (defvar djm--auto-save-file-cache "~/.cache/emacs/var/backups/")
#+end_src

*** Functions
**** Protect Buffers
#+name: init-protected-buffers-func-block
#+begin_src emacs-lisp
  (defvar *protected-buffers* '("*scratch*" "*Messages*"))

  (defun djm/protected-buffers ()
    "Protects some buffers from being killed."
    (dolist (buffer *protected-buffers*)
      (if (get-buffer buffer)
          (with-current-buffer buffer
            (emacs-lock-mode 'kill))
        (get-buffer-create buffer)
        (with-current-buffer buffer
          (emacs-lock-mode 'kill)))))

  (general-add-hook 'emacs-startup-hook #'djm/protected-buffers)
#+end_src

**** Async Tangle
Sourced from [[https://github.com/rememberYou/.emacs.d/blob/master/config.org][rememberYou]]
#+name: init-async-tangle-func-block
#+begin_src emacs-lisp 
  (defvar *config-file* (expand-file-name "dotemacs.org" user-emacs-directory)
    "The Configuration File.")

  (defvar *config-last-change* (nth 5 (file-attributes *config-file*))
    "Last modification time of the configuration file.")

  (defvar *show-async-tangle-results* nil
    "Keeps *emacs* async buffers arround for later inspection.")

  (defun djm/config-updated ()
    "Checks if the configuration file has been updated since the last time."
    (time-less-p *config-last-change*
                 (nth 5 (file-attributes *config-file*))))

  (defun djm/config-tangle ()
    "Tangle the org file asynchronously."
    (when (djm/config-updated)
      (setq *config-last-change*
            (nth 5 (file-attributes *config-file*)))
      (djm/async-babel-tangle *config-file*)))

  (defun djm/async-babel-tangle (org-file)
    "Tangles org-file async"
    (let ((init-tangle-start-time (current-time))
          (file (buffer-file-name))
          (async-quiet-switch "-q"))
      (async-start
       `(lambda ()
          (require 'org)
          (org-babel-tangle-file ,org-file))
       (unless *show-async-tangle-results*
         `(lambda (result)
            (if result
                (message "SUCCESS: %s successfully tangled (%.2fs)."
                         ,org-file
                         (float-time (time-subtract (current-time)
                                                    ',init-tangle-start-time)))
              (message "ERROR: %s as tangle failed." ,org-file)))))))
#+end_src

*** Hooks & Advice
#+name: init-personal-hooks-block
#+begin_src emacs-lisp
  (general-add-hook 'write-file-functions 'time-stamp)
#+end_src

*** Keybindings
#+name: init-personal-keybindings-block
#+begin_src emacs-lisp
    (general-define-key
     "RET" #'newline-and-indent
     "C-j" #'newline-and-indent
     "C-z" nil)
#+end_src

#+name: init-aliases-block
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  (fset 'display-startup-echo-area-message 'ignore)
  (fset 'view-hello-file 'ignore)
  (fset 'custom-safe-themes 't)
#+end_src

** Built-In Defaults
*** Advice (Built-In)
#+name: init-advice-block
#+begin_src emacs-lisp
  (use-package advice
    :straight (:type built-in)
    :config
    (general-setq ad-redefinition-action 'accept))
#+end_src

*** Align (Built-In)
#+name: init-align-block
#+begin_src emacs-lisp
  (use-package align
    :straight (:type built-in)
    :commands align
    :general
    ("C-c [" #'align-regexp))
#+end_src

*** Ansi-Color (Built-In)
#+name: init-ansi-color-block
#+begin_src emacs-lisp
  (use-package ansi-color
    :straight (:type built-in)
    :ghook ('compilation-filter-hook #'compilation-ansi-color-process-output)
    :preface
    (defun compilation-ansi-color-process-output ()
      (ansi-color-process-output nil)
      (set (make-local-variable 'comint-last-output-start)
           (point-marker))))
#+end_src
*** Auth-Source (Built-In)
#+name: init-auth-source-block
#+begin_src emacs-lisp
  (use-package auth-source
    :straight (:type built-in)
    :config
    (general-setq auth-sources `(,(no-littering-expand-etc-file-name "authinfo.gpg")
                                 ,(no-littering-expand-etc-file-name "authinfo"))))
#+end_src

*** Autorevert (Built-In)
#+name: init-autorevert-block
#+begin_src emacs-lisp
  (use-package autorevert
    :straight (:type built-in)
    :ghook ('emacs-startup-hook #'global-auto-revert-mode)
    :config
    (general-setq auto-revert-verbose nil
                  global-auto-revert-non-file-buffers t
                  auto-revert-interval 1
                  revert-without-query '(".*")
                  auto-revert-use-notify nil))
#+end_src

*** Bookmark (Built-In)
#+name: init-bookmark-block
#+begin_src emacs-lisp
  (use-package bookmark
    :straight (:type built-in)
    :config (general-setq bookmark-save-flag +1))
#+end_src

*** Calculator (Built-In)
#+name: init-calc-block
#+begin_src emacs-lisp
  (use-package calc
    :straight (:type built-in)
    :config
    (general-setq math-additional-units
                  '((GiB "1024 * MiB" "Giga Byte")
                    (MiB "1024 * KiB" "Mega Byte")
                    (KiB "1024 * B" "Kilo Byte")
                    (B nil "Byte")
                    (Gib "1024 * Mib" "Giga Bit")
                    (Mib "1024 * Kib" "Mega Bit")
                    (Kib "1024 * b" "Kilo Bit")
                    (b "B / 8" "Bit"))))
#+end_src
*** Calendar (Built-In)
#+name: init-calendar-block
#+begin_src emacs-lisp
  (use-package calendar
    :straight (:type built-in)
    :ghook ('calendar-today-visible-hook #'calendar-mark-today)
    :config
    (general-setq calendar-longitude 43.492
                  calendar-latitude -112.034
                  calendar-location-name "Idaho Falls, Idaho"
                  calendar-holiday-marker t))
#+end_src

*** Comint (Built-In)
#+name: init-comint-block
#+begin_src emacs-lisp
  (use-package comint
    :straight (:type built-in)
    :config
    (general-setq comint-prompt-read-only t))
#+end_src

*** Compile (Built-In)
#+name: init-compile-block
#+begin_src emacs-lisp
  (use-package compile
    :straight (:type built-in) :no-require t
    :config
    (general-setq compilation-message-face 'compilation-base-face
                  compilation-always-kill t
                  compilation-ask-about-save nil
                  compilation-scroll-output 'first-error))
#+end_src

*** Cus-Start (Built-In)
#+name: init-cus-start-block
#+begin_src emacs-lisp
  (use-package cus-start
    :straight (:type built-in)
    :init
    (general-setq-default auto-save-list-file-prefix nil
                          auto-save-list-file-name nil
                          auto-window-vscroll nil
                          cursor-in-non-selected-windows nil
                          cursor-type 'bar
                          delete-by-moving-to-trash t
                          disabled-command-function nil
                          default-directory "~"
                          echo-keystrokes 0.02
                          enable-recursive-minibuffers t
                          fast-but-imprecise-scrolling t
                          ffap-machine-p-known 'reject
                          fill-column 80
                          frame-title-format '("%b - Emacs")
                          history-delete-duplicates t
                          history-length 3000
                          icon-title-format frame-title-format
                          initial-major-mode 'fundamental-mode
                          inhibit-compacting-font-caches t
                          inhibit-startup-echo-area-message t
                          inhibit-startup-screen t
                          indent-tabs-mode nil
                          split-width-threshold 160
                          split-height-threshold nil
                          ring-bell-function #'ignore
                          scroll-conservatively 101
                          scroll-margin 5
                          scroll-preserve-screen-position t
                          scroll-step 1
                          sentence-end-double-space nil
                          tab-always-indent 'complete
                          tab-width 4
                          use-dialog-box nil
                          use-file-dialog nil
                          window-combination-resize t
                          window-resize-pixelwise t
                          frame-resize-pixelwise t))
#+end_src

*** Delsel (Built-In)
#+name: init-delsel-block
#+begin_src emacs-lisp
  (use-package delsel
    :straight (:type built-in)
    :ghook ('emacs-startup-hook #'delete-selection-mode))
#+end_src

*** Dired (Built-In)
#+name: init-dired-block
#+begin_src emacs-lisp
  (use-package dired
    :straight (:type built-in)
    :config
    (general-setq dired-auto-revert-buffer t
                  dired-dwim-target t
                  dired-use-ls-dired t
                  dired-ls-F-marks-symlinks t
                  dired-hide-details-hide-symlink-targets nil
                  dired-listing-switches "-alhvF --group-directories-first --time-style iso"
                  dired-recursive-deletes 'always
                  dired-recursive-copies 'always
                  dired-deletion-confirmer '(lambda (x) t))) ;; Don't confirm deleting files
#+end_src

*** WDired (Built-In)
#+name: init-wdired-block
#+begin_src emacs-lisp
  (use-package wdired
    :straight (:type built-in) :after (dired)
    :general
    (:keymaps
     'dired-mode-map
     "C-c C-e" #'wdired-change-to-wdired-mode)
    :config
    (general-setq wdired-create-parent-directories t
                  wdired-allow-to-change-permissions t))
#+end_src

*** Dired-X (Built-In)
#+name: init-dired-x-block
#+begin_src emacs-lisp
  (use-package dired-x
    :straight (:type built-in)
    :config
    (general-setq dired-x-hands-off-my-keys nil
                  dired-omit-verbose t
                  dired-clean-up-buffers-too t))
#+end_src

*** Eldoc (Built-In)
#+name: init-eldoc-block
#+begin_src emacs-lisp
  (use-package eldoc
    :straight (:type built-in)
    :ghook ('emacs-lisp-mode-hook #'turn-on-eldoc-mode)
    :config
    (general-setq eldoc-idle-delay .2
                  eldoc-echo-area-use-multiline-p nil))
#+end_src

*** Elisp-Mode (Built-In)
#+name: init-elisp-mode-block
#+begin_src emacs-lisp
  (use-package elisp-mode
    :blackout (emacs-lisp-mode . "Elisp") :straight (:type built-in)
    :config
    (general-setq emacs-lisp-docstring-fill-column 80))
#+end_src

*** Emacs-Lock (Built-In)
#+name: init-emacs-lock-block
#+begin_src emacs-lisp
  (use-package emacs-lock
    :blackout " 🔐 " :straight (:type built-in))
#+end_src

*** Epa (Built-In)
#+name: init-epa-block
#+begin_src emacs-lisp
  (use-package epa
    :straight (:type built-in) :no-require t
    :config (general-setq epa-replace-original-text t))
#+end_src

*** Epg (Built-In)
#+name: init-epg-block
#+begin_src emacs-lisp
  (use-package epg
    :straight (:type built-in) :no-require t
    :config (general-setq epg-pinentry-mode 'loopback))
#+end_src

*** Face-Remap (Built-In)
#+name: init-face-remap-block
#+begin_src emacs-lisp
  (use-package face-remap
    :straight (:type built-in)
    :config
    (blackout 'buffer-face-mode)
    (blackout 'visual-line-mode)
    (blackout 'variable-pitch-mode))
#+end_src

*** Eww (Built-In)
#+name: init-web-browsing-block
#+begin_src emacs-lisp
  (use-package eww
    :straight (:type built-in))
#+end_src

*** Browse-Url (Built-In)
#+name: init-browse-url-block
#+begin_src emacs-lisp
  (use-package browse-url
    :straight (:type built-in)
    :config
    (general-setq browse-urls-browser-function "firefox"))
#+end_src
*** Files (Built-In)
#+name: init-files-block
#+begin_src emacs-lisp
  (use-package files
    :straight (:type built-in)
    :init
    (general-setq-default backup-by-copying t
                          confirm-kill-processes nil
                          confirm-nonexistent-file-or-buffer nil
                          create-lockfiles nil
                          delete-old-versions t
                          enable-local-variables :all
                          find-file-visit-truename t
                          insert-directory-program "gls"
                          kept-new-versions 6
                          large-file-warning-threshold 10000000000
                          require-final-newline t
                          select-enable-clipboard t
                          version-control t
                          view-read-only t))
#+end_src

*** Frame (Built-In)
#+name: init-frame-block
#+begin_src emacs-lisp
  (use-package frame
    :straight (:type built-in)
    :ghook ('after-init-hook #'djm/turn-off-mouse-modes)
    :preface
    (defun djm/turn-off-mouse-modes ()
      (blink-cursor-mode -1)
      (tooltip-mode -1)
      (mouse-wheel-mode -1)
      (unless (display-graphic-p)
        (menu-bar-mode -1))))
#+end_src

*** Gnutls (Built-In)
#+name: init-gnutls-block
#+begin_src emacs-lisp
  (use-package gnutls
    :straight (:type built-in)
    :config
    (general-setq gnutls-verify-error t
                  gnutls-min-prime-bits 2048))
#+end_src

*** Help (Built-In)
#+name: init-help-block
#+begin_src emacs-lisp
  (use-package help
    :straight (:type built-in)
    :config
    (general-setq help-window-select t)
    (general-add-advice 'help-window-display-message :override #'ignore))
#+end_src

*** Ispell (Built-In)
#+name: init-ispell-block
#+begin_src emacs-lisp
  (use-package ispell
    :straight (:type built-in)
    :preface
    (defun djm/fetch-hunspell-dictionary ()
      (unless (file-exists-p "~/Library/Spelling/en_US.aff")
        (shell-command "bash $DOTFILES/bootstrap/bootstrap_dicts.sh")))
    :config
    (djm/fetch-hunspell-dictionary)
    (general-setq ispell-dictionary "en_US"
                  ispell-program-name (executable-find "hunspell")
                  ispell-really-hunspell t
                  ispell-silently-savep t))
#+end_src

*** Make-Mode (Built-In)
#+name: init-makefile-block
#+begin_src emacs-lisp :tangle no
  (use-package make-mode
    :straight (:type built-in)
    :blackout ((makefile-automake-mode . "Makefile")
               (makefile-gmake-mode . "Makefile")
               (makefile-makepp-mode . "Makefile")
               (makefile-bsdmake-mode . "Makefile")
               (makefile-imake-mode . "Makefile")))
#+end_src
*** Minibuffer (Built-In)
#+name: init-mini-buffer-block
#+begin_src emacs-lisp
  (use-package minibuffer
    :straight (:type built-in)
    :general
    ("C-g" #'minibuffer-keyboard-quit)
    :config
    (defun djm/minibuffer-setup-hook ()
      "With modern packages like Ivy/Counsel, let's extend the gc-threshold while
    using the minibuffer to maximize performance"
      (setq gc-cons-threshold extended-gc-cons-threshold))

    (defun djm/minibuffer-exit-hook ()
      "Upon exiting the minibuffer, we'll set everything back to normal"
      (setq gc-cons-threshold default-gc-cons-threshold))

    (general-add-hook 'minibuffer-setup-hook #'djm/minibuffer-setup-hook)
    (general-add-hook 'minibuffer-exit-hook #'djm/minibuffer-exit-hook)
    (general-add-hook 'minibuffer-setup-hook #'minibuffer-depth-indicate-mode))
#+end_src

*** NS-Win (Built-In)
#+name: init-ns-win-block
#+begin_src emacs-lisp
  (use-package ns-win
    :straight (:type built-in)
    :config
    (general-setq mac-command-modifier 'meta
                  mac-option-modifier 'meta
                  mac-right-command-modifier 'super
                  mac-right-option-modifier 'none
                  mac-function-modifier 'hyper)

    (general-setq  ns-pop-up-frames nil
                   ns-use-native-fullscreen nil
                   ns-use-thin-smoothing t))
#+end_src

*** Pixel-Scroll (Built-In)
#+name: init-pixel-scroll-block
#+begin_src emacs-lisp
  (use-package pixel-scroll
    :straight (:type built-in)
    :ghook 'emacs-startup-hook)
#+end_src

*** Prog-Mode (Built-In)
#+name: init-prog-mode-block
#+begin_src emacs-lisp
  (use-package prog-mode
    :straight (:type built-in)
    :gfhook
    #'display-fill-column-indicator-mode
    #'show-paren-mode
    #'global-prettify-symbols-mode
    :config
    (general-add-hook 'after-save-hook #'executable-make-buffer-file-executable-if-script-p))
#+end_src

*** Recentf (Built-In)
#+name: init-recentf-block
#+begin_src emacs-lisp
  (use-package recentf
    :straight (:type built-in)
    :config
    (general-setq recentf-max-saved-items 2000
                  recentf-max-menu-items 100
                  recentf-auto-cleanup 'never)
    (run-at-time nil (* 5 60) (lambda () (let ((save-silently t)) (recentf-save-list)))))
#+end_src

*** Savehist (Built-In)
#+name: init-savehist-block
#+begin_src emacs-lisp
  (use-package savehist
    :straight (:type built-in)
    :ghook 'after-init-hook
    :config
    (general-setq savehist-additional-variables '(mark-ring
                                                  global-mark-ring
                                                  search-ring
                                                  kill-ring
                                                  regexp-search-ring
                                                  extended-command-history)
                  savehist-autosave-interval 60))

#+end_src

*** Saveplace (Built-In)
#+name: init-saveplace-block
#+begin_src emacs-lisp
  (use-package saveplace
    :straight (:type built-in)
    :ghook ('after-init-hook #'save-place-mode))
#+end_src

*** Select (Built-In)
#+name: init-select-block
#+begin_src emacs-lisp
  (use-package select
    :straight (:type built-in)
    :init
    (general-setq select-enable-clipboard t))
#+end_src

*** Shell (Built-In)
#+name: init-shell-block
#+begin_src emacs-lisp
  (use-package sh-script
    :straight (:type built-in)
    :mode ("\\.sh'" "\\.zsh'" "\\.bash'"))
#+end_src
*** Simple (Built-In)
#+name: init-simple-block
#+begin_src emacs-lisp
  (use-package simple
    :straight (:type built-in)
    :init
    (general-setq blink-matching-paren t
                  column-number-mode nil
                  display-time-mode t
                  eval-expression-print-length nil
                  eval-expression-print-level nil
                  inhibit-point-motion-hooks t
                  kill-do-not-save-duplicates t
                  kill-ring-max 300
                  line-move-visual nil
                  line-number-mode t
                  mode-line-percent-position nil
                  save-interprogram-paste-before-kill t
                  set-mark-command-repeat-pop t
                  show-trailing-whitespace nil))

#+end_src

*** Smerge (Built-In)
#+name: init-smerge-block
#+begin_src emacs-lisp
  (use-package smerge-mode
    :straight (:type built-in)
    :commands (smerge-mode))
#+end_src
*** Time (Built-In)
#+name: init-time-block
#+begin_src emacs-lisp
  (use-package time
    :straight (:type built-in)
    :ghook ('after-init-hook #'display-time-mode)
    :config
    (general-setq-default display-time-24hr-format nil
                          display-time-day-and-date t
                          display-time-default-load-average nil))
#+end_src

*** Uniquify (Built-In)
#+name: init-uniquify-block
#+begin_src emacs-lisp
  (use-package uniquify
    :straight (:type built-in)
    :init
    (general-setq uniquify-ignore-buffers-re "^\\*"
                  uniquify-buffer-name-style 'forward
                  uniquify-separator "/"))
#+end_src

*** VC-Hooks (Built-In)
#+name: init-vc-hooks-block
#+begin_src emacs-lisp
  (use-package vc-hooks
    :straight (:type built-in)
    :init
    (general-setq vc-follow-symlinks t))
#+end_src

*** View (Built-In)
#+name: init-view-block
#+begin_src emacs-lisp
  (use-package view
    :straight (:type built-in)
    :config
    (general-setq view-inhibit-help-message t))
#+end_src

*** Winner (Built-In)
#+name: init-winner-block
#+begin_src emacs-lisp
  (use-package winner
    :straight (:type built-in)
    :ghook 'after-init-hook)
#+end_src

** User Files
*** Custom File
#+name: init-custom-load-block
#+begin_src emacs-lisp
  (use-package cus-edit
    :straight (:type built-in)
    :config
    (general-setq custom-file djm--custom-file)
    (when (file-exists-p custom-file)
      (load custom-file :noerror)))
#+end_src

*** Secret File
#+name: init-secret-load-block
#+begin_src emacs-lisp :tangle no
  (when (file-exists-p djm--secret-file)
    (load djm--secret-file :noerror))
#+end_src

** Themes & Aesthetics
*** [[https://github.com/yoshiki/yaml-mode][All-The-Icons]]
#+name: init-all-the-icons-block
#+begin_src emacs-lisp
  (use-package all-the-icons
    :straight t
    :commands (all-the-icons-wicon
               all-the-icons-insert
               all-the-icons-faicon
               all-the-icons-octicon
               all-the-icons-material
               all-the-icons-fileicon
               all-the-icons-alltheicon
               all-the-icons-insert-wicon
               all-the-icons-wicon-family
               all-the-icons-octicon-data
               all-the-icons--family-name
               all-the-icons-insert-faicon
               all-the-icons-fileicon-data
               all-the-icons-install-fonts
               all-the-icons-faicon-family
               all-the-icons-material-data
               all-the-icons-octicon-family
               all-the-icons--function-name
               all-the-icons-insert-octicon
               all-the-icons-insert-material
               all-the-icons-material-family
               all-the-icons-fileicon-family
               all-the-icons-alltheicon-data
               all-the-icons-insert-fileicon
               all-the-icons--read-candidates
               all-the-icons-insert-alltheicon
               all-the-icons-alltheicon-family
               all-the-icons-icon-for-url
               all-the-icons-icon-for-dir
               all-the-icons-icon-for-mode
               all-the-icons-icon-for-file
               all-the-icons-match-to-alist
               all-the-icons--web-mode-icon
               all-the-icons-icon-for-buffer
               all-the-icons-icon-for-weather
               all-the-icons-insert-icons-for
               all-the-icons-auto-mode-match?
               all-the-icons--insert-function-name
               all-the-icons-icon-family-for-mode
               all-the-icons-icon-family-for-file
               all-the-icons--web-mode-icon-family
               all-the-icons--icon-info-for-buffer
               all-the-icons-icon-family-for-buffer
               all-the-icons--read-candidates-for-family
               all-the-icons-dir-is-submodule))
#+end_src

*** [[https://github.com/dylanjm/emacs-theme-gruvbox][Gruvbox Theme]]
#+name: init-gruvbox-theme-block
#+begin_src emacs-lisp
  (use-package gruvbox-theme
    :straight (:host github :repo "dylanjm/emacs-theme-gruvbox")
    :ghook ('emacs-startup-hook #'djm/load-gruvbox-theme)
    :preface
    (defun djm/load-gruvbox-theme ()
      (load-theme 'gruvbox-dark-hard t)
      (set-face-attribute 'variable-pitch nil :inherit 'default :family "Iosevka Aile" :weight 'ultra-light)
      (set-face-attribute 'font-lock-comment-face nil :family "Iosevka SS09" :weight 'ultra-light :slant 'italic)
      (set-face-attribute 'fixed-pitch nil :inherit 'default :family "Iosevka SS09" :weight 'ultra-light)

      ;; Test range: 🐷 ❤ ⊄ ∫ 𝛼 α 🜚 Ⓚ
      (set-fontset-font t nil (font-spec :family "Iosevka Term") nil nil)
      (dolist (script '(symbol mathematical))
        (set-fontset-font t script (font-spec :family "XITS Math" :weight 'normal) nil nil))

      ;; Define a font set stack for symbols, greek and math characters
      (dolist (script '(symbol greek))
        (set-fontset-font t script (font-spec :family "Symbola") nil 'append)
        (set-fontset-font t script (font-spec :family "Arial Unicode MS") nil 'append)
        (set-fontset-font t script (font-spec :family "DejaVu Sans Mono") nil 'prepend))

      ;; Colored Emoji on OS X, prefer over everything else!
      (set-fontset-font t 'unicode (font-spec :family "Symbola") nil nil)
      (set-fontset-font t 'unicode (font-spec :family "DejaVuSansMono Nerd Font") nil 'prepend)
      (set-fontset-font t 'unicode (font-spec :family "Apple Color Emoji") nil 'prepend)

      ;; Fallbacks for math and generic symbols
      (set-fontset-font t nil (font-spec :family "Apple Symbols") nil 'append)))
#+end_src
*** [[https://github.com/Malabarba/smart-mode-line][Smart-Mode-Line]]
#+name: init-smart-mode-line-block
#+begin_src emacs-lisp
  (use-package smart-mode-line
    :straight t
    :ghook ('after-init-hook #'djm/config-smart-mode-line)
    :preface
    (defun djm/config-smart-mode-line ()
      (general-setq mode-line-format (delq 'mode-line-position mode-line-format)
                    display-time-format " %a %B %d %I:%M %p"
                    sml/theme nil
                    sml/no-confirm-load-theme t)
      (sml/setup)
      (general-remove-hook 'display-time-hook 'sml/propertize-time-string)))
#+end_src

*** [[https://github.com/purcell/default-text-scale][Default-Text-Scale]]
#+name: init-default-text-scale-block
#+begin_src emacs-lisp
  (use-package default-text-scale
    :straight t
    :general
    ("<C-s-up>" #'default-text-scale-increase
     "<C-s-down>" #'default-text-scale-decrease
     "<C-M-s-down>" #'default-text-scale-reset)
    :config (general-setq default-text-scale-amount 20))
#+end_src

*** [[https://github.com/purcell/page-break-lines][Page-Break-Lines]]
#+name: init-page-break-lines-block
#+begin_src emacs-lisp
  (use-package page-break-lines
    :blackout t :straight t
    :ghook djm--page-break-line-hooks
    :preface
    (defconst djm--page-break-line-hooks
      '(ibuffer-mode-hook
        text-mode-hook
        comint-mode-hook
        compilation-mode-hook
        help-mode-hook
        org-agenda-mode-hook)))
#+end_src

** System

*** [[https://github.com/jwiegley/emacs-async][Emacs-Async]]
#+name: init-async-block
#+begin_src emacs-lisp
  (use-package async
    :straight t
    :ghook ('dired-mode-hook #'dired-async-mode))
#+end_src

*** [[https://github.com/emacsorphanage/osx-trash][OSX-Trash]]
#+name: init-osx-trash-block
#+begin_src emacs-lisp
  (use-package osx-trash
    :straight t
    :ghook ('after-init-hook #'osx-trash-setup))
#+end_src

*** [[https://github.com/emacsorphanage/osx-trash][Restart-Emacs]]
#+name: init-restart-emacs-block
#+begin_src emacs-lisp
  (use-package restart-emacs
    :straight t
    :init (defalias 're #'restart-emacs))
#+end_src

*** [[https://github.com/wasamasa/firestarter][Firestarter]]
#+name: init-firestarter-block
#+begin_src emacs-lisp
  (use-package firestarter
    :straight t
    :ghook 'before-save-hook)
#+end_src

*** [[https://gitlab.com/koral/gcmh][GCMH]]
#+name: init-gchm-block
#+begin_src emacs-lisp
  (use-package gcmh
    :blackout t :straight t
    :ghook 'after-init-hook
    :preface
    (defun djm/gc-on-lose-focus ()
      "A convienient time to run garbage collect is when Emacs loses focus."
      (unless (frame-focus-state)
        (garbage-collect)))

    (if (boundp 'after-focus-change-function)
        (add-function :after after-focus-change-function #'djm/gc-on-lose-focus))

    :config (general-setq gcmh-verbose t
                          gcmh-low-cons-threshold default-gc-cons-threshold
                          gcmh-high-cons-threshold extended-gc-cons-threshold))
#+end_src

** Project Management
*** [[https://github.com/bbatsov/projectile][Projectile]]
#+name: init-projectile-block
#+begin_src emacs-lisp
  (use-package projectile
    :blackout t :straight t
    :ghook 'after-init-hook
    :general
    (:prefix "M-p"
             "s" #'projectile-switch-project
             "c" #'projectile-compile-project
             "f" #'projectile-find-file)
    :config
    (general-setq projectile-completion-system 'ivy
                  projectile-enable-caching t
                  projectile-switch-project-action 'projectile-dired
                  projectile-verbose nil))
#+end_src

*** [[https://github.com/wbolster/emacs-direnv][Direnv]]
#+name: init-direnv-block
#+begin_src emacs-lisp
  (use-package direnv
    :straight t
    :ghook 'projectile-mode-hook
    :config
    (dolist (nf-modes '(comint-mode
                        term-mode
                        vterm-mode
                        eshell-mode
                        shell-mode
                        compilation-mode))
      (general-pushnew nf-modes direnv-non-file-modes))
    (add-hook 'compilation-mode-hook #'direnv-update-environment))
#+end_src

** Frameworks
*** [[https://github.com/raxod502/prescient.el][Prescient]]
#+name: init-prescient-block
#+begin_src emacs-lisp
  (use-package prescient
    :straight t
    :config (prescient-persist-mode +1))
#+end_src

*** [[https://github.com/raxod502/prescient.el][Ivy-Prescient]]
#+name: init-ivy-prescient-block
#+begin_src emacs-lisp
  (use-package ivy-prescient
    :straight t :after (counsel)
    :ghook 'counsel-mode-hook
    :config
    (general-add-hook 'ivy-sort-functions-alist
                      '((ivy-omni-org . nil)
                        (swiper . nil)
                        (org-starter-swiper-config-files . nil)
                        (counsel-minibuffer-history . nil)
                        (counsel-mark-ring . nil))))
#+end_src

*** [[https://github.com/lewang/flx][FLX]]
#+name: init-flx-block
#+begin_src emacs-lisp
  (use-package flx :straight t)
#+end_src

*** [[https://github.com/abo-abo/swiper][Ivy]]
#+name: init-ivy-block
#+begin_src emacs-lisp
  (use-package ivy
    :blackout t :straight t
    :ghook 'after-init-hook
    :general
    ("C-x b"   #'ivy-switch-buffer
     "C-x B"   #'ivy-switch-buffer-other-window
     "C-c C-r" #'ivy-resume
     "M-w"     #'ivy-kill-ring-save)
    (:keymaps
     'ivy-minibuffer-map
     "<tab>" #'ivy-alt-done
     "C-w"   #'ivy-yank-word
     "C-o"   #'ivy-occur)
    (:keymaps
     'ivy-switch-buffer-map
     "C-x k" #'ivy-switch-buffer-kill)
    :config
    (general-setq ivy-dynamic-exhibit-delay-ms 100
                  ivy-use-selectable-prompt t
                  ivy-case-fold-search-default 'auto
                  ivy-initial-inputs-alist nil
                  ivy-use-virtual-buffers t
                  ivy-height 15
                  ivy-virtual-abbreviate 'name
                  ivy-count-format "(%d/%d) "
                  ivy-flx-limit 2000
                  ivy-sort-max-size 50000))
#+end_src

*** [[https://github.com/abo-abo/swiper][Counsel]]
#+name: init-counsel-block
#+begin_src emacs-lisp
  (use-package counsel
    :blackout t :straight t
    :ghook 'ivy-mode-hook
    :general
    ([remap dired]                    #'counsel-dired
     [remap execute-extended-command] #'counsel-M-x
     [remap find-file]                #'counsel-find-file
     "C-x C-r"                        #'counsel-recentf
     "C-x C-l"                        #'counsel-find-library
     "C-x C-u"                        #'counsel-unicode-char
     "C-c k"                          #'counsel-rg
     "C-h F"                          #'counsel-describe-face
     "C-h f"                          #'counsel-describe-function
     "C-h v"                          #'counsel-describe-variable)
    :config
    (general-setq counsel-describe-function-function #'helpful-callable
                  counsel-describe-variable-function #'helpful-variable
                  counsel-find-file-at-point t)

    (general-setq counsel-rg-base-command "rg --with-filename --no-heading --line-number --color never %s -z --sort path")
    (general-setq counsel-grep-base-command "rg -S --no-heading --line-number --color never '%s' %s")

    (general-setq counsel-fzf-cmd "fd --type f | fzf -f \"%s\"")

    (dolist (builders '((swiper . ivy--regex-plus)
                        (swiper-isearch . ivy--regex-plus)
                        (swiper-query-replace . ivy--regex-plus)
                        (swiper-all . ivy--regex-plus)
                        (counsel-describe-function . ivy--regex-fuzzy)
                        (counsel-describe-variable . ivy--regex-fuzzy)
                        (counsel-describe-face . ivy--regex-fuzzy)
                        (counsel-find-file . ivy--regex-fuzzy)))
      (general-pushnew builders ivy-re-builders-alist)))
#+end_src

*** [[https://github.com/abo-abo/swiper][Swiper]]
#+name: init-swiper-block
#+begin_src emacs-lisp 
  (use-package swiper
    :straight t
    :general ("C-s" #'swiper
              "C-r" #'swiper)
    :config
    (general-setq swiper-goto-start-of-match t))
#+end_src

** Autocompletion
*** [[https://github.com/company-mode/company-mode][Company-Mode]]
#+name: init-company-block
#+begin_src emacs-lisp
  (use-package company
    :blackout t :straight t
    :ghook ('after-init-hook #'global-company-mode)
    :general
    (:keymaps
     'company-active-map
     "RET"     nil
     [return]  nil
     "TAB"     #'company-complete-selection
     [tab]     #'company-complete-selection
     "<right>" #'company-complete-common
     "C-n"     #'company-select-next
     "C-p"     #'company-select-previous)
    :config
    (general-setq company-auto-complete-chars nil
                  company-async-timeout 15
                  company-idle-delay 0.15
                  company-minimum-prefix-length 2
                  company-show-numbers t
                  company-tooltip-limit 15
                  company-tooltip-align-annotations t)

    (defun djm/configure-company-backends-with-yas (backends)
      "Add :with company-yasnippet to company BACKENDS. Taken from
  Taken from https://github.com/syl20bnr/spacemacs/pull/179."
      (if (and (listp backends) (memq 'company-yasnippet backends))
          backends
        (append (if (consp backends)
                    backends
                  (list backends))
                '(:with company-yasnippet))))

    (general-pushnew #'org-self-insert-command company-begin-commands)

    (general-setq company-backends
                  (mapcar #'djm/configure-company-backends-with-yas company-backends)))
#+end_src

*** [[https://github.com/raxod502/prescient.el][Company-Prescient]]
#+name: init-company-prescient-block
#+begin_src emacs-lisp
  (use-package company-prescient
    :straight t
    :ghook 'company-mode-hook)
#+end_src

*** [[https://github.com/PythonNut/company-flx][Company-FLX]]
#+name: init-company-flx-block
#+begin_src emacs-lisp
  (use-package company-flx
    :straight t
    :ghook 'company-mode-hook)
#+end_src
*** [[https://github.com/joaotavora/yasnippet][Yasnippet]]
#+name: init-yasnippet-block
#+begin_src emacs-lisp
  (use-package yasnippet
    :straight t
    :ghook ('(prog-mode-hook org-mode-hook text-mode-hook) #'yas-global-mode)
    :general ("C-;" #'yas-expand)
    :config
    (blackout 'yas-global-mode)
    (blackout 'yas-minor-mode)
    (general-setq yas-verbosity 1
                  yas-wrap-around-region t
                  yas-prompt-functions '(yas-completing-prompt)
                  yas-snippet-dirs `(,djm--yasnippet-directory)))

  (use-package yasnippet-snippets
    :straight t
    :ghook ('yas-global-mode-hook #'yas-reload-all))

  (use-package auto-yasnippet
    :straight t)

  (use-package ivy-yasnippet
    :straight t
    :commands (ivy-yasnippet))
#+end_src

** Documentation
*** [[https://github.com/Wilfred/helpful][Helpful]]
#+name: init-helpful-block
#+begin_src emacs-lisp
  (use-package helpful
    :straight t
    :general
    ([remap describe-function] #'helpful-callable
     [remap describe-command]  #'helpful-command
     [remap describe-variable] #'helpful-variable
     [remap describe-key]      #'helpful-key))
#+end_src

** Editing Tools
*** [[https://github.com/magnars/multiple-cursors.el][Multiple-Cursors]]
#+name: init-multiple-cursors-block
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :straight t
    :general
    ("C->" #'mc/mark-next-like-this
     "C-<" #'mc/mark-previous-like-this))
#+end_src

*** [[https://github.com/thierryvolpiatto/zop-to-char][Zop-To-Char]]
#+name: init-zop-to-char-block
#+begin_src emacs-lisp
  (use-package zop-to-char
    :straight t
    :general
    ("M-z" #'zop-to-char
     "M-Z" #'zop-up-to-char))
#+end_src

*** [[https://github.com/mkcms/interactive-align][Interactive-Align]]
#+name: init-interactive-align-block
#+begin_src emacs-lisp :tangle no
  (use-package ialign
    :straight t)
#+end_src

*** [[https://github.com/benma/visual-regexp.el][Visual-Regexp]]
#+name: init-visual-regexp-block
#+begin_src emacs-lisp
  (use-package visual-regexp
    :straight t)
#+end_src

*** [[https://github.com/benma/visual-regexp-steroids.el][Visual-Regexp-Steroids]]
#+name: init-visual-regexp-steroids-block
#+begin_src emacs-lisp
  (use-package visual-regexp-steroids
    :straight t
    :config
    (general-setq vr/engine 'python))
#+end_src

*** [[https://github.com/syohex/emacs-anzu][Anzu]]
#+name: init-anzu-block
#+begin_src emacs-lisp
  (use-package anzu
    :straight t
    :general ([remap query-replace] #'anzu-query-replace-regexp))
#+end_src

*** [[https://github.com/Wilfred/deadgrep][Deadgrep]]
#+name: init-deadgrep-block
#+begin_src emacs-lisp
  (use-package deadgrep
    :straight t
    :init (defalias 'rg #'deadgrep))
#+end_src

*** [[https://github.com/magnars/expand-region.el][Expand-Region]]
#+name: init-expand-region-block
#+begin_src emacs-lisp
  (use-package expand-region
    :straight t
    :general ("C-=" #'er/expand-region))
#+end_src

*** [[https://github.com/akicho8/string-inflection][String-Inflection]]
#+name: init-string-inflection-block
#+begin_src emacs-lisp
  (use-package string-inflection
    :straight t)
#+end_src

*** [[https://github.com/lassik/emacs-format-all-the-code][Emacs-Format-All-The-Code]]
#+name: init-format-all-block
#+begin_src emacs-lisp
  (use-package format-all
    :straight t)
#+end_src
** Minor Modes
*** [[https://github.com/editorconfig/editorconfig-emacs][EditorConfig]]
#+name: init-editorconfig-block
#+begin_src emacs-lisp
  (use-package editorconfig
    :blackout t :straight t
    :ghook 'emacs-startup-hook)
#+end_src

*** [[https://github.com/lewang/ws-butler][WS-Butler]]
#+name: init-ws-butler-block
#+begin_src emacs-lisp
  (use-package ws-butler
    :blackout t :straight t
    :ghook ('emacs-startup-hook #'ws-butler-global-mode))
#+end_src

*** [[https://github.com/purcell/whitespace-cleanup-mode][Whitespace-Cleanup]]
#+name: init-whitespace-cleanup-block
#+begin_src emacs-lisp :tangle no
  (use-package whitespace-cleanup-mode
    :blackout t :straight t
    :ghook whitespace-modes
    :preface
    (defconst whitespace-modes
      '(prog-mode-hook
        org-mode-hook
        text-mode-hook
        conf-mode-hook))
    :config
    (general-setq show-trailing-whitespace t))
#+end_src
*** [[https://github.com/apchamberlain/undo-tree.el][Undo-Tree]]
#+name: init-undo-tree-block
#+begin_src emacs-lisp
  (use-package undo-tree
    :straight t
    :general
    ("C-/" #'undo-tree-undo
     "C-?" #'undo-tree-redo)
    :config
    (general-setq undo-tree-save-history t
                  undo-tree-visualizer-timestamps t
                  undo-tree-visualizer-diff t)
    (global-undo-tree-mode +1))
#+end_src

*** [[https://github.com/Malabarba/aggressive-indent-mode][Aggressive-Indent]]
#+name: init-aggressive-indent-block
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :blackout t :straight t
    :ghook 'emacs-lisp-mode-hook)
#+end_src

*** [[https://github.com/nflath/hungry-delete][Hungry-Delete]]
#+name: init-hungry-delete-block
#+begin_src emacs-lisp
  (use-package hungry-delete
    :blackout t :straight t
    :ghook 'emacs-lisp-mode-hook)
#+end_src

*** [[https://github.com/DarthFennec/highlight-indent-guides][Highlight-Indent-Guides]]
#+name: init-highlight-indent-guides-block
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :straight t
    :ghook 'python-mode-hook 'yaml-mode-hook)
#+end_src
*** [[https://github.com/Fanael/rainbow-delimiters][Rainbow-Delimiters]]
#+name: init-rainbow-delimiters-block
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :blackout t :straight t
    :ghook 'prog-mode-hook)
#+end_src
*** [[https://github.com/emacsmirror/rainbow-mode][Rainbow-Mode]]
#+name: init-rainbow-mode-block
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :blackout t :straight t
    :ghook '(prog-mode-hook text-mode-hook org-mode-hook))
#+end_src
** Navigation
*** [[https://github.com/abo-abo/avy][Avy]]
#+name: init-avy-block
#+begin_src emacs-lisp
  (use-package avy
    :straight t
    :config
    (general-setq avy-keys '(?a ?s ?d ?e ?f ?g ?r ?v ?h ?j ?k ?l ?n ?m ?u)
                  avy-all-windows nil))
#+end_src

*** [[https://github.com/abo-abo/ace-window][Ace-Window]]
#+name: init-ace-window-block
#+begin_src emacs-lisp
  (use-package ace-window
    :straight t
    :general ("C-x o" #'ace-window)
    :config
    (general-setq aw-keys '(?a ?s ?d ?f ?j ?k ?l)))
#+end_src

*** [[https://gitlab.com/ambrevar/emacs-windower][Windower]]
#+name: init-windower-block
#+begin_src emacs-lisp
  (use-package windower
    :straight (:host gitlab :repo "ambrevar/emacs-windower")
    :general
    ("C-c w o" #'windower-switch-to-last-buffer
     "C-c w t" #'windower-toggle-split))
#+end_src

*** [[https://gitlab.com/ambrevar/emacs-windower][Windmove]]
#+name: init-windmove-block
#+begin_src emacs-lisp
  (use-package windmove
    :straight t
    :general
    ("C-c w j" #'windmove-left
     "C-c w l" #'windmove-right
     "C-c w n" #'windmove-down
     "C-c w u" #'windmove-up))
#+end_src

*** [[https://github.com/jacktasia/dumb-jump][Dumb-Jump]]
#+name: init-dumb-jump-block
#+begin_src emacs-lisp
  (use-package dumb-jump
    :straight t
    :commands (dumb-jump-mode)
    :config (general-setq dumb-jump-selector 'ivy
                          dumb-jump-prefer-searcher 'rg))
#+end_src

*** [[https://github.com/purcell/diredfl][Diredfl]]
#+name: init-diredfl-block
#+begin_src emacs-lisp
  (use-package diredfl
    :straight t
    :ghook 'dired-mode-hook)
#+end_src

*** [[https://github.com/jtbm37/all-the-icons-dired][All-The-Icons-Dired]]
#+name: init-dired-all-the-icons-block
#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :straight t
    :ghook 'dired-mode-hook)
#+end_src

*** [[https://github.com/Fuco1/dired-hacks][Dired-Hacks]]
#+name: init-dired-hacks-block
#+begin_src emacs-lisp
  (use-package dired-hacks-utils
    :straight dired-hacks)

  (use-package dired-filter
    :straight dired-hacks)

  (use-package dired-rainbow
    :straight dired-hacks)

  (use-package dired-narrow
    :straight dired-hacks
    :general
    (:keymaps
     'dired-mode-map
     "C-c C-n" #'dired-narrow
     "C-c C-f" #'dired-narrow-fuzzy
     "C-c C-r" #'dired-narrow-regexp))

  (use-package dired-collapse
    :straight dired-hacks)

  (use-package dired-tagsistant
     :straight dired-hacks)

  (use-package dired-open
    :straight dired-hacks)

  (use-package dired-list
     :straight dired-hacks)

  (use-package dired-images
     :straight (dired-hacks eimp))

  (use-package dired-ranger
    :straight dired-hacks
    :general
    (:keymaps
     'dired-mode-map
     "C-c C-c" #'dired-ranger-copy
     "C-c C-m" #'dired-ranger-move
     "C-c C-p" #'dired-ranger-paste
     "C-c C-b" #'dired-ranger-bookmark
     "C-c b v" #'dired-ranger-bookmark-visit))

  (use-package dired-subtree
    :straight dired-hacks
    :general
    (:keymaps
     'dired-mode-map
     "<tab>"     #'dired-subtree-toggle
     "<backtab>" #'dired-subtree-cycle))
#+end_src

*** [[https://github.com/clemera/dired-git-info][Dired-Git-Info]]
#+name: init-dired-git-info-block
#+begin_src emacs-lisp
  (use-package dired-git-info
    :straight t
    :general
    (:keymaps
     'dired-mode-map
     ":" #'dired-git-info-mode))
#+end_src

*** [[https://github.com/yqrashawn/fd-dired][FD-Dired]]
#+name: init-fd-dired-block
#+begin_src emacs-lisp
  (use-package fd-dired
    :straight (:host github :repo "yqrashawn/fd-dired"))
#+end_src

*** [[https://github.com/emacs-mirror/emacs/blob/master/lisp/ibuffer.el][iBuffer]]
#+name: init-ibuffer-block
#+begin_src emacs-lisp
  (use-package ibuffer
    :straight t
    :general
    ([remap list-buffers] #'ibuffer)
    :config
    (general-setq ibuffer-expert t))
#+end_src

** Productivity
*** Org
**** Org-Mode
#+name: init-org-block
#+begin_src emacs-lisp
  (use-package org
    :straight t
    :ghook ('org-mode-hook #'djm/config-org-mode)
    :gfhook 'variable-pitch-mode 'visual-line-mode
    :general
    ("C-c a" #'org-agenda
     "C-c c" #'org-capture
     "C-c p" #'org-pomodoro
     "C-c s" #'org-search-view
     "C-c t" #'org-todo-list
     "C-c /" #'org-tags-view)
    (:keymaps
     'org-mode-map
     "C-c v g" #'org-babel-goto-named-src-block)
    :preface
    (defun djm/config-org-mode ()
      (push '("TODO"       . ?▲)  prettify-symbols-alist)
      (push '("NEXT"       . ?→)  prettify-symbols-alist)
      (push '("DONE"       . ?✓)  prettify-symbols-alist)
      (push '("CANCELLED"  . ?✘)  prettify-symbols-alist)
      (push '("WAITING"    . ?𝌗) prettify-symbols-alist)
      (push '("QUESTION"   . ??)  prettify-symbols-alist)
      (push '("SCHEDULED"  . ?🗓) prettify-symbols-alist)
      (push '("CLOSED"     . ?🏁) prettify-symbols-alist)
      (push '("DEADLINE"   . ?❗) prettify-symbols-alist)
      (push '("CLOCK"      . ?⏰) prettify-symbols-alist)
      (blackout 'org-indent-mode))

    :config
    (progn
      ;; Make bullets prettier.
      (font-lock-add-keywords 'org-mode
                              `((,(rx bol (* space) (group "-") (+ space))
                                 (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))
                                (,(rx bol (* space) (group "#+begin_src") symbol-end)
                                 (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "λ"))))
                                (,(rx bol (* space) (group "#+end_src") symbol-end)
                                 (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "⋯"))))
                                (,(rx bol (* space) (group "#+begin_quote") symbol-end)
                                 (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "“"))))
                                (,(rx bol (* space) (group "#+end_quote") symbol-end)
                                 (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "”")))))))

    (general-setq org-babel-load-languages '((emacs-lisp . t )
                                             (shell . t)
                                             (python . t))
                  org-catch-invisible-edits 'smart
                  org-cycle-separator-lines 0
                  org-confirm-babel-evaluate nil
                  org-default-notes-file "~/org/inbox.org"
                  org-directory "~/org/"
                  org-enforce-todo-dependencies t
                  org-expiry-inactive-timestamps t
                  org-export-coding-system 'utf-8
                  org-file-apps '((auto-mode . emacs)
                                  ("\\.x?html?\\'" . "open %s")
                                  ("\\.pdf\\'" . "open %s"))
                  org-fontify-done-headline t
                  org-fontify-whole-heading-line t
                  org-fontity-quote-and-verse-blocks t
                  org-goto-max-level 10
                  org-hide-emphasis-markers t
                  org-highlight-sparse-tree-matches nil
                  org-image-actual-width nil
                  org-imenu-depth 4
                  org-indirect-buffer-display 'current-window
                  org-insert-heading-respect-content t
                  org-lowest-priority ?C
                  org-modules '(org-agenda
                                org-src
                                org-timer
                                org-habit
                                org-info
                                org-tempo
                                org-archive)
                  org-outline-path-complete-in-steps nil
                  org-pretty-entities t
                  org-return-follows-link t
                  org-show-notification-handler 'message
                  org-special-ctrl-a/e t
                  org-special-ctrl-k t
                  org-startup-folded 'content
                  org-startup-indented t
                  org-startup-with-inline-images t
                  org-structure-template-alist '(("a" . "export ascii")
                                                 ("c" . "center")
                                                 ("C" . "comment")
                                                 ("e" . "example")
                                                 ("E" . "export")
                                                 ("h" . "export html")
                                                 ("l" . "export latex")
                                                 ("q" . "quote")
                                                 ("s" . "src")
                                                 ("el" . "src emacs-lisp")
                                                 ("d" . "definition")
                                                 ("t" . "theorem"))
                  org-use-fast-todo-selection t
                  org-use-speed-commands t
                  org-yank-adjusted-subtrees t))
#+end_src

**** Org-Agenda
#+name: init-org-agenda-block
#+begin_src emacs-lisp
  (use-package org-agenda
    :straight (:type built-in) :after (org)
    :config
    (general-setq org-agenda-compact-blocks t
                  org-agenda-dim-blocked-tasks nil
                  org-agenda-files '("~/org/inbox.org"
                                     "~/org/work.org"
                                     "~/org/personal.org"
                                     "~/org/school.org")
                  org-agenda-inhibit-startup t
                  org-agenda-show-all-dates t
                  org-agenda-show-future-repeats nil
                  org-agenda-skip-deadline-if-done t
                  org-agenda-skip-scheduled-if-done t
                  org-agenda-skip-timestamp-if-done t
                  org-agenda-start-on-weekday nil
                  org-agenda-todo-ignore-with-date nil
                  org-agenda-window-setup 'current-window
                  org-log-done 'time
                  org-log-into-drawer t
                  org-log-state-notes-insert-after-drawers nil
                  org-refile-allow-creating-parent-nodes 'confirm
                  org-refile-targets '((nil :maxlevel . 9)
                                       (org-agenda-files :maxlevel . 9))
                  org-refile-use-outline-path 'file
                  org-tag-alist '(("@errand" . ?e)
                                   ("@office" . ?o)
                                   ("@home" . ?h)
                                   ("@school" . ?s)
                                   (:newline)
                                   ("WAITING" . ?w)
                                   ("QUESTION" . ?Q)
                                   ("HOLD" . ?H)
                                   ("CANCELLED" . ?c)
                                   ("REFILE" . ?r))
                  org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                                      (sequence "WAITING(w@/!)" "HOLD(h@/!)"  "QUESTION(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING")))

    (general-setq org-capture-templates '(("t" "todo [inbox]" entry (file "~/org/inbox.org")
                                           "* TODO %?\n%U\n" :clock-in t :clock-resume t)
                                          ("n" "note [inbox]" entry (file "~/org/inbox.org")
                                           "* %? :NOTE:\n%U\n" :clock-in t :clock-resume t)
                                          ("m" "meeting [inbox]" entry (file "~/org/inbox.org")
                                           "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
                                          ("p" "phone call [inbox]" entry (file "~/org/inbox.org")
                                           "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t))))

  (use-package org-super-agenda
    :straight t)
#+end_src
**** Org-Src
#+name: init-org-src-block
#+begin_src emacs-lisp
  (use-package org-src
    :straight (:type built-in) :after (org)
    :preface
    (defun djm/org-src-supress-final-newline ()
      (setq-local require-final-newline nil))

    (defun djm/org-src-delete-trailing-space (&rest _)
      (delete-trailing-whitespace))

    (defun djm/disable-flycheck-in-org-src-block ()
      (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

    :config/el-patch
    (defun org-src--construct-edit-buffer-name (org-buffer-name lang)
      (concat "[" org-buffer-name "]"))

    (general-setq org-src-window-setup 'current-window
                  org-src-fontify-natively t
                  org-src-tab-acts-natively t)

    (add-hook 'org-src-mode-hook #'djm/org-src-supress-final-newline)
    (add-hook 'org-src-mode-hook #'djm/disable-flycheck-in-org-src-block)
    (advice-add 'org-edit-src-exit :before #'djm/org-src-delete-trailing-space))
#+end_src
**** [[https://github.com/sabof/org-bullets][Org-Bullets]]
#+name: init-org-bullets-block
#+begin_src emacs-lisp
  (use-package org-bullets
    :straight t
    :ghook 'org-mode-hook)
#+end_src

**** [[https://github.com/snosov1/toc-org][TOC-Org]]
#+name: init-toc-org-block
#+begin_src emacs-lisp
  (use-package toc-org
    :ghook 'org-mode-hook 'markdown-mode-hook)
#+end_src

** Email
*** NotMuch
#+name: init-notmuch-block
#+begin_src emacs-lisp :tangle no
  (use-package notmuch
    :disabled t :straight t
    :config
    (general-setq notmuch-search-oldest-first nil))
#+end_src

** Media
*** [[https://github.com/danielfm/spotify.el][Spotify]]
#+name: init-spotify-block
#+begin_src emacs-lisp :tangle no
  (use-package spotify
    :disabled t :straight t
    :general
    (:keymaps
     'spotify-mode-map
     "C-c " #'spotify-command-map)
    :config
    (general-setq spotify-transport 'connect
                  spotify-player-status-truncate-length 20
                  spotfy-api-search-limit 50)
    (when-let ((plist (car (auth-source-search :host "spotify.api" :max 1)))
               (id (plist-get plist :user))
               (secret (funcall (plist-get plist :secret))))
      (general-setq spotify-oauth2-client-secret secret)
      (general-setq spotify-oauth2-client-id id)))
#+end_src

*** [[https://github.com/hniksic/emacs-htmlize][HTMLize]]
#+name: init-htmlize-block
#+begin_src emacs-lisp
  (use-package htmlize
    :straight t)
#+end_src

** Version Control
*** [[https://github.com/magit/magit][Magit]]
#+name: init-magit-block
#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :general ("C-x g" #'magit-status
              "C-x M-g" #'magit-dispatch)
    :config
    (general-setq magit-view-git-manual-method 'man))
#+end_src

*** [[https://github.com/magit/transient][Transient]]
#+name: init-transient-block
#+begin_src emacs-lisp
  (use-package transient
    :straight (:type built-in)
    :config (transient-bind-q-to-quit))
#+end_src

*** [[https://github.com/magit/magit/blob/master/lisp/git-commit.el][Git-Commit]]
#+name: init-git-commit-block
#+begin_src emacs-lisp
  (use-package git-commit
    :straight (:type built-in)
    :config
    (general-setq git-commit-summary-max-length 50))
#+end_src

*** [[https://github.com/magit/forge][Forge]]
#+name: init-forge-block
#+begin_src emacs-lisp 
  (use-package forge
    :straight t :after (magit))
#+end_src

*** [[https://github.com/syohex/emacs-git-gutter][Git-Gutter]]
#+name: init-git-gutter-block
#+begin_src emacs-lisp
  (use-package git-gutter
    :blackout t :straight t
    :if (display-graphic-p)
    :ghook ('after-init-hook #'global-git-gutter-mode))
#+end_src

*** [[https://gitlab.com/pidu/git-timemachine][Git-Time-Machine]]
#+name: init-git-timemachine-block
#+begin_src emacs-lisp
  (use-package git-timemachine
    :straight t)
#+end_src

*** [[https://github.com/magit/with-editor][With-Editor]]
#+name: init-with-editor-block
#+begin_src emacs-lisp
  (use-package with-editor
    :straight t)
#+end_src

*** [[https://github.com/justbur/emacs-vdiff][Emacs-VDiff]]
#+name: init-vdiff-block
#+begin_src emacs-lisp
  (use-package vdiff
    :straight t)
#+end_src

** Language Server Support
*** [[https://github.com/emacs-lsp/lsp-mode][LSP-Mode]]
#+name: init-lsp-block
#+begin_src emacs-lisp :tangle no
  (use-package lsp-mode
    :straight t
    :ghook ('python-mode-hook #'lsp-deferred)
    :ghook ('c-mode-hook      #'lsp-deferred)
    :config
    (setq lsp-prefer-flymake nil
          lsp-enable-snippet nil
          lsp-restart nil)

    (use-package lsp-clients
      :demand t :straight (:type built-in)))

  (use-package lsp-ui
    :straight t :after (lsp-mode)
    :ghook 'lsp-mode-hook
    :general ("C-c f" #'lsp-ui-sideline-apply-code-actions)
    :config
    (general-setq lsp-ui-sideline-show-hover nil
                  lsp-eldoc-enable-hover nil)

    (use-package lsp-ui-doc
      :demand t :straight (:type built-in)))
#+end_src

** Syntax & Linting
*** [[https://github.com/flycheck/flycheck][Flycheck]]
#+name: init-flycheck-block
#+begin_src emacs-lisp :tangle no
  (use-package flycheck
    :blackout t :straight t
    :ghook ('prog-mode-hook #'global-flycheck-mode)
    :config
    (general-pushnew 'idle-buffer-switch flycheck-check-syntax-automatically)
    (general-setq flycheck-display-errors-delay 0.2
                  flycheck-buffer-switch-check-intermediate-buffers t
                  flycheck-checker-error-threshold 5000))
#+end_src

*** [[https://github.com/alexmurray/flycheck-posframe][Flycheck-Posframe]]
#+name: init-flycheck-posframe-block
#+begin_src emacs-lisp :tangle no
  (use-package flycheck-posframe
    :blackout t :straight t :after (flycheck)
    :if (display-graphic-p)
    :ghook 'flycheck-mode-hook
    :config (flycheck-posframe-configure-pretty-defaults))
#+end_src

*** [[https://github.com/flycheck/flycheck-popup-tip][Flycheck-Popup-Tip]]
#+name: init-flycheck-popup-tip-block
#+begin_src emacs-lisp :tangle no
  (use-package flycheck-popup-tip
    :blackout t :straight t :after (flycheck)
    :if (display-graphic-p)
    :ghook 'flycheck-mode-hook)
#+end_src

*** [[https://github.com/flycheck/flycheck-pos-tip][Flycheck-Pos-Tip]]
#+name: init-flycheck-pos-tip-block
#+begin_src emacs-lisp :tangle no
  (use-package flycheck-pos-tip
    :blackout t :straight t :after (flycheck)
    :if (display-graphic-p)
    :ghook 'flycheck-mode-hook
    :config (general-setq flycheck-pos-tip-timeout 15))
#+end_src

*** [[https://github.com/msherry/flycheck-pycheckers][Flycheck-Pycheckers]]
#+name: init-flycheck-pycheckers-block
#+begin_src emacs-lisp :tangle no
  (use-package flycheck-pycheckers
    :straight t
    :ghook ('flycheck-mode-hook #'flycheck-pycheckers-setup))
#+end_src

** Languages
*** Markdown
**** [[https://github.com/defunkt/markdown-mode][Mardown-Mode]]
#+name: init-markdown-block
#+begin_src emacs-lisp
  (use-package markdown-mode
    :straight t
    :mode ("\\.md\\'")
    :config
    (general-setq markdown-fontify-code-blocks-natively t
                  markdown-enable-wiki-links t
                  mardown-indent-nenter 'indent-and-new-item
                  markdown-asymmetric-header t))
#+end_src

**** [[https://github.com/milkypostman/markdown-mode-plus][Markdown-Mode-Plus]]
#+name: init-markdown-mode-plus-block
#+begin_src emacs-lisp
  (use-package markdown-mode+
    :straight t)
#+end_src

*** YAML
**** [[https://github.com/yoshiki/yaml-mode][YAML-Mode]]
#+name: init-yaml-block
#+begin_src emacs-lisp
  (use-package yaml-mode
    :straight t
    :mode ("\\.yaml'" "\\.yml'"))
#+end_src

*** LaTeX
**** AuCTeX
#+name: init-auctex-block
#+begin_src emacs-lisp

#+end_src

*** Julia
#+name: init-julia-block
#+begin_src emacs-lisp
  (use-package julia-mode
    :straight t)
#+end_src

*** Python
#+name: init-python-block
#+begin_src emacs-lisp
  (use-package python
    :straight (:type built-in)
    :mode ("\\.py\\'")
    :gfhook 'djm/python-no-reindent-on-colon
    :config
    (defun djm/python-no-reindent-on-colon ()
      (setq electric-indent-chars (delq ?: electric-indent-chars)))

    (defun djm/python-use-correct-executables ()
      (let ((executable python-shell-interpreter))
        (save-excursion
          (save-match-data
            (when (or (looking-at "#!/usr/bin/env \\(python[^ \n]+\\)")
                      (looking-at "#!\\([^ \n]+/python[^ \n]+\\)"))
              (setq executable (substring-no-properties (match-string 1))))))
        (setq-local flycheck-python-pycompile-executable executable)
        (setq-local flycheck-python-pylint-executable "pylint")
        (setq-local flycheck-python-flake8-executable "flake8")
        (setq-local lsp-python-executbale-cmd executable)))

    (setq python-fill-docstring-style 'django
          python-shell-interpreter "python"
          python-indent-guess-indent-offset-verbose nil))

  (use-package pyenv-mode
    :blackout :straight t
    :ghook 'python-mode-hook
    :ghook ('projectile-switch-project-hook #'projectile-pyenv-mode-set)
    :config
    (defun projectile-pyenv-mode-set ()
      (let ((project (projectile-project-name)))
        (if (member project (pyenv-mode-versions))
            (pyenv-mode-set project)
          (pyenv-mode-unset)))))

  (use-package lsp-python-ms
    :demand t :straight t :after (:all lsp-clients python))

  (use-package anaconda-mode
    :straight t :after (python)
    :ghook 'python-mode-hook)

  (use-package blacken
    :straight t :after (python)
    :commands (blacken-buffer))

  (use-package py-yapf
    :straight t :after (python)
    :commands (py-yapf-buffer))
#+end_src

** Miscellaneous
*** SpeedType
#+name: init-speed-type-block
#+begin_src emacs-lisp
  (use-package speed-type
    :straight t)
#+end_src


** Footer
#+name: init-footer-block
#+begin_src emacs-lisp
  (provide 'init)
  ;;; init.el ends here
#+end_src


-------------------------------------------------------------------
* Conclusion
-------------------------------------------------------------------
* Citations

* COMMENT Local Variables
# Local Variables:
# time-stamp-line-limit: 2000
# time-stamp-format: "%Y-%m-%d %H:%M:%S"
# time-stamp-active: t
# time-stamp-start: "\/last updated\/:[ ]*"
# time-stamp-end: "$"
# firestarter: (djm/config-tangle)
# End:
