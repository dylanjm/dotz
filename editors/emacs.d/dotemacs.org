#+title: Dot-Z-Macs
#+author: Dylan McDowell
#+startup: content
#+property: header-args :tangle "~/dotz/editors/emacs.d/init.el"

/last updated/: 2019-12-04 14:56:28

* Table of Contents :TOC@3:noexport:
- [[#about][About]]
  - [[#literate-programming-in-org][Literate Programming in Org]]
  - [[#system-requirements][System Requirements]]
- [[#early-init][Early-Init]]
  - [[#header][Header]]
  - [[#performance-tweaks][Performance Tweaks]]
    - [[#garbage-collection][Garbage Collection]]
  - [[#preliminary-configuration][Preliminary Configuration]]
    - [[#pre-gui-optimization][Pre-Gui Optimization]]
  - [[#footer][Footer]]
- [[#init][Init]]
  - [[#header-1][Header]]
  - [[#straight-package-manager][Straight Package Manager]]
  - [[#environment][Environment]]
  - [[#no-littering][No-Littering]]
  - [[#required-packages][Required Packages]]
  - [[#general-user-settings--tools][General User Settings & Tools]]
    - [[#personal-tweaks][Personal Tweaks]]
    - [[#defaults][Defaults]]
    - [[#user-files][User Files]]
  - [[#utilities][Utilities]]
    - [[#system][System]]
    - [[#terminal--shell][Terminal & Shell]]
    - [[#project-management][Project Management]]
    - [[#frameworks][Frameworks]]
    - [[#autocomplete][Autocomplete]]
    - [[#documentation][Documentation]]
    - [[#spell-check][Spell Check]]
    - [[#editing-tools][Editing Tools]]
    - [[#minor-modes][Minor Modes]]
    - [[#navigation][Navigation]]
  - [[#productivity][Productivity]]
    - [[#org][Org]]
    - [[#ledger][Ledger]]
    - [[#email][Email]]
    - [[#calendar][Calendar]]
    - [[#spotify][Spotify]]
    - [[#web-browsing][Web Browsing]]
    - [[#calculator][Calculator]]
  - [[#programming-support][Programming Support]]
    - [[#version-control][Version Control]]
    - [[#language-server-support][Language Server Support]]
    - [[#syntax--linting][Syntax & Linting]]
  - [[#languages][Languages]]
    - [[#markdown][Markdown]]
    - [[#yaml][YAML]]
    - [[#json][JSON]]
    - [[#makefiles][Makefiles]]
    - [[#latex][LaTeX]]
    - [[#shell][Shell]]
    - [[#elisp][Elisp]]
    - [[#r][R]]
    - [[#julia][Julia]]
    - [[#python][Python]]
    - [[#c][C++]]
  - [[#fun][Fun]]
    - [[#speedtype][SpeedType]]
  - [[#theme--aesthetics][Theme & Aesthetics]]
    - [[#icons][Icons]]
    - [[#themes][Themes]]
  - [[#footer-1][Footer]]
- [[#conclusion][Conclusion]]
- [[#citations][Citations]]

* About
#+ATTR_HTML: :width 1000px
#+ATTR_ORG: :width 1000
[[file:assets/config-preview.png]]

** Literate Programming in Org
This document is my current emacs config which contains the code for my =early-init.el= file and =init.el= file. You may be wondering how one file can contain code for two different configuration files. Through the power of =org-babel-tangle=, I am able to configure and document my entire emacs experience in a single Org file. There are several reasons to organize one's configuration this way. I hope these reasons become obvious as you browse through, but personally I find it much easier to document my choices using a markup language. This way I can store links and reference back to forum threads and other places when updating. I can also include pictures throughout and organize code-blocks with specific names to make navigation quick and painless. If you're interested in creating a similar setup, take a look at the raw-version of this file. There is important information contained in the header and throughout the file to make this work. Once you have a proper the proper settings, start adding src-blocks and then run =M-x org-babel-tangle <RET>=. Your config files will then be generated and Emacs will use those files when starting up. I have also written a hook that tangles this file everytime I save.

** System Requirements

| Hardware             |      OS | Emacs Version |
|----------------------+---------+---------------|
| 15" 2019 MacBook Pro | 10.14.6 |       27.0.50 |
| 15" 2019 MacBook Pro |         |       27.0.50 |

-------------------------------------------------------------------

* Early-Init
:properties:
:header-args: :tangle "~/dotz/editors/emacs.d/early-init.el"
:end:
** Header
#+name: early-init-header-block
#+begin_src emacs-lisp
  ;;; early-init.el --- Early initialization. -*- lexical-binding: t; buffer-read-only: t; byte-compile: t-*-
  ;;;
  ;;; Commentary:
  ;;; Emacs `early-init.el' config by dylanjm
  ;;; This file was automatically generated by `org-babel-tangle'.
  ;;; Do not change this file.  Main config is located in emacs.d/dotemacs.org
  ;;;
  ;;; Code:
#+end_src

** Performance Tweaks
You'll see a similar configuration in other dotfiles online. By default, Emac's runs it garbage collector when the
*** Garbage Collection
#+name: early-init-gc-block
#+begin_src emacs-lisp
  (defvar default-file-name-handler-alist file-name-handler-alist)
  (defvar extended-gc-cons-threshold most-positive-fixnum)
  (defvar default-gc-cons-threshold 20000000)

  (setq-default file-name-handler-alist nil
                gc-cons-threshold extended-gc-cons-threshold
                load-prefer-newer t
                inhibit-default-init t
                package-enable-at-startup nil)

  (add-hook 'after-init-hook #'djm/return-vars-to-normal)

  (defun djm/return-vars-to-normal ()
    (setq-default file-name-handler-alist default-file-name-handler-alist
                  load-prefer-newer nil
                  debug-on-error nil))


  (run-with-idle-timer 5 nil (lambda ()
                                (setq gc-cons-threshold default-gc-cons-threshold)))
#+end_src

** Preliminary Configuration
*** Pre-Gui Optimization
#+name: early-init-pre-gui-block
#+begin_src emacs-lisp
  (setq-default bidi-display-reordering 'left-to-right)

  (setq-default initial-frame-alist '((window-divider-default-bottom-width . 2)
                                      (window-divider-default-right-width . 2)
                                      (window-divider-default-places . t)))

  (setq-default default-frame-alist '((alpha 98 98)
                                      (ns-transparent-titlebar . t)
                                      (internal-border-width . 5)
                                      (right-fringe . 3)
                                      (left-fringe . 3)
                                      (cursor-type 'bar)
                                      (vertical-scroll-bars)))
#+end_src
** Footer
#+name: early-init-footer-block
#+begin_src emacs-lisp
  (provide 'early-init)
  ;;; early-init.el ends here
#+end_src

-------------------------------------------------------------------
* Init
** Header
#+name: init-header-block
#+begin_src emacs-lisp
  ;;; init.el --- Emacs main configuration file -*- lexical-binding: t; buffer-read-only: t; byte-compile: t-*-
  ;;;
  ;;; Commentary:
  ;;; Emacs `init.el' config by dylanjm.
  ;;; This file was automatically generated by `org-babel-tangle'.
  ;;; Do not change this file.  Main config is located in emacs.d/dotemacs.org
  ;;;
  ;;; Code:
#+end_src

** Straight Package Manager
#+name: early-init-straight-block
#+begin_src emacs-lisp
  (eval-and-compile
    (defvar straight-recipes-gnu-elpa-use-mirror t)
    (defvar bootstrap-version 5)
    (defvar bootstrap-file
      (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))

    (setq-default straight-cache-autoloads t
                  straight-recipe-overrides nil
                  straight-repository-branch "develop"
                  straight-use-package-by-default t
                  straight-check-for-modifications '(check-on-save find-when-checking))
    (setq-default use-package-verbose t
                  use-package-always-defer t
                  use-package-enable-imenu-support t
                  use-package-compute-statistics t))

  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))

  (load bootstrap-file nil 'nomessage)
  (straight-use-package 'use-package)
#+end_src

** Environment
#+name: early-init-environment-block
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :straight t
    :if (eq system-type 'darwin)
    :hook ('after-init . exec-path-from-shell-initialize)
    :init
    (setq exec-path-from-shell-check-startup-files nil
          exec-path-from-shell-variables '("ENV" "PATH" "MANPATH" "CACHE" "GPG_TTY")
          exec-path-from-shell-arguments '("-l")))
#+end_src

** No-Littering
#+name: early-init-no-littering-block
#+begin_src emacs-lisp
  (use-package no-littering
    :demand t :straight t
    :preface
    (autoload 'no-littering-expand-etc-file-name "no-littering.el")
    (autoload 'no-littering-expand-var-file-name "no-littering.el")

    (defvar djm--emacs-cache "~/.cache/emacs/")
    (defvar djm--emacs-etc-cache (concat djm--emacs-cache "etc/"))
    (defvar djm--emacs-var-cache (concat djm--emacs-cache "var/"))

    :init
    (setq no-littering-etc-directory djm--emacs-etc-cache)
    (setq no-littering-var-directory djm--emacs-var-cache))
#+end_src

** Required Packages
#+name: early-init-req-packages-block
#+begin_src emacs-lisp
  (use-package el-patch :straight t)
  (use-package general  :straight t)
  (use-package blackout :straight (:host github :repo "raxod502/blackout"))

  (eval-when-compile
    (require 'el-patch)
    (require 'general)
    (require 'blackout))

  (straight-use-package 'org-plus-contrib)
#+end_src

** General User Settings & Tools
*** Personal Tweaks
**** Personal Variables
#+name: init-personal-vars-block
#+begin_src emacs-lisp
  (defvar djm--assets-directory    (concat user-emacs-directory "assets/"))
  (defvar djm--lisp-directory      (concat user-emacs-directory "lisp/"))
  (defvar djm--straight-directory  (concat user-emacs-directory "straight/"))
  (defvar djm--yasnippet-directory (concat user-emacs-directory "snippets/"))

  (defvar djm--org-agenda-directory "~/org/")

  (defvar djm--custom-file  (no-littering-expand-etc-file-name "custom.el"))
  (defvar djm--secret-file (no-littering-expand-etc-file-name "secret.el"))

  (defvar djm--auto-save-file-cache (concat djm--emacs-var-cache "backups/"))
#+end_src

**** Personal Functions
***** After-Load-Theme-Hook
#+name: init-after-load-theme-hook-block
#+begin_src emacs-lisp
  (defvar after-load-theme-hook nil
    "Hook run after a color theme is loaded using `load-theme'.")

  (defun djm/run-load-theme-hooks (&rest _)
    "Run `after-load-theme-hook'."
    (run-hooks 'after-load-theme-hook))

  (advice-add 'load-theme :after #'djm/run-load-theme-hooks)
#+end_src

***** Create Nonexistant Directories
#+name: init-create-dir-func-block
#+begin_src emacs-lisp
  (defun djm/create-non-existent-directory ()
    (let ((parent-directory (file-name-directory buffer-file-name)))
      (when (and (not (file-exists-p parent-directory))
                 (y-or-n-p (format "Directory `%s' does not exist! Create it?" parent-directory )))
        (make-directory parent-directory t))))
#+end_src

***** Delete Specific Files
#+name: init-delete-files-func-block
#+begin_src emacs-lisp
  (defun djm/delete-custom-file ()
    "Custom function to delete my custom.el file."
    (interactive)
    (if (file-exists-p custom-file)
        (progn
          (delete-file custom-file)
          (message "Custom file deleted!"))
      (message "Custom file does not exist!")))

  (defun djm/delete-secret-file ()
    "Custom Function to delete my secret file anytime."
    (interactive)
    (if (file-exists-p djm--secret-file)
        (progn
          (delete-file djm--secret-file)
          (message "Secret file deleted!"))
      (message "Secret file does not exist!")))
#+end_src

***** No-Process Kill Buffer
Sourced from [[https://github.com/andreyorst/dotfiles/tree/master/.config/emacs][andreyorst]]
#+name: init-kill-buffer-proc-func-block
#+begin_src emacs-lisp
  (defun djm/kill-buffer-when-no-processes (&rest _)
    "Kill buffer and its window when there's no processes left."
    (when (null (get-buffer-process (current-buffer)))
      (kill-buffer (current-buffer))))
#+end_src

***** Fetch Hunspell
#+name: init-fetch-hunspell-dict-func-block
#+begin_src emacs-lisp
  (defun djm/fetch-hunspell-dictionary ()
    (unless (file-exists-p "~/Library/Spelling/en_US.aff")
      (shell-command "bash $DOTFILES/bootstrap/bootstrap_dicts.sh")))
#+end_src

***** Garbage Collecting
Sourced from [[https://github.com/seagle0128/.emacs.d/blob/master/init.el][Centaur Emacs]]
#+name: init-gc-funcs-block
#+begin_src emacs-lisp

  (defun djm/gc-on-lose-focus ()
    "A convienient time to run garbage collect is when Emacs loses focus."
    (unless (frame-focus-state)
      (garbage-collect)))

  (defun djm/minibuffer-setup-hook ()
    "With modern packages like Ivy/Counsel, let's extend the gc-threshold while
  using the minibuffer to maximize performance"
    (setq gc-cons-threshold extended-gc-cons-threshold))

  (defun djm/minibuffer-exit-hook ()
    "Upon exiting the minibuffer, we'll set everything back to normal"
    (setq gc-cons-threshold default-gc-cons-threshold))

  (add-hook 'minibuffer-setup-hook #'djm/minibuffer-setup-hook)
  (add-hook 'minibuffer-exit-hook #'djm/minibuffer-exit-hook)

  (add-hook 'org-babel-pre-tangle-hook #'djm/minibuffer-setup-hook)
  (add-hook 'org-babel-post-tangle-hook #'djm/minibuffer-exit-hook)


  (if (boundp 'after-focus-change-function)
      (add-function :after after-focus-change-function #'djm/gc-on-lose-focus))
#+end_src

***** Timestamp Messages
[[https://web.archive.org/web/20191113215833/https://emacs.stackexchange.com/questions/32150/how-to-add-a-timestamp-to-each-entry-in-emacs-messages-buffer][StackOverflow - How to add a timestamp to each entry in Emacs' *Messages* buffer?]]
[[https://web.archive.org/web/20191114151905/http://nullman.net/emacs/files/init-emacs.el.html][nullman.net - init-emacs.el]]

#+name: init-personal-funcs-block
#+begin_src emacs-lisp
  (defun djm/current-time-microseconds ()
    "Return the current time formatted to include microseconds."
    (let* ((nowtime (current-time))
       (now-ms (nth 2 nowtime)))
      (concat (format-time-string "[%Y-%m-%d %T" nowtime) (format ".%d] " now-ms))))

  (defun djm/message-with-timestamp (format-string &rest args)
    "Add timestamps to `*Messages*' buffer."
    (when (and (> (length format-string) 0)
               (not (string= format-string "")))
      (let ((deactivate-mark nil))
        (save-excursion
          (with-current-buffer "*Messages*"
            (let ((inhibit-read-only t))
              (goto-char (point-max))
              (when (not (bolp)) (newline))
              (insert (djm/current-time-microseconds))))))))

  ;;(advice-add 'message :before #'djm/message-with-timestamp)
#+end_src

***** Enable Whitespace
#+name: init-personal-func-whitespace-block
#+begin_src emacs-lisp
  (defun djm/enable-trailing-whitespace ()
    "Show trailing spaces and delete on save."
    (setq show-trailing-whitespace t)
    (add-hook 'before-save-hook #'delete-trailing-whitespace nil t))

  (add-hook 'prog-mode-hook #'djm/enable-trailing-whitespace)
  (add-hook 'org-mode-hook #'djm/enable-trailing-whitespace)
  (add-hook 'text-mode-hook #'djm/enable-trailing-whitespace)
  (add-hook 'conf-mode #'djm/enable-trailing-whitespace)
#+end_src

***** Protect Buffers
#+name: init-protected-buffers-func-block
#+begin_src emacs-lisp
  (defvar *protected-buffers* '("*scratch*" "*Messages*" "*straight-process*" "*direnv*"))

  (defun djm/protected-buffers ()
    "Protects some buffers from being killed."
    (dolist (buffer *protected-buffers*)
      (if (get-buffer buffer)
          (with-current-buffer buffer
            (emacs-lock-mode 'kill))
        (get-buffer-create buffer)
        (with-current-buffer buffer
          (emacs-lock-mode 'kill)))))

  (add-hook 'after-init-hook #'djm/protected-buffers)
#+end_src

***** Async Tangle
Sourced from [[https://github.com/rememberYou/.emacs.d/blob/master/config.org][rememberYou]]
#+name: init-async-tangle-func-block
#+begin_src emacs-lisp
  (defvar *config-file* (expand-file-name "dotemacs.org" user-emacs-directory)
    "The Configuration File.")

  (defvar *config-last-change* (nth 5 (file-attributes *config-file*))
    "Last modification time of the configuration file.")

  (defvar *show-async-tangle-results* nil
    "Keeps *emacs* async buffers arround for later inspection.")

  (defun djm/config-updated ()
    "Checks if the configuration file has been updated since the last time."
    (time-less-p *config-last-change*
                 (nth 5 (file-attributes *config-file*))))

  (defun djm/config-tangle ()
    "Tangle the org file asynchronously."
    (when (djm/config-updated)
      (setq *config-last-change*
            (nth 5 (file-attributes *config-file*)))
      (djm/async-babel-tangle *config-file*)))

  (defun djm/async-babel-tangle (org-file)
    "Tangles org-file async"
    (let ((init-tangle-start-time (current-time))
          (file (buffer-file-name))
          (async-quiet-switch "-q"))
      (async-start
       `(lambda ()
          (require 'org)
          (org-babel-tangle-file ,org-file))
       (unless *show-async-tangle-results*
         `(lambda (result)
            (if result
                (message "SUCCESS: %s successfully tangled (%.2fs)."
                         ,org-file
                         (float-time (time-subtract (current-time)
                                                    ',init-tangle-start-time)))
              (message "ERROR: %s as tangle failed." ,org-file)))))))
#+end_src

**** Personal Hooks & Advice
#+name: init-personal-hooks-block
#+begin_src emacs-lisp
  (add-hook 'write-file-hooks 'time-stamp)
#+end_src

**** Personal Keybindings
#+name: init-personal-keybindings-block
#+begin_src emacs-lisp
    (general-define-key
     "RET" #'newline-and-indent
     "C-j" #'newline-and-indent
     "C-g" #'minibuffer-keyboard-quit
     "C-z" nil)
#+end_src

#+name: init-aliases-block
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  (fset 'display-startup-echo-area-message 'ignore)
  (fset 'view-hello-file 'ignore)
  (fset 'custom-safe-themes 't)
  (fset 'bb 'bury-buffer)
#+end_src

*** Defaults
**** Advice [Built-In]
#+name: init-advice-block
#+begin_src emacs-lisp
  (use-package advice
    :straight nil
    :init
    (general-setq-default ad-redefinition-action 'accept))
#+end_src

**** Ansi-Color [Built-In]
#+name: init-ansi-color-block
#+begin_src emacs-lisp
  (use-package ansi-color
    :straight nil)
#+end_src

**** Auth-Source [Built-In]
#+name: init-auth-source-block
#+begin_src emacs-lisp
  (use-package auth-source
    :straight nil
    :init
    (general-setq-default auth-sources `(,(no-littering-expand-etc-file-name "authinfo.gpg")
                                         ,(no-littering-expand-etc-file-name "authinfo"))))
#+end_src

**** Autorevert [Built-In]
#+name: init-autorevert-block
#+begin_src emacs-lisp
  (use-package autorevert
    :blackout t :straight nil
    :ghook ('after-init-hook #'global-auto-revert-mode)
    :init
    (general-setq-default auto-revert-verbose nil
                          global-auto-revert-non-file-buffers t
                          autor-revert-interval 1
                          auto-revert-use-notify nil))
#+end_src

**** Bytecomp [Built-in]
#+name: init-bytecompt-block
#+begin_src emacs-lisp
  (use-package bytecomp
    :straight nil
    :init
    (general-setq-default byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local)))
#+end_src

**** Color [Built-In]
#+name: init-color-block
#+begin_src emacs-lisp
  (use-package color
    :straight nil
    :functions (color-darken-name))
#+end_src

**** Comint [Built-In]
#+name: init-comint-block
#+begin_src emacs-lisp
  (use-package comint
    :straight nil
    :init (general-setq-default comint-prompt-read-only t))
#+end_src

**** Compile [Built-In]
#+name: init-compile-block
#+begin_src emacs-lisp
  (use-package compile
    :straight nil
    :init
    (general-setq-default compilation-message-face 'compilation-base-face
                          compilation-always-kill t
                          compilation-ask-about-save nil
                          compilation-scroll-output 'first-error))
#+end_src

**** Cus-Start [Built-In]
#+name: init-cus-start-block
#+begin_src emacs-lisp
  (use-package cus-start
    :straight nil
    :init
    (general-setq-default auto-save-list-file-prefix nil
                          auto-save-list-file-name nil
                          auto-window-vscroll nil
                          command-line-x-option-alist nil
                          cursor-in-non-selected-windows nil
                          cursor-type 'bar
                          delete-by-moving-to-trash t
                          disabled-command-function nil
                          default-directory (getenv "HOME")
                          echo-keystrokes 0.02
                          enable-recursive-minibuffers t
                          fast-but-imprecise-scrolling t
                          ffap-machine-p-known 'reject
                          fill-column 80
                          frame-title-format '("%b - Emacs")
                          highlight-nonselected-windows nil
                          history-delete-duplicates t
                          history-length 3000
                          icon-title-format frame-title-format
                          initial-major-mode 'fundamental-mode
                          inhibit-compacting-font-caches t
                          inhibit-startup-echo-area-message t
                          inhibit-startup-screen t
                          indent-tabs-mode nil
                          indicate-buffer-boundaries nil
                          indicate-empty-lines nil
                          max-specpdl-size 2040
                          mode-line-in-non-selected-windows t
                          ring-bell-function #'ignore
                          scroll-conservatively 101
                          scroll-margin 5
                          scroll-preserve-screen-position t
                          scroll-step 1
                          sentence-end-double-space nil
                          tab-always-indent 'complete
                          tab-width 4
                          use-dialog-box nil
                          use-file-dialog nil
                          visible-cursor nil
                          window-combination-resize t
                          frame-inhibit-implied-resize t
                          window-resize-pixelwise t
                          frame-resize-pixelwise t
                          x-stretch-cursor nil
                          x-underline-at-descent-line t))
#+end_src

**** Delsel [Built-In]
#+name: init-delsel-block
#+begin_src emacs-lisp
  (use-package delsel
    :blackout t :straight nil
    :ghook ('after-init-hook #'delete-selection-mode))
#+end_src

**** Emacs-Lock [Built-in]
#+name: init-emacs-lock-block
#+begin_src emacs-lisp
  (use-package emacs-lock
    :blackout " 🔐 " :straight nil)
#+end_src

**** Epa [Built-In]
#+name: init-epa-block
#+begin_src emacs-lisp
  (use-package epa
    :straight nil
    :init (general-setq-default epa-replace-original-text t))
#+end_src

**** Epg [Built-In]
#+name: init-epg-block
#+begin_src emacs-lisp
  (use-package epg
    :straight nil
    :init (general-setq-default epg-pinentry-mode 'loopback))
#+end_src

**** Face-Remap [Built-In]
#+name: init-face-remap-block
#+begin_src emacs-lisp
  (use-package face-remap
    :straight nil
    :config
    (blackout 'buffer-face-mode)
    (blackout 'variable-pitch-mode))
#+end_src

**** Files [Built-In]
#+name: init-files-block
#+begin_src emacs-lisp
  (use-package files
    :straight nil
    :init
    (general-setq-default auto-save-file-name-transforms `((".*" ,djm--auto-save-file-cache t))
                          backup-by-copying t
                          backup-directory-alist `((".*" . ,djm--auto-save-file-cache))
                          confirm-kill-processes nil
                          confirm-nonexistent-file-or-buffer nil
                          create-lockfiles nil
                          delete-old-versions t
                          find-file-visit-truename t
                          insert-directory-program "gls"
                          kept-new-versions 6
                          large-file-warning-threshold 10000000000
                          require-final-newline t
                          select-enable-clipboard t
                          version-control t
                          view-read-only t)
    (unless (file-exists-p djm--auto-save-file-cache)
      (make-directoy djm--auto-save-file-cache)))
#+end_src

**** Frame [Built-In]
#+name: init-frame-block
#+begin_src emacs-lisp
  (use-package frame
    :straight nil
    :ghook ('after-init-hook #'djm/turn-off-mouse-modes)
    :preface
    (defun djm/turn-off-mouse-modes ()
      (blink-cursor-mode -1)
      (tool-bar-mode -1)
      (unless (display-graphic-p)
        (menu-bar-mode -1))))
#+end_src

**** Gnutls [Built-In]
#+name: init-gnutls-block
#+begin_src emacs-lisp
  (use-package gnutls
    :straight nil
    :init
    (general-setq gnutls-verify-error t
                  gnutls-min-prime-bits 2048))
#+end_src

**** MB-Depth [Built-In]
#+name: init-mb-depth-block
#+begin_src emacs-lisp
  (use-package mb-depth
    :straight nil
    :ghook ('after-init-hook #'minibuffer-depth-indicate-mode)
    :init
    (defun djm/kill-minibuffer ()
      "Exit the minibuffer if it is not active"
      (when (and (>= (recursion-depth) 1)
                 (active-minibuffer-window))
        (abort-recursive-edit)))

    (general-add-hook 'mouse-leave-buffer-hook #'djm/kill-minibuffer))
#+end_src

**** MWheel [Built-In]
#+name: init-mwheel-block
#+begin_src emacs-lisp
  (use-package mwheel
    :straight nil
    :init
    (general-setq-default mouse-wheel-scroll-amount '(5 ((shift) . 2))
                          mouse-wheel-progressive-speed nil)
    (mouse-wheel-mode -1))
#+end_src

**** NS-Win [Built-In]
#+name: init-ns-win-block
#+begin_src emacs-lisp
  (use-package ns-win
    :straight nil
    :init
    (general-setq-default mac-command-modifier 'meta
                          mac-option-modifier 'meta
                          mac-right-command-modifier 'super
                          mac-right-option-modifier 'none
                          mac-function-modifier 'hyper)
    (general-setq-default ns-pop-up-frames nil
                          ns-use-native-fullscreen nil
                          ns-use-thin-smoothing t))
#+end_src

**** Pixel-Scroll [Built-In]
#+name: init-pixel-scroll-block
#+begin_src emacs-lisp
  (use-package pixel-scroll
    :blackout t :straight nil
    :ghook ('after-init-hook #'pixel-scroll-mode))
#+end_src

**** Recentf [Built-In]
#+name: init-recentf-block
#+begin_src emacs-lisp
  (use-package recentf
    :blackout t :straight nil
    :general
    ("C-x C-r" #'counsel-recentf)
    :config
    (general-setq recentf-max-saved-items 2000
                  recentf-max-menu-items 100
                  recentf-auto-cleanup 'never
                  recentf-exclude `(,djm--emacs-cache
                                    ,djm--org-agenda-directory
                                    "\\.\\(?:gz\\|gif\\|svg\\|png\\|jpe?g\\)$"
                                    "\\.?emacs-head"
                                    "\\.?straight"
                                    "\\.?cache"
                                    ".cask"
                                    "url"
                                    "COMMIT_EDITMSG\\'"
                                    "bookmarks"
                                    "^/tmp/"
                                    "^/ssh:"
                                    "\\.?ido\\.last$"
                                    "\\.revive$"
                                    "/TAGS$"
                                    "^/var/folders/.+$"))
    (recentf-mode)
    (run-at-time nil (* 5 60) (lambda () (let ((save-silently t)) (recentf-save-list)))))
#+end_src

**** Savehist [Built-In]
#+name: init-savehist-block
#+begin_src emacs-lisp
  (use-package savehist
    :blackout t :straight nil
    :ghook 'after-init-hook
    :init
    (general-setq
                  savehist-additional-variables '(mark-ring
                                                  global-mark-ring
                                                  search-ring
                                                  kill-ring
                                                  regexp-search-ring
                                                  extended-command-history)
                  savehist-autosave-interval 60))
#+end_src

**** Saveplace [Built-In]
#+name: init-saveplace-block
#+begin_src emacs-lisp
  (use-package saveplace
    :blackout t :straight nil
    :ghook ('after-init-hook #'save-place-mode))
#+end_src

**** Select [Built-In]
#+name: init-select-block
#+begin_src emacs-lisp
  (use-package select
    :straight nil
    :init (general-setq-default select-enable-clipboard t))
#+end_src

**** Simple [Built-In]
#+name: init-simple-block
#+begin_src emacs-lisp
  (use-package simple
    :straight nil
    :init
    (blackout 'visual-line-mode)
    (general-setq-default blink-matching-paren t
                          column-number-mode t
                          display-time-mode t
                          eval-expression-print-length nil
                          eval-expression-print-level nil
                          inhibit-point-motion-hooks t
                          kill-do-not-save-duplicates t
                          kill-ring-max 300
                          line-move-visual nil
                          line-number-mode t
                          next-line-add-newlines nil
                          save-interprogram-paste-before-kill t
                          set-mark-command-repeat-pop t
                          show-trailing-whitespace nil
                          track-eol t))
#+end_src

**** Time [Built-In]
#+name: init-time-block
#+begin_src emacs-lisp
  (use-package time
    :straight nil
    :ghook ('after-init-hook #'display-time-mode)
    :init
    (format-time-string "%a %B %d %T")
    (general-setq-default display-time-24hr-format t
                          display-time-day-and-date t
                          display-time-default-load-average nil))
#+end_src

**** Tooltip [Built-In]
#+name: init-tooltip-block
#+begin_src emacs-lisp
  (use-package tooltip
    :straight nil
    :init (tooltip-mode -1))
#+end_src

**** Uniquify [Built-In]
#+name: init-uniquify-block
#+begin_src emacs-lisp
  (use-package uniquify
    :straight nil
    :init
    (general-setq-default uniquify-ignore-buffers-re "^\\*"
                          uniquify-buffer-name-style 'forward
                          uniquify-separator "/"))
#+end_src

**** VC-Hooks [Built-In]
#+name: init-vc-block
#+begin_src emacs-lisp
  (use-package vc-hooks
    :straight nil
    :init
    (general-setq-default vc-handled-backends nil
                          vc-follow-symlinks t))
#+end_src

**** Whitespace [Built-In]
#+name: init-whitespace-block
#+begin_src emacs-lisp
  (use-package whitespace
    :straight nil
    :init
    (general-setq-default whitespace-style '(face empty indentation::space tab trailing)))
#+end_src
**** Window [Built-In]
#+name: init-window-block
#+begin_src emacs-lisp
  (use-package window
    :straight nil
    :init
    (general-setq-default split-width-threshold 160
                          split-height-threshold nil))
#+end_src

**** Winner [Built-In]
#+name: init-winner-block
#+begin_src emacs-lisp
  (use-package winner
    :blackout t :straight nil
    :ghook 'after-init-hook
    :init
    (general-setq-default winner-boring-buffers '("*Completions*"
                                                  "*Compile-Log*"
                                                  "*inferior-lisp*"
                                                  "*Fuzzy Completions*"
                                                  "*Apropos*"
                                                  "*Help*"
                                                  "*cvs*"
                                                  "*Buffer List*"
                                                  "*Ibuffer*"
                                                  "*esh command on file*")))
#+end_src

*** User Files
**** Custom File
#+name: init-custom-load-block
#+begin_src emacs-lisp
  (use-package cus-edit
    :straight nil
    :init
    (general-setq-default custom-file djm--custom-file)
    (when (file-exists-p custom-file)
      (load custom-file :noerror)))
#+end_src

**** Secret File
#+name: init-secret-load-block
#+begin_src emacs-lisp
  (when (file-exists-p djm--secret-file)
    (load djm--secret-file :noerror))
#+end_src


** Utilities
*** System
**** Async
#+name: init-async-block
#+begin_src emacs-lisp
  (use-package async
    :straight t
    :ghook ('dired-mode-hook #'dired-async-mode)
    :config
    (general-setq async-bytecomp-allowed-packages '(all)))
#+end_src

**** OSX-Trash
#+name: init-osx-trash-block
#+begin_src emacs-lisp
  (use-package osx-trash
    :straight t
    :functions (osx-trash-setup)
    :preface
    (defun djm/setup-osx-trash-on-deletion (&rest _)
      (osx-trash-setup))
    :init
    (general-add-advice 'dired-delete-file :before #'djm/setup-osx-trash-on-deletion))
#+end_src

**** OSX-Lib
#+name: init-osx-lib-block
#+begin_src emacs-lisp
  (use-package osx-lib
    :straight t)
#+end_src

**** Restart-Emacs
#+name: init-restart-emacs-block
#+begin_src emacs-lisp
  (use-package restart-emacs
    :straight t
    :commands (restart-emacs)
    :init (defalias 're #'restart-emacs))
#+end_src

**** Server
#+name: init-server-block
#+begin_src emacs-lisp

#+end_src

**** PDF-Tools
#+name: init-pdf-tools-block
#+begin_src emacs-lisp
  (use-package pdf-tools
    :straight t)
#+end_src

**** Firestarter
#+name: init-firestarter-block
#+begin_src emacs-lisp
  (use-package firestarter
    :blackout t :straight t
    :ghook 'before-save-hook)
#+end_src

**** ESUP
#+name: init-esup-block
#+begin_src emacs-lisp
  (use-package esup
    :straight t
    :commands (esup))
#+end_src

**** Persistent-Scratch
#+name: init-persistent-scratch-block
#+begin_src emacs-lisp
    (use-package persistent-scratch
      :straight t
      :init
      (general-setq persistent-scratch-autosave-interval 60
                    initial-scratch-message "Welcome to the Church of Emacs 🙏\n")
      (run-with-idle-timer 5 nil (lambda ()
                                   (persistent-scratch-setup-default)
                                   (with-current-buffer "*scratch*"
                                     (lisp-interaction-mode)))))
#+end_src

*** Terminal & Shell
**** Term [Built-In]
#+name: init-term-block
#+begin_src emacs-lisp
  (use-package term
    :straight nil)
#+end_src

**** Eterm-256-Color
#+name: init-eterm-256-color-block
#+begin_src emacs-lisp
  (use-package eterm-256color
    :blackout "" :straight t)
#+end_src
**** VTerm
#+name: init-vterm-block
#+begin_src emacs-lisp
  (use-package vterm
    :straight t
    :preface
    (progn
      (defun config-terminal--build-vterm (package &rest _)
        (when (member package '("vterm"))
          (let* ((base-dir (straight--build-dir "vterm"))
                 (build-dir (f-join base-dir "build")))
            (mkdir build-dir t)
            (let ((default-directory build-dir))
              (with-current-buffer (get-buffer-create "*vterm build*")
                (erase-buffer)
                (let ((default-directory base-dir))
                  (call-process "cmake" nil t nil base-dir)
                  (call-process "make" nil t)))))))
      (add-hook 'straight-use-package-pre-build-functions #'config-terminal--build-vterm)))
#+end_src

**** VTerm-Toggle
#+name: init-vterm-toggle-block
#+begin_src emacs-lisp
  (use-package vterm-toggle
    :straight t
    :general
    ("C-c C-t" #'vterm-toggle
     "C-c C-y" #'term-toggle-cd))
#+end_src

*** Project Management
**** Projectile
#+name: init-projectile-block
#+begin_src emacs-lisp
  (use-package projectile
    :blackout t :straight t
    :general
    (:prefix "M-p"
             "s" #'projectile-switch-project
             "c" #'projectile-compile-project
             "f" #'projectile-find-file)
    :config
    (general-setq projectile-completion-system 'ivy
                  projectile-enable-caching t
                  projectile-switch-project-action 'projectile-dired
                  projectile-verbose nil)
    (projectile-mode))
#+end_src

**** Projectile-Speedbar
#+name: init-projectile-speedbar-block
#+begin_src emacs-lisp
  (use-package projectile-speedbar
    :straight t)
#+end_src

**** Direnv
#+name: init-direnv-block
#+begin_src emacs-lisp
  (use-package direnv
    :blackout t :straight t
    :ghook 'projectile-mode-hook
    :commands (direnv-update-environment
               direnv-allow)
    :config
    (add-to-list 'direnv-non-file-modes '(comint-mode
                                          term-mode
                                          vterm-mode
                                          eshell-mode
                                          shell-mode
                                          compilation-mode))
    (add-hook 'compilation-mode-hook #'direnv-update-environment))
#+end_src

*** Frameworks
**** Hydra
#+name: init-hydra-block
#+begin_src emacs-lisp
  (use-package hydra
    :straight t)
#+end_src

**** Hercules
#+name: init-hercules-block
#+begin_src emacs-lisp
  (use-package hercules
    :straight t)
#+end_src

**** Amx
#+name: init-amx-block
#+begin_src emacs-lisp
  (use-package amx
    :blackout t :straight t
    :ghook 'ivy-mode-hook
    :config
    (general-setq amx-ignored-command-matchers nil
                  amx-show-key-bindings nil
                  amx-save-file (no-littering-expand-var-file-name "amx-save.el")))
#+end_src

**** Prescient
#+name: init-prescient-block
#+begin_src emacs-lisp
  (use-package prescient
    :blackout t :straight t
    :ghook ('ivy-prescient-mode-hook #'prescient-persist-mode))
#+end_src

**** Ivy
#+name: init-ivy-block
#+begin_src emacs-lisp
  (use-package ivy
    :blackout t :straight t
    :ghook 'after-init-hook
    :general
    ([remap ido-switch-buffer] #'ivy-switch-buffer
     "C-x B"                   #'ivy-switch-buffer-other-window
     "C-c C-r"                 #'ivy-resume
     [remap kill-ring-save]    #'ivy-kill-ring-save)
    (:keymaps
     'ivy-minibuffer-map
     "<tab>" #'ivy-alt-done
     "C-w"   #'ivy-yank-word
     "C-o"   #'ivy-occur)
    (:keymaps
     'ivy-switch-buffer-map
     [remap kill-buffer] #'ivy-switch-buffer-kill)
    :config
    (general-setq ivy-dynamic-exhibit-delay-ms 50
                  ivy-use-selectable-prompt t
                  ivy-case-fold-search-default 'auto
                  ivy-initial-inputs-alist nil
                  ivy-use-virtual-buffers t
                  ivy-height 25
                  ivy-virtual-abbreviate 'name
                  ivy-count-format "(%d/%d) "
                  ivy-flx-limit 2000
                  ivy-sort-max-size 50000))
#+end_src

**** Ivy-Rich
#+name: init-ivy-rich-block
#+begin_src emacs-lisp
  (use-package ivy-rich
    :straight t
    :ghook 'counsel-mode-hook
    :config
    (general-setq ivy-rich-path-style 'abbrev)
    (general-setq ivy-rich-display-transformers-list
          '(counsel-recentf
            (:columns
             ((ivy-rich-candidate (:width 80))
              (ivy-rich-file-last-modified-time (:face font-lock-doc-face))))
            ivy-switch-buffer
            (:columns
             ((ivy-rich-candidate (:width 30))
              (ivy-rich-switch-buffer-size (:width 7))
              (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
              (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))
              (ivy-rich-switch-buffer-project (:width 15 :face success))
              (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))
             :predicate
             (lambda (cand) (get-buffer cand)))
            counsel-M-x
            (:columns
             ((counsel-M-x-transformer (:width 40))
              (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
            counsel-describe-function
            (:columns
             ((counsel-describe-function-transformer (:width 40))
              (ivy-rich-counsel-function-docstring (:face font-lock-doc-face))))
            counsel-describe-variable
            (:columns
             ((counsel-describe-variable-transformer (:width 40))
              (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face)))))))
#+end_src
**** Counsel
#+name: init-counsel-block
#+begin_src emacs-lisp
  (use-package counsel
    :blackout t :straight t
    :ghook 'ivy-mode-hook
    :general
    (:keymaps
     'counsel-mode-map
     [remap dired]                    #'counsel-dired
     [remap execute-extended-command] #'counsel-M-x
     [remap find-file]                #'counsel-find-file
     "C-x C-d"                        #'counsel-dired-jump
     "C-x C-i"                        #'counsel-imenu
     "C-x C-l"                        #'counsel-find-library
     "C-x C-r"                        #'counsel-recentf
     "C-x C-v"                        #'counsel-set-variable
     "C-x C-u"                        #'counsel-unicode-char
     "C-c g"                          #'counsel-grep
     "C-c h"                          #'counsel-command-history
     "C-c j"                          #'counsel-git
     "C-c j"                          #'counsel-git-grep
     "C-c k"                          #'counsel-rg
     "C-c z"                          #'counsel-fzf
     "C-c c w"                        #'counsel-colors-web
     "C-h F"                          #'counsel-describe-face
     "C-h f"                          #'counsel-describe-function
     "C-h v"                          #'counsel-describe-variable)

    :config
    (use-package ivy-prescient
      :demand t :straight t
      :init (ivy-prescient-mode +1))

    (general-setq counsel-describe-function-function #'helpful-callable)
    (general-setq counsel-describe-variable-function #'helpful-variable)

    (general-setq counsel-find-file-at-point t)

    (general-setq counsel-rg-base-command "rg --with-filename --no-heading --line-number --color never %s -z --sort path")

    (general-setq counsel-grep-base-command "rg -S --no-heading --line-number --color never '%s' %s")

    (general-setq counsel-fzf-cmd "fd --type f | fzf -f \"%s\"")

    (general-setq ivy-re-builders-alist '((counsel-describe-function . ivy--regex-fuzzy)
                                          (counsel-describe-variable . ivy--regex-fuzzy)
                                          (counsel-describe-face . ivy--regex-fuzzy)
                                          (counsel-M-x . ivy-prescient-re-builder)
                                          (counsel-find-file . ivy--regex-fuzzy)
                                          (t . ivy-prescient-re-builder))))
#+end_src

**** Counsel-Projectile
#+name: init-counsel-projectile-block
#+begin_src emacs-lisp
  (use-package counsel-projectile
    :blackout t :straight t :after (projectile counsel)
    :config
    (general-setq counsel-projectile-sort-files t))
#+end_src

**** Swiper
#+name: init-swiper-block
#+begin_src emacs-lisp
  (use-package swiper
    :straight t :after (counsel)
    :general ("C-s" #'swiper)
    :config
    (general-setq swiper-goto-start-of-match t)
    (dolist (swiper-re '((swiper . ivy--regex-plus)
                         (swiper-isearch . ivy--regex-plus)
                         (swiper-query-replace . ivy--regex-plus)
                         (swiper-all . ivy--regex-plus)))
      (general-pushnew swiper-re ivy-re-builders-alist))

    (general-setq ivy-height-alist
                  '((t
                     lambda (_caller)
                     (/ (frame-height) 4)))))
#+end_src

**** Ivy-Posframe
#+name: init-ivy-posframe-block
#+begin_src emacs-lisp
  (use-package ivy-posframe
    :disabled t :blackout t :straight t
    :ghook 'ivy-mode-hook
    :custom
    (ivy-posframe-style 'frame-center)
    (ivy-posframe-hide-minibuffer t)
    (ivy-posframe-display-functions-alist '((t . ivy-posframe-display)
                                            (swiper . nil)
                                            (swiper-isearch . nil)
                                            (swiper-isearch-backward . nil)
                                            (swiper-all . nil)
                                            (swiper-query-replace . nil)
                                            (swiper-isearch-toggle . nil))))
#+end_src


**** Ivy-Xref
#+name: init-ivy-xref-block
#+begin_src emacs-lisp
  (use-package ivy-xref
    :blackout t :straight t
    :config
    (general-setq xref-show-definitions-function #'ivy-xref-show-defs))
#+end_src

*** Autocomplete
**** Hippie Expand [Built-In]
#+name: init-hippie-block
#+begin_src emacs-lisp
  (use-package hippie-exp
    :straight nil
    :general ([remap dabbrev-expand] #'hippie-expand)
    :config
    (general-setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                             try-expand-dabbrev-all-buffers
                                             try-expand-dabbrev-from-kill
                                             try-complete-file-name-partially
                                             try-complete-file-name
                                             try-expand-all-abbrevs
                                             try-expand-list
                                             try-complete-lisp-symbol-partially
                                             try-complete-lisp-symbol)))
#+end_src

**** Abbrev [Built-In]
#+name: init-abbrev-block
#+begin_src emacs-lisp
  (use-package abbrev
    :blackout t :straight nil
    :ghook 'after-init-hook
    :init
    (general-setq save-abbrevs 'silently
                  abbrev-file-name (no-littering-expand-var-file-name "abbrev_defs")))
#+end_src

**** Company
#+name: init-company-block
#+begin_src emacs-lisp
  (use-package company
    :blackout t :straight t
    :ghook ('after-init-hook #'global-company-mode)
    :general
    (:keymaps
     'company-active-map
     "RET"     nil
     [return]  nil
     "TAB"     #'company-complete-selection
     [tab]     #'company-complete-selection
     "<right>" #'company-complete-common
     "C-n"     #'company-select-next
     "C-p"     #'company-select-previous)
    :config
    (general-setq company-auto-complete-chars nil
                  company-async-timeout 15
                  company-idle-delay 0.15
                  company-minimum-prefix-length 2
                  company-show-numbers t
                  company-tooltip-limit 15
                  company-tooltip-align-annotations t)

    (defun djm/configure-company-backends-with-yas (backends)
      "Add :with company-yasnippet to company BACKENDS. Taken from
  Taken from https://github.com/syl20bnr/spacemacs/pull/179."
      (if (and (listp backends) (memq 'company-yasnippet backends))
          backends
        (append (if (consp backends)
                    backends
                  (list backends))
                '(:with company-yasnippet))))

    (general-setq company-backends
                  (mapcar #'djm/configure-company-backends-with-yas company-backends)))

  (general-with-package 'company
    (general-pushnew #'org-self-insert-command company-begin-commands))
#+end_src

**** Company-Box
#+name: init-company-box-block
#+begin_src emacs-lisp
  (use-package company-box
    :blackout t :straight t
    :ghook 'company-mode-hook
    :config
    (general-setq company-box-show-single-candidate t
                  company-box-icons-alist 'company-box-icons-all-the-icons))
#+end_src

**** Company-Prescient
#+name: init-company-prescient-block
#+begin_src emacs-lisp
  (use-package company-prescient
    :blackout t :straight t
    :ghook 'company-mode-hook)
#+end_src

**** Company-FLX
#+name: init-company-flx-block
#+begin_src emacs-lisp
  (use-package company-flx
    :blackout t :straight t
    :ghook 'company-mode-hook)
#+end_src

**** Company-Emoji
#+name: init-company-emoji-block
#+begin_src emacs-lisp
  (use-package company-emoji
    :straight t :after (company)
    :init
    (general-pushnew '(company-emoji :with company-yasnippet) company-backends))
#+end_src

**** Company-Math
#+name: init-company-math-block
#+begin_src emacs-lisp
  (use-package company-math
    :straight t :after (company)
    :init
    (general-pushnew '(company-math-symbols-unicode :with company-yasnippet) company-backends)
    (general-pushnew '(company-math-symbols-latex :with company-yasnippet) company-backends))
#+end_src

**** Company-LSP
#+name: init-company-lsp-block
#+begin_src emacs-lisp
  (use-package company-lsp
    :after (company lsp-mode)
    :init
    (general-pushnew '(company-lsp :with company-yasnippet) company-backends)
    :config
    (general-def [company-dummy-event] #'company-ignore))
#+end_src

**** Company-Anaconda
#+name: init-company-anaconda-block
#+begin_src emacs-lisp
  (use-package company-anaconda
    :straight t :after (company python)
    :init
    (general-pushnew '(company-anaconda :with company-yasnippet) company-backends))
#+end_src

**** Yasnippet
#+name: init-yasnippet-block
#+begin_src emacs-lisp
  (use-package yasnippet
    :blackout t :straight t
    :hook ((prog-mode org-mode text-mode) . yas-minor-mode)
    :general ("C-;" #'yas-expand)
    :config
    (general-setq yas-verbosity 1
                  yas-wrap-around-region t
                  yas-prompt-functions '(yas-completing-prompt)
                  yas-snippet-dirs `(,djm--yasnippet-directory))

    (blackout 'yas-minor-mode)
    (blackout 'yas-global-mode)
    (yas-global-mode +1))

  (use-package yasnippet-snippets
    :straight t
    :ghook ('yas-global-mode-hook #'yas-reload-all))

  (use-package auto-yasnippet
    :straight t)

  (use-package ivy-yasnippet
    :straight t
    :commands (ivy-yasnippet))
#+end_src

**** Auto-Insert [Built-In]
#+name: init-autoinsert-block
#+begin_src emacs-lisp
  (use-package autoinsert
    :disabled t :straight nil
    :ghook ('after-init-hook #'auto-insert-mode))
#+end_src

*** Documentation
**** Discover
#+name: init-discover-block
#+begin_src emacs-lisp
  (use-package discover
    :blackout t :straight t
    :ghook ('after-init-hook #'global-discover-mode))
#+end_src

**** Discover-My-Major
#+name: init-discover-my-major-block
#+begin_src emacs-lisp
  (use-package discover-my-major
    :straight t
    :general
    ("C-h M-m" #'discover-my-major
     "C-h RET" #'discover-my-mode))
#+end_src

**** Eldoc [Built-In]
#+name: init-eldoc-block
#+begin_src emacs-lisp
  (use-package eldoc
    :blackout t :straight nil
    :ghook 'prog-mode-hook
    :init
    (setq eldoc-idle-delay .2
          eldoc-echo-area-use-multiline-p nil))
#+end_src

**** Help [Built-In]
#+name: init-help-block
#+begin_src emacs-lisp
  (use-package help
    :straight nil
    :init
    (general-setq help-window-select t)
    (advice-add 'help-window-display-message :override #'ignore))
#+end_src

**** Help-Functions-Plus
#+name: init-help-fns-plus-block
#+begin_src emacs-lisp
  (use-package help-fns+
    :straight help-fns-plus
    :general ("C-h M-k" #'describe-keymap))
#+end_src

**** Helpful
#+name: init-helpful-block
#+begin_src emacs-lisp
  (use-package helpful
    :straight t
    :general
    ([remap describe-function] #'helpful-callable
     [remap describe-command]  #'helpful-command
     [remap describe-variable] #'helpful-variable
     [remap describe-key]      #'helpful-key)
    :config
    (use-package elisp-demos
      :demand t :straight t
      :config
      (general-add-advice 'helpful-update :after #'elisp-demos-advice-helpful-update)))
#+end_src

**** Man [Built-In]
#+name: init-man-block
#+begin_src emacs-lisp
  (use-package man
    :straight nil)
#+end_src

**** Suggest
#+name: init-suggest-block
#+begin_src emacs-lisp
  (use-package suggest
    :straight t)
#+end_src

**** Which-Key
#+name: init-which-key-block
#+begin_src emacs-lisp
  (use-package which-key
    :blackout t :straight t
    :ghook 'after-init-hook
    :config
    (general-setq which-key-idle-delay 0.5
                  which-key-frame-max-height 25))
#+end_src

**** Woman [Built-In]
#+name: init-woman-block
#+begin_src emacs-lisp
  (use-package woman
    :straight nil)
#+end_src

*** Spell Check
**** Ispell [Built-In]
#+name: init-ispell-block
#+begin_src emacs-lisp
  (use-package ispell
    :straight nil
    :preface (djm/fetch-hunspell-dictionary)
    :init (general-setq-default ispell-dictionary "en_US"
                                ispell-program-name (executable-find "hunspell")
                                ispell-really-hunspell t
                                ispell-silently-savep t))
#+end_src

*** Editing Tools
**** Vimish Fold
#+name: init-vim-fold-block
#+begin_src emacs-lisp
  (use-package vimish-fold
    :straight t)
#+end_src

**** Multiple Cursors
#+name: init-multiple-cursors-block
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :straight t
    :general
    ("C->" #'mc/mark-next-like-this
     "C-<" #'mc/mark-previous-like-this))
#+end_src

**** Zop-To-Char
#+name: init-zop-to-char-block
#+begin_src emacs-lisp
  (use-package zop-to-char
    :straight t
    :general
    ("M-z" #'zop-to-char
     "M-Z" #'zop-up-to-char))
#+end_src

**** Align [Built-In]
#+name: init-edit-utils-block
#+begin_src emacs-lisp
  (use-package align
    :straight nil
    :general ("C-x a a" #'align-regexp))
#+end_src

**** Interactive-Align
#+name: init-interactive-align-block
#+begin_src emacs-lisp
  (use-package ialign
    :straight t)
#+end_src

**** Visual-Regexp
#+name: init-visual-regexp-block
#+begin_src emacs-lisp
  (use-package visual-regexp
    :straight t)
#+end_src

**** Visual-Regexp-Steroids
#+name: init-visual-regexp-steroids-block
#+begin_src emacs-lisp
  (use-package visual-regexp-steroids
    :straight t
    :config
    (general-setq vr/engine 'emacs))
#+end_src

**** Anzu
#+name: init-anzu-block
#+begin_src emacs-lisp
  (use-package anzu
    :blackout t :straight t
    :general ([remap query-replace] #'anzu-query-replace-regexp))
#+end_src

**** Deadgrep
#+name: init-deadgrep-block
#+begin_src emacs-lisp
  (use-package deadgrep
    :straight t
    :init (defalias 'rg #'deadgrep))
#+end_src

**** Expand-Region
#+name: init-expand-region-block
#+begin_src emacs-lisp
  (use-package expand-region
    :straight t
    :general ("C-=" #'er/expand-region))
#+end_src

**** String-Inflection
#+name: init-string-inflection-block
#+begin_src emacs-lisp
  (use-package string-inflection
    :straight t)
#+end_src

**** Crux
#+name: init-crux-block
#+begin_src emacs-lisp
    (use-package crux
      :straight t)
#+end_src

*** Minor Modes
**** EditorConfig
#+name: init-editorconfig-block
#+begin_src emacs-lisp
  (use-package editorconfig
    :blackout t :straight t
    :ghook 'after-init-hook)
#+end_src

**** Writeroom
#+name: init-writeroom-block
#+begin_src emacs-lisp
  (use-package writeroom-mode
    :blackout t :straight t)
#+end_src

**** Whitespace-Butler
#+name: init-ws-butler-block
#+begin_src emacs-lisp
  (use-package ws-butler
    :blackout t :straight t
    :ghook ('after-init-hook #'ws-butler-global-mode))
#+end_src

**** Undo-Tree
#+name: init-undo-tree-block
#+begin_src emacs-lisp
  (use-package undo-tree
    :blackout t :straight t
    :general
    ("C-/" #'undo-tree-undo
     "C-?" #'undo-tree-redo)
    :config
    (general-setq undo-tree-save-history t
                  undo-tree-visualizer-timestamps t
                  undo-tree-visualizer-diff t)
    (global-undo-tree-mode +1))
#+end_src

**** Aggressive-Indent
#+name: init-aggressive-indent-block
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :blackout t :straight t
    :commands (aggressive-indent-mode))
#+end_src

**** Hungry-Delete
#+name: init-hungry-delete-block
#+begin_src emacs-lisp
  (use-package hungry-delete
    :blackout t :straight t
    :commands (hungry-delete-mode))
#+end_src

**** Smart-Hungry-Delete
#+name: init-smart-hungry-delete-block
#+begin_src emacs-lisp
  (use-package smart-hungry-delete
    :blackout t :straight t
    :commands (smart-hungry-delete-mode))
#+end_src

**** Format-All
#+name: init-format-all-block
#+begin_src emacs-lisp
  (use-package format-all
    :blackout t :straight t
    :commands (format-all-buffer format-all-mode))
#+end_src

**** SmartParens
#+name: init-smartparens-block
#+begin_src emacs-lisp
  (use-package smartparens
    :disabled t :blackout t :straight t
    :hook ((prog-mode eshell-mode text-mode) . smartparens-strict-mode)
    :config (show-smartparens-global-mode +1))
#+end_src

**** Prog-Mode [Built-In]
#+name: init-prog-mode-block
#+begin_src emacs-lisp
  (use-package prog-mode
    :straight nil
    :gfhook
    #'display-fill-column-indicator-mode
    #'show-paren-mode
    #'global-prettify-symbols-mode)
#+end_src

*** Navigation
**** Avy
#+name: init-avy-block
#+begin_src emacs-lisp
  (use-package avy
    :straight t
    :config
    (general-setq avy-keys '(?a ?s ?d ?e ?f ?g ?r ?v ?h ?j ?k ?l ?n ?m ?u)
                  avy-all-windows nil))
#+end_src

**** Ace-Window
#+name: init-ace-window-block
#+begin_src emacs-lisp
  (use-package ace-window
    :straight t
    :general ("C-x o" #'ace-window)
    :config
    (setq aw-keys '(?a ?s ?d ?f ?j ?k ?l)))
#+end_src

#+name: init-ace-link-block
#+begin_src emacs-lisp
  (use-package ace-link
    :straight t)
#+end_src

**** Windower
#+name: init-windower-block
#+begin_src emacs-lisp
  (use-package windower
    :straight (:host gitlab :repo "ambrevar/emacs-windower")
    :general
    ("C-c w o" #'windower-switch-to-last-buffer
     "C-c w t" #'windower-toggle-split))
#+end_src

**** Windmove
#+name: init-windmove-block
#+begin_src emacs-lisp
  (use-package windmove
    :straight t
    :general
    ("C-c w j" #'windmove-left
     "C-c w l" #'windmove-right
     "C-c w n" #'windmove-down
     "C-c w u" #'windmove-up))
#+end_src

**** Dumb-Jump
#+name: init-dumb-jump-block
#+begin_src emacs-lisp
  (use-package dumb-jump
    :blackout t :straight t
    :commands (dumb-jump-mode)
    :config (setq dumb-jump-selector 'ivy))
#+end_src

**** Dired
#+name: init-dired-block
#+begin_src emacs-lisp
  (use-package dired
    :blackout "Dired" :straight nil
    :functions (dired wdired-change-to-wdired-mode)
    :general
    (:keymaps
     'dired-mode-map
     "C-c C-e" #'wdired-change-to-wdired-mode)
    :config
    (general-setq dired-auto-revert-buffer t
                  dired-dwim-target t
                  dired-use-ls-dired t
                  dired-ls-F-marks-symlinks t
                  dired-hide-details-hide-symlink-targets nil
                  dired-listing-switches "-alhvF --group-directories-first --time-style iso"
                  dired-recursive-deletes 'always
                  dired-recursive-copies 'always
                  dired-deletion-confirmer '(lambda (x) t))) ;; Don't confirm deleting files
#+end_src

**** WDired
#+name: init-wdired-block
#+begin_src emacs-lisp
  (use-package wdired
    :after (dired)
    :straight nil)
#+end_src

**** Dired-Aux
#+name: init-dired-aux-block
#+begin_src emacs-lisp
  (use-package dired-aux
    :after (dired)
    :functions (dired-diff)
    :straight nil)
#+end_src

**** Dired-X
#+name: init-dired-x-block
#+begin_src emacs-lisp
  (use-package dired-x
    :straight nil
    :functions (dired-x-find-file
                dired-x-bind-find-file
                dired-x-find-file-other-window)
    :config
    (general-setq dired-x-hands-off-my-keys nil
                  dired-omit-verbose t
                  dired-clean-up-buffers-too t))
#+end_src

**** Diredfl
#+name: init-diredfl-block
#+begin_src emacs-lisp
  (use-package diredfl
    :blackout t :straight t
    :ghook 'dired-mode-hook)
#+end_src

**** Dired-Hacks
#+name: init-dired-hacks-block
#+begin_src emacs-lisp
  (use-package dired-hacks-utils
    :straight dired-hacks)

  (use-package dired-filter
    :straight dired-hacks)

  (use-package dired-rainbow
    :straight dired-hacks)

  (use-package dired-narrow
    :straight dired-hacks
    :general
    (:keymaps
     'dired-mode-map
     "C-c C-n" #'dired-narrow
     "C-c C-f" #'dired-narrow-fuzzy
     "C-c C-r" #'dired-narrow-regexp))

  (use-package dired-collapse
    :straight dired-hacks)

  (use-package dired-tagsistant
     :straight dired-hacks)

  (use-package dired-open
    :straight dired-hacks)

  (use-package dired-list
     :straight dired-hacks)

  (use-package dired-images
     :straight dired-hacks)

  (use-package dired-ranger
    :straight dired-hacks
    :general
    (:keymaps
     'dired-mode-map
     "C-c C-c" #'dired-ranger-copy
     "C-c C-m" #'dired-ranger-move
     "C-c C-p" #'dired-ranger-paste
     "C-c C-b" #'dired-ranger-bookmark
     "C-c b v" #'dired-ranger-bookmark-visit))

  (use-package dired-subtree
    :straight dired-hacks
    :general
    (:keymaps
     'dired-mode-map
     "<tab>"     #'dired-subtree-toggle
     "<backtab>" #'dired-subtree-cycle))
#+end_src

**** Dired-Git-Info
#+name: init-dired-git-info-block
#+begin_src emacs-lisp
  (use-package dired-git-info
    :blackout t :straight t
    :general
    (:keymaps
     'dired-mode-map
     ":" #'dired-git-info-mode))
#+end_src

**** Dired-Rsync
#+name: init-dired-rsync-block
#+begin_src emacs-lisp
  (use-package dired-rsync
    :straight t
    :general
    (:keymaps
     'dired-mode-map
     "C-c C-r" #'dired-rsync))
#+end_src

**** FD-Dired
#+name: init-fd-dired-block
#+begin_src emacs-lisp
  (use-package fd-dired
    :straight (:host github :repo "yqrashawn/fd-dired"))
#+end_src

**** Dired-Sidebar
#+name: init-dired-sidebar-block
#+begin_src emacs-lisp
  (use-package dired-sidebar
    :straight t
    :general ("M-\\" #'dired-sidebar-toggle-sidebar)
    :config
    (general-setq dired-sidebar-subtree-line-prefix "__"
                  dired-sidebar-theme 'vscode
                  dired-sidebar-use-magit-integration t
                  dired-sidebar-use-term-integration t
                  dired-sidebar-use-wdired-integration t))
#+end_src

**** Direx
#+name: init-direx-block
#+begin_src emacs-lisp
  (use-package direx
    :straight (:host github :repo "m2ym/direx-el"))
#+end_src

**** Ranger
#+name: init-ranger-block
#+begin_src emacs-lisp
  (use-package ranger
    :disabled t :straight t)
#+end_src

**** iBuffer
#+name: init-ibuffer-block
#+begin_src emacs-lisp
  (use-package ibuffer
    :straight t
    :general
    ([remap list-buffers] #'ibuffer)
    :config
    (setq ibuffer-expert t
          ibuffer-formats
          '((mark modified " "
                  (name 25 50 :left) " "
                  (mode 25 50) (filename-and-process 25 50 :right)))))
#+end_src

**** iBuffer-Extenstion
#+name: init-ibuf-ext-block
#+begin_src emacs-lisp
  (use-package ibuf-ext
    :straight nil
    :functions (ibuffer-remove-alist
                ibuffer-remove-duplicates
                ibuffer-split-list)
    :config (setq ibuffer-show-empty-filter-groups nil))
#+end_src

**** iBuffer-Projectile
#+name: init-ibuffer-projectile
#+begin_src emacs-lisp
  (use-package ibuffer-projectile
    :straight t
    :commands (ibuffer-projectile-set-filter-groups)
    :functions (ibuffer-do-sort-by-alphabetic)
    :ghook ('ibuffer-mode-hook #'config-ibuffer--setup-buffer)
    :preface
    (defvar system-buffers '("*straight-process*"
                             "*direnv*"
                             "*pyls*"
                             "*pyls::stderr*"
                             "*lsp-log*"
                             "*Compile-Log*"))
    (defun config-ibuffer--setup-buffer ()
      (ibuffer-projectile-set-filter-groups)
      (add-to-list 'ibuffer-filter-groups '("Dired" (mode . dired-mode)))
      (add-to-list 'ibuffer-filter-groups '("System" (predicate . (-contains? system-buffers (buffer-name)))))
      (add-to-list 'ibuffer-filter-groups '("Shells" (mode . eshell-mode)))
      (unless (eq ibuffer-sorting-mode 'alphabetic)
        (ibuffer-do-sort-by-alphabetic))
      (when (bound-and-true-p page-break-lines-mode)
        (page-break-lines--update-display-tables)))
    :config
    (setq ibuffer-projectile-prefix ""))
#+end_src

**** iBuffer-Sidebar
#+name: init-ibuffer-sidebar
#+begin_src emacs-lisp
  (use-package ibuffer-sidebar
    :straight t
    :general ("M-]" #'ibuffer-sidebar-toggle-sidebar))
#+end_src

**** Bookmark
#+name: init-bookmark-block
#+begin_src emacs-lisp
  (use-package bookmark
    :straight nil
    :init (setq bookmark-save-flag +1))
#+end_src

**** iMenu
#+name: init-imenu-block
#+begin_src emacs-lisp
  (use-package imenu-anywhere
    :straight t)
#+end_src

** Productivity
*** Org
**** Org-Mode
#+name: init-org-block
#+begin_src emacs-lisp
  (use-package org
    :straight t
    :ghook ('org-mode-hook #'djm/config-org-mode)
    :gfhook 'variable-pitch-mode 'visual-line-mode
    :general
    ("C-c a" #'org-agenda
     "C-c c" #'org-capture
     "C-c p" #'org-pomodoro
     "C-c s" #'org-search-view
     "C-c t" #'org-todo-list
     "C-c /" #'org-tags-view)
    :preface
    (defun djm/config-org-mode ()
      (push '("TODO"       . ?▲)  prettify-symbols-alist)
      (push '("NEXT"       . ?→)  prettify-symbols-alist)
      (push '("DONE"       . ?✓)  prettify-symbols-alist)
      (push '("CANCELLED"  . ?✘)  prettify-symbols-alist)
      (push '("WAITING"    . ?𝌗) prettify-symbols-alist)
      (push '("QUESTION"   . ??)  prettify-symbols-alist)
      (push '("SCHEDULED"  . ?🗓) prettify-symbols-alist)
      (push '("CLOSED"     . ?🏁) prettify-symbols-alist)
      (push '("DEADLINE"   . ?❗) prettify-symbols-alist)
      (push '("CLOCK"      . ?⏰) prettify-symbols-alist)
      (setq-local line-spacing 0.1)
      (when (display-graphic-p)
        (general-setq-local left-margin-width 2)
        (general-setq-local right-margin-width 2))
      (set-window-buffer nil (current-buffer)))

    :config
    (general-setq org-catch-invisible-edits 'smart
                  org-cycle-separator-lines 0
                  org-default-notes-file "~/org/inbox.org"
                  org-default-priority ?B
                  org-directory "~/org/"
                  org-enforce-todo-dependencies t
                  org-expiry-inactive-timestamps t
                  org-export-coding-system 'utf-8
                  org-file-apps '((auto-mode . emacs)
                                  ("\\.x?html?\\'" . "open %s")
                                  ("\\.pdf\\'" . "open %s"))
                  org-fontify-done-headline t
                  org-fontify-whole-heading-line t
                  org-fontity-quote-and-verse-blocks t
                  org-goto-max-level 10
                  org-hide-emphasis-markers t
                  org-highlight-sparse-tree-matches nil
                  org-image-actual-width nil
                  org-imenu-depth 4
                  org-indirect-buffer-display 'current-window
                  org-insert-heading-respect-content t
                  org-lowest-priority ?C
                  org-modules '(org-agenda
                                org-src
                                org-timer
                                org-habit
                                org-info
                                org-tempo
                                org-archive)
                  org-outline-path-complete-in-steps nil
                  org-pretty-entities t
                  org-return-follows-link t
                  org-show-notification-handler 'message
                  org-special-ctrl-a/e t
                  org-special-ctrl-k t
                  org-startup-folded 'content
                  org-startup-with-inline-images t
                  org-structure-template-alist '(("a" . "export ascii")
                                                 ("c" . "center")
                                                 ("C" . "comment")
                                                 ("e" . "example")
                                                 ("E" . "export")
                                                 ("h" . "export html")
                                                 ("l" . "export latex")
                                                 ("q" . "quote")
                                                 ("s" . "src")
                                                 ("el" . "src emacs-lisp")
                                                 ("d" . "definition")
                                                 ("t" . "theorem"))
                  org-use-fast-todo-selection t
                  org-use-speed-commands t
                  org-yank-adjusted-subtrees t))
#+end_src

**** Org-Indent
#+name: init-org-indent-block
#+begin_src emacs-lisp
  (use-package org-indent
    :blackout t :straight nil
    :ghook 'org-mode-hook
    :config (general-setq org-startup-indented t))
#+end_src

**** Org-Pomodoro
#+name: init-org-pomodoro-block
#+begin_src emacs-lisp
  (use-package org-pomodoro
    :straight t)
#+end_src

**** Org-Protocol-Caputure-HTML
#+name: init-org-protocol-capture-html-block
#+begin_src emacs-lisp
  (use-package org-protocol-capture-html
    :straight (:host github :repo "alphapapa/org-protocol-capture-html"))
#+end_src

**** Org-Brain
#+name: init-org-brain-block
#+begin_src emacs-lisp
  (use-package org-brain
    :straight t)
#+end_src

**** Org-Bullets
#+name: init-org-bullets-block
#+begin_src emacs-lisp
  (use-package org-bullets
    :blackout t :straight t
    :ghook 'org-mode-hook)
#+end_src

**** Org-Agenda
#+name: init-org-agenda-block
#+begin_src emacs-lisp
  (use-package org-agenda
    :straight nil
    :config
    (general-setq org-agenda-compact-blocks t
                  org-agenda-dim-blocked-tasks nil
                  org-agenda-files '("~/org/inbox.org"
                                     "~/org/work.org"
                                     "~/org/personal.org"
                                     "~/org/school.org")
                  org-agenda-inhibit-startup t
                  org-agenda-show-all-dates t
                  org-agenda-show-future-repeats nil
                  org-agenda-skip-deadline-if-done t
                  org-agenda-skip-scheduled-if-done t
                  org-agenda-skip-timestamp-if-done t
                  org-agenda-start-on-weekday nil
                  org-agenda-todo-ignore-with-date nil
                  org-agenda-window-setup 'current-window
                  org-log-done 'time
                  org-log-into-drawer t
                  org-log-state-notes-insert-after-drawers nil
                  org-refile-allow-creating-parent-nodes 'confirm
                  org-refile-targets '((nil :maxlevel . 9)
                                       (org-agenda-files :maxlevel . 9))
                  org-refile-use-outline-path 'file
                  org-tag-alist '(("@errand" . ?e)
                                   ("@office" . ?o)
                                   ("@home" . ?h)
                                   ("@school" . ?s)
                                   (:newline)
                                   ("WAITING" . ?w)
                                   ("QUESTION" . ?Q)
                                   ("HOLD" . ?H)
                                   ("CANCELLED" . ?c)
                                   ("REFILE" . ?r))
                  org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                                      (sequence "WAITING(w@/!)" "HOLD(h@/!)"  "QUESTION(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING")))
    :config
    (general-setq org-capture-templates '(("t" "todo [inbox]" entry (file "~/org/inbox.org")
                                           "* TODO %?\n%U\n" :clock-in t :clock-resume t)
                                          ("n" "note [inbox]" entry (file "~/org/inbox.org")
                                           "* %? :NOTE:\n%U\n" :clock-in t :clock-resume t)
                                          ("m" "meeting [inbox]" entry (file "~/org/inbox.org")
                                           "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
                                          ("p" "phone call [inbox]" entry (file "~/org/inbox.org")
                                           "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t))))

  (use-package org-super-agenda
    :straight t)
#+end_src

**** Org-Babel
#+name: init-org-babel-block
#+begin_src emacs-lisp
  (use-package org-babel
    :straight nil
    :general
    (:keymaps
     'org-mode-map
     "C-c v g" #'org-babel-goto-named-src-block)
    :config
    (general-setq org-confirm-babel-evaluate nil)
    (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp  . t))))
#+end_src

**** Org-Src
#+name: init-org-src-block
#+begin_src emacs-lisp
    (use-package org-src
      :straight nil
      :preface
      (defun djm/org-src-supress-final-newline ()
        (setq-local require-final-newline nil))

      (defun djm/org-src-delete-trailing-space (&rest _)
        (delete-trailing-whitespace))

      (defun djm/disable-flycheck-in-org-src-block ()
        (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

      :config/el-patch
      (defun org-src--construct-edit-buffer-name (org-buffer-name lang)
        (concat "[" org-buffer-name "]"))

      (general-setq org-src-window-setup 'current-window
                    org-src-fontify-natively t
                    org-src-tab-acts-natively t)

      (blackout 'org-src-mode " [src] ")
      (add-hook 'org-src-mode-hook #'djm/org-src-supress-final-newline)
      (add-hook 'org-src-mode-hook #'djm/disable-flycheck-in-org-src-block)
      (advice-add 'org-edit-src-exit :before #'djm/org-src-delete-trailing-space))
#+end_src

**** TOC-Org
#+name: init-toc-org-block
#+begin_src emacs-lisp
  (use-package toc-org
    :ghook 'org-mode-hook 'markdown-mode-hook)
#+end_src

*** Ledger
#+name: init-ledger-block
#+begin_src emacs-lisp
  (use-package ledger-mode
    :straight t)
#+end_src

*** Email
**** NotMuch
#+name: init-notmuch-block
#+begin_src emacs-lisp
  (use-package notmuch
    :straight t
    :config
    (general-setq notmuch-search-oldest-first nil))
#+end_src

*** Calendar
#+name: init-calendar-block
#+begin_src emacs-lisp
  (use-package calendar
    :ghook ('calendar-today-visible-hook #'calendar-mark-today)
    :config
    (general-setq calendar-longitude 43.492
                  calendar-latitude -112.034
                  calendar-location-name "Idaho Falls, Idaho"
                  calendar-holiday-marker t))
#+end_src

*** Spotify
#+name: init-spotify-block
#+begin_src emacs-lisp
  (use-package spotify
    :straight t
    :general
    (:keymaps
     'spotify-mode-map
     "C-c " #'spotify-command-map)
    :config
    (general-setq spotify-transport 'connect
                  spotify-player-status-truncate-length 20
                  spotfy-api-search-limit 50)
    (when-let ((plist (car (auth-source-search :host "spotify.api" :max 1)))
               (id (plist-get plist :user))
               (secret (funcall (plist-get plist :secret))))
      (general-setq spotify-oauth2-client-secret secret)
      (general-setq spotify-oauth2-client-id id)))
#+end_src

*** Web Browsing
**** HTMLize
#+name: init-htmlize-block
#+begin_src emacs-lisp
  (use-package htmlize
    :straight t)
#+end_src

**** Eww
#+name: init-web-browsing-block
#+begin_src emacs-lisp
  (use-package eww
    :straight nil)
#+end_src

**** Browse-Url
#+name: init-browse-url-block
#+begin_src emacs-lisp
  (use-package browse-url
    :straight nil
    :config
    (general-setq browse-urls-browser-function "firefox"))
#+end_src

**** Atomic-Chrome
#+name: init-atomic-chrome-block
#+begin_src emacs-lisp
  (use-package atomic-chrome
    :straight t)
#+end_src

*** Calculator
**** Calc
#+name: init-calc-block
#+begin_src emacs-lisp
  (use-package calc
    :straight nil
    :config
    (general-setq math-additional-units
                  '((GiB "1024 * MiB" "Giga Byte")
                    (MiB "1024 * KiB" "Mega Byte")
                    (KiB "1024 * B" "Kilo Byte")
                    (B nil "Byte")
                    (Gib "1024 * Mib" "Giga Bit")
                    (Mib "1024 * Kib" "Mega Bit")
                    (Kib "1024 * b" "Kilo Bit")
                    (b "B / 8" "Bit"))))
#+end_src

** Programming Support
*** Version Control
**** Magit
#+name: init-magit-block
#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :general ("C-x g" #'magit-status))
#+end_src

**** Smerge-Mode [Built-In]
#+name: init-smerge-mode-block
#+begin_src emacs-lisp
  (use-package smerge-mode
    :straight nil)
#+end_src

**** Transient
#+name: init-transient-block
#+begin_src emacs-lisp
  (use-package transient
    :straight t
    :config (transient-bind-q-to-quit))
#+end_src

**** Git-Commit
#+name: init-git-commit-block
#+begin_src emacs-lisp
  (use-package git-commit
    :blackout "" :straight nil
    :config
    (general-setq git-commit-summary-max-length 50))
#+end_src

**** Git-Gutter
#+name: init-git-gutter-block
#+begin_src emacs-lisp
  (use-package git-gutter
    :blackout t :straight t
    :if (display-graphic-p)
    :ghook ('after-init-hook #'global-git-gutter-mode))
#+end_src

**** Git-Time-Machine
#+name: init-git-timemachine-block
#+begin_src emacs-lisp
  (use-package git-timemachine
    :straight t)
#+end_src

*** Language Server Support
**** LSP-Mode
#+name: init-lsp-block
#+begin_src emacs-lisp
  (use-package lsp-mode
    :straight t
    :ghook ('python-mode-hook #'lsp-deferred)
    :ghook ('c-mode-hook      #'lsp-deferred)
    :config
    (setq lsp-prefer-flymake nil
          lsp-enable-snippet nil
          lsp-restart nil)

    (use-package lsp-clients
      :demand t :straight nil))

  (use-package lsp-ui
    :straight t :after (lsp-mode)
    :ghook 'lsp-mode-hook
    :general ("C-c f" #'lsp-ui-sideline-apply-code-actions)
    :config
    (setq lsp-ui-sideline-show-hover nil
          lsp-eldoc-enable-hover nil)

    (use-package lsp-ui-doc
      :demand t :straight nil))
#+end_src

**** Eglot
#+name: init-eglot-block
#+begin_src emacs-lisp

#+end_src

*** Syntax & Linting
**** Flycheck
#+name: init-flycheck-block
#+begin_src emacs-lisp
  (use-package flycheck
    :blackout t :straight t
    :ghook ('prog-mode-hook #'global-flycheck-mode)
    :config
    (add-to-list 'flycheck-check-syntax-automatically 'idle-buffer-switch)
    (general-setq flycheck-display-errors-delay 0.2
                  flycheck-buffer-switch-check-intermediate-buffers t
                  flycheck-checker-error-threshold 5000))
#+end_src

**** Checkdoc
#+name: init-checkdoc-block
#+begin_src emacs-lisp
  (use-package checkdoc
    :straight nil
    :init (general-setq checkdoc-force-docstrings-flag nil
                        checkdoc-arguments-in-order-flag nil)
    :config
    (blackout 'checkdoc-minor-mode))
#+end_src

**** Flycheck-Posframe
#+name: init-flycheck-posframe-block
#+begin_src emacs-lisp
  (use-package flycheck-posframe
    :blackout "" :straight t :after (flycheck)
    :if (display-graphic-p)
    :ghook 'flycheck-mode-hook
    :config (flycheck-posframe-configure-pretty-defaults))
#+end_src

**** Flycheck-Popup-Tip
#+name: init-flycheck-popup-tip-block
#+begin_src emacs-lisp
  (use-package flycheck-popup-tip
    :blackout "" :straight t :after (flycheck)
    :if (display-graphic-p)
    :ghook 'flycheck-mode-hook)
#+end_src

**** Flycheck-Pos-Tip
#+name: init-flycheck-pos-tip-block
#+begin_src emacs-lisp
  (use-package flycheck-pos-tip
    :blackout "" :straight t :after (flycheck)
    :if (display-graphic-p)
    :ghook 'flycheck-mode-hook
    :config (setq flycheck-pos-tip-timeout 15))
#+end_src

**** Flycheck-Pycheckers
#+name: init-flycheck-pycheckers-block
#+begin_src emacs-lisp
  (use-package flycheck-pycheckers
    :straight t
    :ghook ('flycheck-mode-hook #'flycheck-pycheckers-setup))
#+end_src

** Languages
*** Markdown
**** Mardown-Mode
#+name: init-markdown-block
#+begin_src emacs-lisp
  (use-package markdown-mode
    :straight t
    :mode ("\\.md\\'")
    :commands (markdown-mode gfm-mode)
    :config
    (general-setq markdown-fontify-code-blocks-natively t
                  markdown-enable-wiki-links t
                  mardown-indent-nenter 'indent-and-new-item
                  markdown-asymmetric-header t))
#+end_src

**** Markdown-Mode-Plus
#+name: init-markdown-mode-plus-block
#+begin_src emacs-lisp
  (use-package markdown-mode+
    :straight t)
#+end_src

*** YAML
**** YAML-Mode
#+name: init-yaml-block
#+begin_src emacs-lisp
  (use-package yaml-mode
    :straight t
    :mode ("\\.yaml'" "\\.yml'"))
#+end_src

*** JSON
**** JSON-Mode
#+name: init-json-mode-block
#+begin_src emacs-lisp
  (use-package json-mode
    :straight nil
    :mode "\\.json'")
#+end_src

*** Makefiles
**** Make-Mode [Built-In]
#+name: init-makefile-block
#+begin_src emacs-lisp
  (use-package make-mode
    :straight nil
    :blackout ((makefile-automake-mode . "Makefile")
               (makefile-gmake-mode . "Makefile")
               (makefile-makepp-mode . "Makefile")
               (makefile-bsdmake-mode . "Makefile")
               (makefile-imake-mode . "Makefile")))
#+end_src

*** LaTeX
**** AuCTeX
#+name: init-auctex-block
#+begin_src emacs-lisp

#+end_src

*** Shell
#+name: init-shell-block
#+begin_src emacs-lisp
  (use-package sh-mode
    :straight nil
    :mode ("\\.sh'" "\\.zsh'" "\\.bash'")
    :hook (after-save . executable-make-buffer-file-executable-if-script-p))
#+end_src

*** Elisp
**** Parinfer
#+name: init-parinfer-block
#+begin_src emacs-lisp
  (use-package parinfer
    :blackout t :straight t
    :general
    (:keymaps
     'emacs-lisp-mode-map
     "C-." #'parinfer-toggle-mode)
    :config
    (general-setq parinfer-extensions '(defaults pretty-parens smart-yank smart-tab lispy)))
#+end_src

**** Lispy
#+name: init-lispy-block
#+begin_src emacs-lisp
  (use-package lispy
    :blackout t :straight t)
#+end_src

**** Elisp-Slime-Nav
#+name: init-elisp-slime-nav-block
#+begin_src emacs-lisp
  (use-package elisp-slime-nav
    :blackout t :straight t
    :general
    (:keymaps 'emacs-lisp-mode-map
              "M-." #'emacs-slime-nav-find-elisp-thing-at-point))
#+end_src

*** R
#+name: init-R-block
#+begin_src emacs-lisp
  (use-package stan-mode
    :disabled t :straight t)
#+end_src

*** Julia
#+name: init-julia-block
#+begin_src emacs-lisp
  (use-package julia-mode
    :straight t)
#+end_src

*** Python
#+name: init-python-block
#+begin_src emacs-lisp
  (use-package python
    :straight nil
    :mode ("\\.py\\'")
    :gfhook 'djm/python-no-reindent-on-colon
    :config
    (defun djm/python-no-reindent-on-colon ()
      (setq electric-indent-chars (delq ?: electric-indent-chars)))

    (defun djm/python-use-correct-executables ()
      (let ((executable python-shell-interpreter))
        (save-excursion
          (save-match-data
            (when (or (looking-at "#!/usr/bin/env \\(python[^ \n]+\\)")
                      (looking-at "#!\\([^ \n]+/python[^ \n]+\\)"))
              (setq executable (substring-no-properties (match-string 1))))))
        (setq-local flycheck-python-pycompile-executable executable)
        (setq-local flycheck-python-pylint-executable "pylint")
        (setq-local flycheck-python-flake8-executable "flake8")
        (setq-local lsp-python-executbale-cmd executable)))

    (setq python-fill-docstring-style 'django
          python-shell-interpreter "python"
          python-indent-guess-indent-offset-verbose nil))

  (use-package pyenv-mode
    :blackout :straight t
    :ghook 'python-mode-hook
    :ghook ('projectile-switch-project-hook #'projectile-pyenv-mode-set)
    :config
    (defun projectile-pyenv-mode-set ()
      (let ((project (projectile-project-name)))
        (if (member project (pyenv-mode-versions))
            (pyenv-mode-set project)
          (pyenv-mode-unset)))))

  (use-package lsp-python-ms
    :demand t :straight t :after (:all lsp-clients python))

  (use-package anaconda-mode
    :straight t :after (python)
    :ghook 'python-mode-hook)

  (use-package blacken
    :straight t :after (python)
    :commands (blacken-buffer))

  (use-package py-yapf
    :straight t :after (python)
    :commands (py-yapf-buffer))
#+end_src

*** C++
#+name: init-c++-block
#+begin_src emacs-lisp
  (defconst moose-c-style
    '("Moose C++ Programming Style."
      (c-tab-always-indent . t)
      (c-basic-offset . 2)
      (c-hanging-braces-alist . ((substatement-open before after)))
      (c-offsets-alist . ((innamespace . 0)
                          (member-init-intro . 4)
                          (statement-block-into . +)
                          (substatement-open . 0)
                          (substatement-label . 0)
                          (label . 0)
                          (statement-cont . +)
                          (case-label . +)))))


  (c-add-style "MOOSE" moose-c-style)
  ;;(setf (map-elt c-default-style 'other) "MOOSE")

  (setq auto-mode-alist
        (append '(("\\.h$" . c++-mode)
                  ("\\.C$" . c++-mode)
                  ("\\.i$" . conf-mode)
                  ("tests" . conf-mode)
                  ("\\.cu". c++-mode))
                auto-mode-alist))

  (use-package c-mode
    :straight nil
    :config
    (c-toggle-auto-hungry-state)
    (c-toggle-auto-newline)
    (c-toggle-auto-state))
#+end_src

** Fun
*** SpeedType
#+name: init-speed-type-block
#+begin_src emacs-lisp
  (use-package speed-type
    :straight t)
#+end_src


** Theme & Aesthetics
*** Icons
**** VSCode-Icon
#+name: init-vscode-icon-block
#+begin_src emacs-lisp
  (use-package vscode-icon
    :straight t
    :commands (vscode-icon-for-file))
#+end_src

**** All-The-Icons
#+name: init-all-the-icons-block
#+begin_src emacs-lisp
  (use-package all-the-icons
    :straight t
    :commands (all-the-icons-wicon
               all-the-icons-faicon
               all-the-icons-insert
               all-the-icons-install-fonts
               all-the-icons-insert-wicon
               all-the-icons-insert-faicon
               all-the-icons-insert-octicon
               all-the-icons-insert-fileicon
               all-the-icons-insert-material
               all-the-icons-insert-alltheicon))
#+end_src

*** Themes
**** Modelines
***** Hide-Modeline
#+name: init-hide-modelines-block
#+begin_src emacs-lisp
  (use-package hide-mode-line
    :blackout "" :straight t
    :commands (hide-mode-line-mode
               hide-mode-line-reset
               global-hide-mode-line-mode))
#+end_src

***** Smart-Mode-Line
#+name: init-smart-mode-line-block
#+begin_src emacs-lisp
  (use-package smart-mode-line
    :straight t
    :ghook ('after-init-hook #'sml/setup)
    :init
    (general-setq display-time-format "%a %B %d %H:%M"
                  sml/vc-mode-show-backend t
                  sml/theme nil
                  sml/no-confirm-load-theme t))
#+end_src


**** UI Features
***** Beacon
#+name: init-beacon-block
#+begin_src emacs-lisp
  (use-package beacon
    :defer 30 :blackout "" :straight t
    :config
    (general-setq beacon-push-mark 10
                  beacon-color .60)
    (beacon-mode))
#+end_src

***** Default-Text-Scale
#+name: init-default-text-scale-block
#+begin_src emacs-lisp
  (use-package default-text-scale
    :straight t
    :general
    ("<C-s-up>" #'default-text-scale-increase
     "<C-s-down>" #'default-text-scale-decrease
     "<C-M-s-down>" #'default-text-scale-reset)
    :config (general-setq default-text-scale-amount 20))
#+end_src

***** Dimmer-Mode
#+name: init-dimmer-block
#+begin_src emacs-lisp
  (use-package dimmer
    :disabled t :blackout "" :straight t
    :commands (dimmer-mode)
    :custom
    (dimmer-fraction 0.33)
    (dimmer-exclusion-regexp-list '(".*minibuf.*"
                                    ".*which-key.*"
                                    ".*messages.*"
                                    ".*async.*"
                                    ".*warnings.*"
                                    ".*lv.*"
                                    ".*ilist.*"
                                    ".*posframe.*"
                                    ".*transient.*")))
#+end_src

***** Highlight-Escape-Sequences
#+name: init-highlight-escape-sequences-block
#+begin_src emacs-lisp
  (use-package highlight-escape-sequences
    :blackout t :straight t)
#+end_src

***** Highlight-Indent-Guides
#+name: init-highlight-indent-guides-block
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :blackout "" :straight t
    :ghook 'python-mode-hook 'yaml-mode-hook)
#+end_src

***** Highlight-Line [Built-In]
#+name: init-hl-line-block
#+begin_src emacs-lisp
  (use-package hl-line
    :blackout t :straight nil
    :commands (hl-line-mode global-hl-line-mode))
#+end_src

***** Highlight-Thing
#+name: init-highlight-thing-block
#+begin_src emacs-lisp
  (use-package highlight-thing
    :blackout t :straight t
    :ghook 'emacs-lisp-mode-hook)
#+end_src

***** Linum-Relative
#+name: init-linum-relative-block
#+begin_src emacs-lisp
  (use-package linum-relative
    :blackout t :straight t
    :general ("<f12>" #'linum-relative-toggle)
    :config
    (general-setq linum-relative-backend 'display-line-numbers-mode))
#+end_src

***** Page-Break-Lines
#+name: init-page-break-lines-block
#+begin_src emacs-lisp
  (use-package page-break-lines
    :blackout t :straight t
    :ghook djm--page-break-line-hooks
    :preface
    (defconst djm--page-break-line-hooks
      '(ibuffer-mode-hook
        text-mode-hook
        comint-mode-hook
        compilation-mode-hook
        help-mode-hook
        org-agenda-mode-hook)))
#+end_src

***** Rainbow-Delimiters
#+name: init-rainbow-delimiters-block
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :blackout t :straight t
    :ghook 'prog-mode-hook)
#+end_src
***** Rainbow-Mode
#+name: init-rainbow-mode-block
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :blackout t :straight t)
#+end_src
***** Shackle
#+name: init-shackle-block
#+begin_src emacs-lisp
  (use-package shackle
    :blackout "" :straight t
    :ghook 'after-init-hook)
#+end_src

***** Tab-Line [Built-In]
#+name: init-tab-line-block
#+begin_src emacs-lisp
  (use-package tab-line
    :straight nil)
#+end_src

***** Volatile-Highlights
#+name: init-volatile-highlights-block
#+begin_src emacs-lisp
  (use-package volatile-highlights
    :blackout t :straight t
    :ghook 'prog-mode-hook 'text-mode-hook)
#+end_src


***** Whitespace-Cleanup
#+name: init-whitespace-cleanup-block
#+begin_src emacs-lisp
  (use-package whitespace-cleanup-mode
    :blackout t :straight t
    :ghook 'after-init-hook)
#+end_src

**** Gruvbox Theme
#+name: init-gruvbox-theme-block
#+begin_src emacs-lisp
  (use-package gruvbox-theme
    :straight (:host github :repo "dylanjm/emacs-theme-gruvbox")
    :ghook ('after-init-hook #'djm/load-gruvbox-theme)
    :preface
    (defun djm/load-gruvbox-theme ()
      (load-theme 'gruvbox-dark-hard t)
      (set-face-attribute 'variable-pitch nil :inherit 'default
                          :family "Iosevka Aile" :weight 'ultra-light)
      (set-face-attribute 'font-lock-comment-face nil
                          :family "Iosevka SS09" :weight 'ultra-light :slant 'italic)
      (set-face-attribute 'fixed-pitch nil :inherit 'default
                          :family "Iosevka SS09" :weight 'ultra-light)

      ;; Test range: 🐷 ❤ ⊄ ∫ 𝛼 α 🜚 Ⓚ
      (set-fontset-font t nil (font-spec :family "Iosevka Term") nil nil)
      (dolist (script '(symbol mathematical))
        (set-fontset-font t script (font-spec :family "XITS Math" :weight 'normal) nil nil))

      ;; Define a font set stack for symbols, greek and math characters
      (dolist (script '(symbol greek))
        (set-fontset-font t script (font-spec :family "Symbola") nil 'append)
        (set-fontset-font t script (font-spec :family "Arial Unicode MS") nil 'append)
        (set-fontset-font t script (font-spec :family "DejaVu Sans Mono") nil 'prepend))

      ;; Colored Emoji on OS X, prefer over everything else!
      (set-fontset-font t 'unicode (font-spec :family "Symbola") nil nil)
      (set-fontset-font t 'unicode (font-spec :family "DejaVuSansMono Nerd Font") nil 'prepend)
      (set-fontset-font t 'unicode (font-spec :family "Apple Color Emoji") nil 'prepend)

      ;; Fallbacks for math and generic symbols
      (set-fontset-font t nil (font-spec :family "Apple Symbols") nil 'append)))
#+end_src

** Footer
#+name: init-footer-block
#+begin_src emacs-lisp
  (message "Init.el Complete")
  (provide 'init)
  ;;; init.el ends here
#+end_src


-------------------------------------------------------------------
* Conclusion
-------------------------------------------------------------------
* Citations

* COMMENT Local Variables
# Local Variables:
# time-stamp-line-limit: 2000
# time-stamp-format: "%Y-%m-%d %H:%M:%S"
# time-stamp-active: t
# time-stamp-start: "\/last updated\/:[ ]*"
# time-stamp-end: "$"
# firestarter: (djm/config-tangle)
# End:
