#+title: Dot-Z-Macs
#+author: Dylan McDowell
#+startup: content
#+property: header-args :tangle "~/dotz/editors/emacs.d/init.el"

/last updated/: 2019-11-11 16:01:18

* Table of Contents :TOC@3:noexport:
- [[#about-this-document][About This Document]]
  - [[#literate-programming-in-org][Literate Programming in Org]]
  -  [[#system-requirements][System Requirements]]
- [[#early-init][Early-Init]]
  - [[#header][Header]]
  - [[#performance-tweaks][Performance Tweaks]]
    - [[#garbage-collection][Garbage Collection]]
  - [[#preliminary-configuration][Preliminary Configuration]]
    - [[#pre-gui-optimization][Pre-Gui Optimization]]
    - [[#important-paths][Important Paths]]
  - [[#package-manager][Package Manager]]
    - [[#straight][Straight]]
  - [[#environment][Environment]]
    - [[#exec-path-from-shell][Exec Path From Shell]]
  - [[#no-littering][No-Littering]]
  - [[#required-packages][Required Packages]]
  - [[#footer][Footer]]
- [[#init][Init]]
  - [[#header-1][Header]]
  - [[#general-user-settings--tools][General User Settings & Tools]]
    - [[#personal-tweaks][Personal Tweaks]]
    - [[#defaults][Defaults]]
    - [[#frame--window][Frame & Window]]
    - [[#files-history--system-settings][Files, History, & System Settings]]
  - [[#theme--aesthetics][Theme & Aesthetics]]
    - [[#icons][Icons]]
    - [[#dashboard][Dashboard]]
    - [[#themes][Themes]]
    - [[#modelines][Modelines]]
    - [[#ui-features][UI Features]]
  - [[#utilities][Utilities]]
    - [[#prescient][Prescient]]
    - [[#key-chords][Key Chords]]
    - [[#posframe][Posframe]]
    - [[#terminal][Terminal]]
    - [[#projectile][Projectile]]
    - [[#autocomplete][Autocomplete]]
    - [[#ivycounselswiper][Ivy/Counsel/Swiper]]
  - [[#editing][Editing]]
    - [[#documentation][Documentation]]
    - [[#spell-check][Spell Check]]
    - [[#writeroom][Writeroom]]
    - [[#editing-tools][Editing Tools]]
    - [[#minor-modes][Minor Modes]]
  - [[#navigation][Navigation]]
    - [[#avy][Avy]]
    - [[#ace-window][Ace-Window]]
    - [[#windower][Windower]]
    - [[#windmove][Windmove]]
    - [[#dired][Dired]]
    - [[#ranger][Ranger]]
    - [[#anzu][Anzu]]
    - [[#ibuffer][iBuffer]]
  - [[#productivity][Productivity]]
    - [[#org][Org]]
    - [[#email][Email]]
    - [[#calendar][Calendar]]
    - [[#web-browsing][Web Browsing]]
  - [[#programming-support][Programming Support]]
    - [[#version-control][Version Control]]
    - [[#language-server-support][Language Server Support]]
    - [[#syntax--linting][Syntax & Linting]]
  - [[#languages][Languages]]
    - [[#markdown][Markdown]]
    - [[#yaml][YAML]]
    - [[#makefiles][Makefiles]]
    - [[#latex][LaTeX]]
    - [[#shell][Shell]]
    - [[#elisp][Elisp]]
    - [[#r][R]]
    - [[#julia][Julia]]
    - [[#ess][ESS]]
    - [[#python][Python]]
    - [[#c][C++]]
  - [[#footer-1][Footer]]
- [[#mini-init][Mini-Init]]
  - [[#header-2][Header]]
- [[#conclusion][Conclusion]]
- [[#citations][Citations]]

* About This Document
#+ATTR_HTML: width="100px"
#+ATTR_ORG: :width 1000
[[file:assets/config-preview.png]]

** Literate Programming in Org
This document is my current emacs config which contains the code for my =early-init.el= file and =init.el= file. You may be wondering how one file can contain code for two different configuration files. Through the power of =org-babel-tangle=, I am able to configure and document my entire emacs experience in a single Org file. There are several reasons to organize one's configuration this way. I hope these reasons become obvious as you browse through, but personally I find it much easier to document my choices using a markup language. This way I can store links and reference back to forum threads and other places when updating. I can also include pictures throughout and organize code-blocks with specific names to make navigation quick and painless. If you're interested in creating a similar setup, take a look at the raw-version of this file. There is important information contained in the header and throughout the file to make this work. Once you have a proper the proper settings, start adding src-blocks and then run =M-x org-babel-tangle <RET>=. Your config files will then be generated and Emacs will use those files when starting up. I have also written a hook that tangles this file everytime I save.

**  System Requirements
Currently this setup requires Emacs 27.0.50. There are several configurations throughout that won't work on previous versions.
-------------------------------------------------------------------

* Early-Init
:properties:
:header-args: :tangle "~/dotz/editors/emacs.d/early-init.el"
:end:
** Header
#+name: early-init-header-block
#+begin_src emacs-lisp
  ;;; early-init.el --- Early initialization. -*- lexical-binding: t; buffer-read-only: t-*-
  ;;;
  ;;; Commentary:
  ;;; Emacs `early-init.el' config by dylanjm
  ;;; This file was automatically generated by `org-babel-tangle'.
  ;;; Do not change this file.  Main config is located in emacs.d/dotemacs.org
  ;;;
  ;;; Code:
#+end_src

** Performance Tweaks
You'll see a similar configuration in other dotfiles online. By default, Emac's runs it garbage collector when the
*** Garbage Collection
#+name: early-init-gc-block
#+begin_src emacs-lisp
  (defvar default-file-name-handler-alist file-name-handler-alist)
  (defvar extended-gc-cons-threshold most-positive-fixnum)
  (defvar default-gc-cons-threshold 800000)

  (setq file-name-handler-alist nil
        gc-cons-percentage 0.8
        gc-cons-threshold extended-gc-cons-threshold
        inhibit-compacting-font-caches t
        package-enable-at-startup nil)

  (defun djm/gc-on-lose-focus ()
    (unless (frame-focus-state)
      (garbage-collect)))

  (defun djm/minibuffer-setup-hook ()
    (setq gc-cons-percentage .8)
    (setq gc-cons-threshold extended-gc-cons-threshold))

  (defun djm/minibuffer-exit-hook ()
    (setq gc-cons-percentage .1)
    (setq gc-cons-threshold default-gc-cons-threshold))

  (defun djm/return-vars-to-normal ()
    (setq file-name-handler-alist default-file-name-handler-alist)
    (setq gc-cons-threshold default-gc-cons-threshold)
    (setq gc-cons-percentage 0.1)
    (setq load-prefer-newer nil)
    (setq debug-on-error nil))

  (add-hook 'after-init-hook
            (lambda ()
              (djm/return-vars-to-normal)
              (if (boundp 'after-focus-change-function)
                  (add-function :after after-focus-change-function #'djm/gc-on-lose-focus))
              (add-hook 'minibuffer-setup-hook #'djm/minibuffer-setup-hook)
              (add-hook 'minibuffer-exit-hook #'djm/minibuffer-exit-hook)))
#+end_src

** Preliminary Configuration
*** Pre-Gui Optimization
#+name: early-init-pre-gui-block
#+begin_src emacs-lisp
  (setq-default auto-window-vscroll nil
                bidi-display-reordering 'left-to-right
                frame-inhibit-implied-resize t
                window-resize-pixelwise t
                frame-resize-pixelwise t)

  (setq initial-frame-alist
        '((window-divider-default-bottom-width . 1)
          (window-divider-default-right-width . 1)
          (window-divider-default-places . t)
          (width . 188)
          (height . 188)))

  (setq default-frame-alist
        '((ns-transparent-titlebar . t)
          (ns-appearance . dark)
          (vertical-scroll-bars)
          (tool-bar-lines . 0)
          (menu-bar-lines . 1)
          (right-fringe . 5)
          (left-fringe . 5)
          (font . "-*-Iosevka Nerd Font Mono-ultralight-normal-normal-*-22-*-*-*-m-0-iso10646-1")
          (inhibit-double-buffering . t)))

  (prefer-coding-system 'utf-8-unix)
  (set-language-environment "UTF-8")
  (set-keyboard-coding-system 'utf-8)
  (set-clipboard-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-selection-coding-system 'utf-8)
  (modify-coding-system-alist 'process "*" 'utf-8)
  (set-file-name-coding-system 'utf-8)

  (advice-add #'x-apply-session-resources :override #'ignore)
#+end_src

*** Important Paths
#+name: early-init-paths-block
#+begin_src emacs-lisp
  (defvar djm--straight-directory (expand-file-name "straight/" user-emacs-directory))
  (defvar djm--emacs-cache "~/.cache/emacs/")
  (defvar djm--org-agenda-directory "~/org/")
  (defvar djm--assets-directory (expand-file-name "assets/" user-emacs-directory))
  (defvar djm--emacs-etc-cache (expand-file-name "etc/" djm--emacs-cache))
  (defvar djm--emacs-var-cache (expand-file-name "var/" djm--emacs-cache))
  (defvar djm--custom-file (expand-file-name "custom.el" djm--emacs-etc-cache))
  (defvar djm--secret-file (expand-file-name "secret.el" djm--emacs-etc-cache))
  (defvar djm--yasnippet-dir (expand-file-name "snippets" user-emacs-directory))
  (defvar djm--auto-save-file-cache (expand-file-name "backups/" djm--emacs-var-cache))
  (defvar djm--personal-lisp-dir (expand-file-name "lisp/" user-emacs-directory))
#+end_src

** Package Manager
*** Straight
#+name: early-init-straight-block
#+begin_src emacs-lisp
  (eval-and-compile
    (defvar straight-recipes-gnu-elpa-use-mirror t)
    (defvar bootstrap-version 5)
    (defvar bootstrap-file
      (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory)))

  (with-no-warnings
    (setq straight-cache-autoloads t)
    (setq straight-recipe-overrides nil)
    (setq straight-check-for-modifications '(find-when-checking check-on-save))
    (setq straight-repository-branch "develop")
    (setq straight-use-package-by-default t))

  (with-no-warnings
    (setq use-package-verbose nil)
    (setq use-package-always-defer t)
    (setq use-package-enable-imenu-support t)
    (setq use-package-compute-statistics t))

  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))

  (load bootstrap-file nil 'nomessage)
  (straight-use-package 'use-package)
#+end_src

** Environment
*** Exec Path From Shell
#+name: early-init-environment-block
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :demand t
    :config
    (setq exec-path-from-shell-check-startup-files nil)
    (setq exec-path-from-shell-variables '("PATH" "MANPATH"))
    (setq exec-path-from-shell-arguments '("-l"))
    (exec-path-from-shell-initialize))
#+end_src

** No-Littering
#+name: early-init-no-littering-block
#+begin_src emacs-lisp
  (use-package no-littering
    :demand t
    :straight t
    :init
    (setq no-littering-etc-directory djm--emacs-etc-cache)
    (setq no-littering-var-directory djm--emacs-var-cache))
    #+end_src

** Required Packages

#+name: early-init-req-packages-block
#+begin_src emacs-lisp
  (use-package use-package-chords :demand t)
  (use-package use-package-hydra :demand t)
  (use-package el-patch :demand t)
  (use-package bind-key :demand t)
  (use-package general :demand t)
  (use-package dash)
  (use-package f)
  (use-package s)
  (use-package hydra :demand t)
  (use-package blackout :demand t :straight (:host github :repo "raxod502/blackout"))
  (use-package straight-x :straight nil)

  (use-package map :demand t :straight nil)
  (use-package gv :demand t :straight nil)
  (use-package org :straight (:repo "https://code.orgmode.org/bzg/org-mode.git") :ensure org-plus-contrib)
  (use-package gnutls
    :straight nil
    :config
    (setq gnutls-verify-error t)
    (setq gnutls-min-prime-bits 3072))

  (eval-when-compile
    (require 'el-patch))
#+end_src

** Footer

#+name: early-init-footer-block
#+begin_src emacs-lisp
  (provide 'early-init)
  ;;; early-init.el ends here
#+end_src

-------------------------------------------------------------------
* Init
** Header
#+name: init-header-block
#+begin_src emacs-lisp
  ;;; mini-init.el --- Emacs main configuration file -*- lexical-binding: t; buffer-read-only: t-*-
  ;;;
  ;;; Commentary:
  ;;; Emacs `init.el' config by dylanjm.
  ;;; This file was automatically generated by `org-babel-tangle'.
  ;;; Do not change this file.  Main config is located in emacs.d/dotemacs.org
  ;;;
  ;;; Code:
#+end_src

** General User Settings & Tools
*** Personal Tweaks
**** Personal Variables
#+name: init-personal-vars-block
#+begin_src emacs-lisp

#+end_src

**** Personal Functions
#+name: init-personal-funcs-block
#+begin_src emacs-lisp

#+end_src

**** Personal Hooks
#+name: init-personal-hooks-block
#+begin_src emacs-lisp
  (add-hook 'write-file-hooks 'time-stamp)
#+end_src

**** Personal Keybindings
#+name: init-personal-keybindings-block
#+begin_src emacs-lisp
  (bind-keys ("RET" . newline-and-indent)
             ("C-j" . newline-and-indent))
#+end_src

**** Personal Packages/Hacks
#+name: init-personal-packages-block
#+begin_src emacs-lisp

#+end_src

*** Defaults
**** Sane-Defaults
#+name: init-cus-start-block
#+begin_src emacs-lisp
  (use-package cus-start
    :straight nil
    :custom
    (ad-redefinition-action 'accept)
    (auto-save-list-file-prefix nil)
    (auto-save-list-file-name nil)
    (command-line-x-option-alist nil)
    (cursor-in-non-selected-windows nil)
    (cursor-type 'bar)
    (disabled-command-function nil)
    (display-time-default-load-average nil)
    (echo-keystrokes 0.02)
    (fast-but-imprecise-scrolling t)
    (fill-column 80)
    (frame-title-format '("%b - Zmacs"))
    (highlight-nonselected-windows nil)
    (icon-title-format frame-title-format)
    (initial-scratch-message "")
    (inhibit-startup-echo-area-message t)
    (inhibit-startup-screen t)
    (indent-tabs-mode nil)
    (indicate-buffer-boundaries nil)
    (indicate-empty-lines nil)
    (mode-line-in-non-selected-windows nil)
    (mouse-wheel-progressive-speed nil)
    (mouse-wheel-scroll-amount '(1))
    (ring-bell-function #'ignore)
    (scroll-conservatively most-positive-fixnum)
    (scroll-margin 2)
    (scroll-preserve-screen-position t)
    (scroll-step 1)
    (select-enable-clipboard t)
    (sentence-end-double-space nil)
    (split-width-threshold 160)
    (split-height-threshold nil)
    (tab-always-indent 'complete)
    (tab-width 4)
    (uniquify-buffer-name-style 'post-forward)
    (use-dialog-box nil)
    (use-file-dialog nil)
    (vc-follow-symlinks t)
    (visible-cursor nil)
    (window-combination-resize t)
    (x-stretch-cursor nil)
    (x-underline-at-descent-line t))
#+end_src

#+name: init-settings-block
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  (fset 'display-startup-echo-area-message 'ignore)
  (fset 'view-hello-file 'ignore)

  (blink-cursor-mode -1)
  (tooltip-mode -1)

  (global-set-key (kbd "C-g") 'minibuffer-keyboard-quit)
  (global-unset-key (kbd "C-z"))
#+end_src

**** Custom File
#+name: init-custom-load-block
#+begin_src emacs-lisp
  (setq custom-file djm--custom-file)
  (when (file-exists-p custom-file)
    (load custom-file :noerror))
#+end_src

**** Secret File
#+name: init-secret-load-block
#+begin_src emacs-lisp
  (when (file-exists-p djm--secret-file)
    (load djm--secret-file :noerror))
#+end_src

*** Frame & Window
#+name: init-frame-block
#+begin_src emacs-lisp
  (use-package pixel-scroll
    :straight nil
    :init (pixel-scroll-mode 1))

  (use-package ns-win
    :straight nil
    :init
    (setq mac-command-modifier 'meta
          mac-option-modifier 'meta
          mac-right-command-modifier 'super
          mac-right-option-modifier 'none
          mac-function-modifier 'hyper)

    (setq ns-pop-up-frames nil
          ns-use-native-fullscreen nil
          ns-use-thin-smoothing t))

  (use-package winner
    :config
    (winner-mode +1))

  (use-package shackle
    :blackout t
    :if (not (bound-and-true-p disable-pkg-shackle))
    :config
    (shackle-mode +1))
#+end_src

*** Files, History, & System Settings
#+name: init-files-block
#+begin_src emacs-lisp
  (use-package saveplace
    :straight nil
    :config (save-place-mode +1))

  (use-package savehist
    :straight nil
    :init
    (setq history-delete-duplicates t
          savehist-additional-variables '(kill-ring regexp-search-ring))
    :config
    (savehist-mode +1))

  (use-package files
    :straight nil
    :config
    (setq backup-by-copying t
          confirm-kill-processes nil
          create-lockfiles nil
          delete-old-versions t
          find-file-visit-truename t
          large-file-warning-threshold 10000000000
          require-final-newline t
          view-read-only t)
    (setq auto-save-file-name-transforms `((".*" ,djm--auto-save-file-cache t)))
    (setq backup-directory-alist `((".*" . ,djm--auto-save-file-cache)))
    (when-let* ((gls (executable-find "gls")))
      (setq insert-directory-program "gls")))

  (use-package autorevert
    :straight nil
    :config
    (setq auto-revert-verbose nil
          global-auto-revert-non-file-buffers t
          auto-revert-use-notify nil)
    (global-auto-revert-mode +1))

  (use-package recentf
    :demand t
    :straight nil
    :init
    (setq recentf-max-saved-items 2000
          recentf-max-menu-items 20
          recentf-auto-cleanup 'never)
    (setq recentf-exclude `(,djm--emacs-cache
                            ,djm--straight-directory
                            "\\.\\(?:gz\\|gif\\|svg\\|png\\|jpe?g\\)$"
                            "\\.?cache"
                            ".cask"
                            "url"
                            "COMMIT_EDITMSG\\'"
                            "bookmarks"
                            "^/tmp/"
                            "^/ssh:"
                            "\\.?ido\\.last$"
                            "\\.revive$"
                            "/TAGS$"
                            "^/var/folders/.+$"))
    :config
    (recentf-mode 1))

  (use-package auth-source
    :config
    (setq auth-sources '(no-littering-expand-etc-file-name "authinfo.gpg")))

  (use-package osx-trash
    :hook (after-init . (lambda () (osx-trash-setup)))
    :init
    (setq delete-by-moving-to-trash t))

  (use-package async
    :hook ((dired-mode . dired-async-mode))
    :preface
    (autoload 'aysnc-bytecomp-package-mode "async-bytecomp")
    (autoload 'dired-async-mode "dired-async.el" nil t)
    :config
    (setq async-bytecomp-allowed-packages '(all))
    (async-bytecomp-package-mode +1))

  (use-package compile
    :straight nil
    :preface
    (autoload 'ansi-color-apply-on-region "ansi-color")
    (defvar compilation-filter-start)
    (defun config-compilation-buffer ()
      (unless (derived-mode-p 'rg-mode)
        (let ((inhibit-read-only t))
          (ansi-color-apply-on-region compilation-filter-start (point)))))

    (defface compilation-base-face nil
      "Base Face for compilation highlights"
      :group 'config-basic-settings)
    :config
    (add-hook 'compilation-filter-hook #'config-compilation-buffer)
    (setq compilation-message-face 'compilation-base-face)
    (setq compilation-always-kill t
          compilation-ask-about-save nil
          compilation-scroll-output 'first-error))


  (use-package direnv
    :demand t
    :after (exec-path-from-shell)
    :config
    (add-to-list 'direnv-non-file-modes '(comint-mode
                                          term-mode
                                          vterm-mode
                                          compilation-mode))
    (direnv-mode +1))
#+end_src

** Theme & Aesthetics
*** Icons
#+name: init-icons-block
#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src

*** Dashboard
#+name: init-dashboard-block
#+begin_src emacs-lisp
  (use-package dashboard
    :disabled t
    :hook (dashboard-mode . hide-mode-line-mode)
    :init
    (dashboard-setup-startup-hook)
    :custom
    (dashboard-items '((recents . 3)
                       (projects . 3)
                       (bookmarks . 3)
                       (agenda . 5)))

    :config/el-patch
    (defun dashboard-get-banner-path (index)
      "Return the full path to banner with index INDEX."
      (concat (el-patch-swap dashboard-banners-directory djm--assets-directory) (format "%d.txt" index)))

    (setq dashboard-startup-banner 4)
    (setq dashboard-set-file-icons t)
    (setq dashboard-heading-icons t)
    (setq dashboard-page-separator "\n\n")
    (setq dashboard-center-content t)
    (setq dashboard-footer "djm emacs configuration 2019")
    (setq dashboard-footer-icon (all-the-icons-wicon "moon-4"
                                                     :height 1.05
                                                     :v-adjust -0.05
                                                     :face 'font-lock-keyword-face))
    (set-face-attribute 'dashboard-text-banner nil :foreground "#4e4e4e")
    (set-face-attribute 'dashboard-footer nil :foreground "#4e4e4e"))
#+end_src

*** Themes
**** Aesthetic Settings
#+name: init-ui-settings-block
#+begin_src emacs-lisp
  (use-package hl-line
    :straight nil
    :commands (hl-line-mode global-hl-line-mode))

  (use-package simple
    :straight nil
    :hook ((prog-mode markdown-mode conf-mode) . enable-trailing-whitespace)
    :preface
    (defun enable-trailing-whitespace ()
      "Show trailing spaces and delete on save."
      (setq show-trailing-whitespace t)
      (add-hook 'before-save-hook #'delete-trailing-whitespace nil t))
    :custom
    (blink-matching-paren t)
    (column-number-mode nil)
    (eval-expression-print-length nil)
    (eval-expression-print-level nil)
    (inhibit-point-motion-hooks t)
    (line-move-visual nil)
    (line-number-mode t)
    (next-line-add-newlines nil)
    (set-mark-command-repeat-pop t)
    (show-trailing-whitespace nil)
    (track-eol t))

  (use-package whitespace
    :straight nil
    :custom
    (whitespace-style '(face empty indentation::space tab trailing)))

  (use-package color
    :straight nil
    :functions (color-darken-name))

  (use-package beacon
    :blackout t
    :custom
    (beacon-push-mark 10)
    :config
    (beacon-mode +1))

  (defun lunaryorn-configure-fonts (frame)
    "Set up fonts for FRAME.
  Set the default font, and configure various overrides for
  symbols, emojis, greek letters, as well as fall backs for."
    ;; Additional fonts for special characters and fallbacks
    ;; Test range: 🐷 ❤ ⊄ ∫ 𝛼 α 🜚 Ⓚ
    (dolist (script '(symbol mathematical))
      (set-fontset-font t script (font-spec :family "XITS Math")
                        frame 'prepend))

    ;; Define a font set stack for symbols, greek and math characters
    (dolist (script '(symbol greek mathematical))
      (set-fontset-font t script (font-spec :family "DejaVuSansMono Nerd Font")
                        frame 'prepend)
      (set-fontset-font t script (font-spec :family "DejaVuSansMono Nerd Font")
                        frame 'prepend)
      (set-fontset-font t script (font-spec :family "DejaVuSansMono Nerd Font")
                        frame 'prepend))

    (when (eq system-type 'darwin)
      ;; Colored Emoji on OS X, prefer over everything else!
      (set-fontset-font t nil (font-spec :family "Apple Color Emoji")
                        frame 'prepend))

    ;; Fallbacks for math and generic symbols
    (set-fontset-font t nil (font-spec :family "Apple Symbols")
                      frame 'append))

  (when-let (frame (selected-frame))
    (lunaryorn-configure-fonts frame))
  (add-hook 'after-make-frame-functions #'lunaryorn-configure-fonts)
#+end_src

**** Gruvbox Theme
#+name: init-gruvbox-theme-block
#+begin_src emacs-lisp
  (use-package gruvbox-theme
    :demand t
    :straight (:host github :repo "dylanjm/emacs-theme-gruvbox")
    :config
    (load-theme 'gruvbox-dark-hard t))

  (set-face-attribute 'variable-pitch nil
                      :family "ETBembo"
                      :height 240
                      :weight 'light)

  (set-face-attribute 'fixed-pitch nil
                      :family "Iosevka Nerd Font Mono"
                      :slant 'normal
                      :weight 'ultra-light
                      :height 220
                      :width 'normal
                      :inherit nil)
#+end_src

**** Doom-Themes
#+name: init-doom-themes-block
#+begin_src emacs-lisp
  (use-package doom-themes
    :disabled t
    :demand t
    :config
    (load-theme 'doom-gruvbox t))
#+end_src

**** Emacs 27 Keyword Fix
#+name: init-extend-fix-block
#+begin_src emacs-lisp

#+end_src

*** Modelines
**** Hide Modeline
#+name: init-hide-modelines-block
#+begin_src emacs-lisp
  (use-package hide-mode-line
    :commands (hide-mode-line-mode
               hide-mode-line-reset
               global-hide-mode-line-mode))
#+end_src

**** Minions
#+name: init-minions-block
#+begin_src emacs-lisp
  (use-package minions
    :disabled t
    :commands (minions-mode)
    :custom
    (minions-mode-line-lighter "...")
    (minions-mode-line-delimiters '("" . ""))
    :config (minions-mode 1))
#+end_src

**** Doom-Modelines
#+name: init-doom-modeline-block
#+begin_src emacs-lisp
  (use-package doom-modeline
    :disabled t'
    :hook (after-init . doom-modeline-mode))
#+end_src

**** Custom Modeline
#+name: init-custom-modeline-block
#+begin_src emacs-lisp
  ;; (defun radian-mode-line-buffer-modified-status ()
  ;;   "Return a mode line construct indicating buffer modification status.
  ;; This is [*] if the buffer has been modified and whitespace
  ;; otherwise. (Non-file-visiting buffers are never considered to be
  ;; modified.) It is shown in the same color as the buffer name, i.e.
  ;; `mode-line-buffer-id'."
  ;;   (propertize
  ;;    (if (and (buffer-modified-p)
  ;;             (buffer-file-name))
  ;;        "[*]"
  ;;      "   ")
  ;;    'face 'mode-line-buffer-id))

  ;; ;; Normally the buffer name is right-padded with whitespace until it
  ;; ;; is at least 12 characters. This is a waste of space, so we
  ;; ;; eliminate the padding here. Check the docstrings for more
  ;; ;; information.
  ;; (setq-default mode-line-buffer-identification
  ;;               (propertized-buffer-identification "%b"))

  ;; ;; https://emacs.stackexchange.com/a/7542/12534
  ;; (defun radian--mode-line-align (left right)
  ;;   "Render a left/right aligned string for the mode line.
  ;; LEFT and RIGHT are strings, and the return value is a string that
  ;; displays them left- and right-aligned respectively, separated by
  ;; spaces."
  ;;   (let ((width (- (window-total-width) (length left))))
  ;;     (format (format "%%s%%%ds" width) left right)))

  ;; (defcustom radian-mode-line-left
  ;;   '(;; Show [*] if the buffer is modified.
  ;;     (:eval (radian-mode-line-buffer-modified-status))
  ;;     " "
  ;;     ;; Show the name of the current buffer.
  ;;     mode-line-buffer-identification
  ;;     "   "
  ;;     ;; Show the row and column of point.
  ;;     mode-line-position
  ;;     ;; Show the active major and minor modes.
  ;;     "  "
  ;;     mode-line-modes)
  ;;   "Composite mode line construct to be shown left-aligned."
  ;;   :type 'sexp)

  ;; (defcustom radian-mode-line-right nil
  ;;   "Composite mode line construct to be shown right-aligned."
  ;;   :type 'sexp)

  ;; ;; Actually reset the mode line format to show all the things we just
  ;; ;; defined.
  ;; (setq-default mode-line-format
  ;;               '(:eval (replace-regexp-in-string
  ;;                        "%" "%%"
  ;;                        (radian--mode-line-align
  ;;                         (format-mode-line radian-mode-line-left)
  ;;                         (format-mode-line radian-mode-line-right))
  ;;                        'fixedcase 'literal)))
#+end_src

*** UI Features
**** Tab-Line
#+name: init-tab-line-block
#+begin_src emacs-lisp
  (use-package tab-line
    :disabled t
    :straight nil
    :custom
    (tab-line-new-tab-choice nil)
    (tab-line-separator nil)
    (tab-line-close-button-show nil)
    :init
    (global-tab-line-mode))
#+end_src

**** Page Break Lines

#+name: init-page-break-lines-block
#+begin_src emacs-lisp
  (use-package page-break-lines
    :blackout t
    :hook (after-init . global-page-break-lines-mode)
    :config
    (setq page-break-lines-modes '(prog-mode
                                   ibuffer-mode
                                   text-mode
                                   comint-mode
                                   compilation-mode
                                   help-mode
                                   org-agenda-mode)))
#+end_src

**** Dimmer Mode
#+name: init-dimmer-block
#+begin_src emacs-lisp
  (use-package dimmer
    :disabled t
    :commands (dimmer-mode)
    :custom
    (dimmer-fraction 0.33)
    (dimmer-exclusion-regexp-list '(".*minibuf.*"
                                    ".*which-key.*"
                                    ".*messages.*"
                                    ".*async.*"
                                    ".*warnings.*"
                                    ".*lv.*"
                                    ".*ilist.*"
                                    ".*posframe.*"
                                    ".*transient.*")))
#+end_src

** Utilities
*** Prescient
#+name: init-prescient-block
#+begin_src emacs-lisp
  (use-package prescient
    :config (prescient-persist-mode +1))
#+end_src

*** Key Chords
#+name: init-key-chords-block
#+begin_src emacs-lisp
  (use-package key-chord
    :custom (key-chord-two-keys-delay 0.05)
    :config (key-chord-mode 1))
#+end_src

*** Posframe
#+name: init-posframe-block
#+begin_src emacs-lisp
  (use-package posframe
    :custom
    (posframe-arghandler #'hemacs-posframe-arghandler)
    :config
    (defun hemacs-posframe-arghandler (posframe-buffer arg-name value)
      (let ((info '(:internal-border-width 12 :min-width 80)))
        (or (plist-get info arg-name) value))))
#+end_src

*** Terminal
#+name: init-terminal-block
#+begin_src emacs-lisp
  (use-package term
    :straight nil
    :hook (term-mode . (lambda () (hl-line-mode -1))))

  (use-package eterm-256color
    :hook (vterm-mode . eterm-256color-mode))

  (use-package vterm
    :config
    (setq vterm-term-environment-variable "eterm-color"))

  (use-package vterm-toggle
    :straight (:host github :repo "jixiuf/vterm-toggle")
    :bind (("C-c C-t" . vterm-toggle)
           ("C-c C-y" . term-toggle-cd)))
#+end_src

*** Projectile
#+name: init-projectile-block
#+begin_src emacs-lisp
  (use-package projectile
    :blackout t
    :custom
    (projectile-completion-system 'ivy)
    (projectile-enable-caching t)
    (projectile-switch-project-action 'projectile-dired)
    (projectile-verbose nil)
    :config
    (projectile-mode 1))
#+end_src

*** Autocomplete
**** Abbrev
#+name: init-abbrev-block
#+begin_src emacs-lisp
  (use-package abbrev
    :straight nil)
#+end_src

**** Hippie Expand
#+name: init-hippie-block
#+begin_src emacs-lisp
 (use-package hippie-exp
    :bind (([remap dabbrev-expand] . hippie-expand))
    :config
    (setq hippie-expand-try-functions-list
          '(try-expand-dabbrev
            try-expand-dabbrev-all-buffers
            try-expand-dabbrev-from-kill
            try-complete-file-name-partially
            try-complete-file-name
            try-expand-all-abbrevs
            try-expand-list
            try-complete-lisp-symbol-partially
            try-complete-lisp-symbol)))
#+end_src

**** Company
#+name: init-company-block
#+begin_src emacs-lisp
  (use-package company
    :defer 0.5
    :blackout t
    :bind (:map company-active-map
                ("RET" . nil)
                ([return] . nil)
                ("TAB" . company-complete-selection)
                ([tab] . company-complete-selection)
                ("C-f" . company-complete-common)
                ("C-n" . company-select-next)
                ("C-p" . company-select-previous))
    :config
    (setq company-frontends '(company-pseudo-tooltip-frontend))
    (setq company-auto-complete-chars nil
          company-async-timeout 10
          company-dabbrev-downcase nil
          company-dabbrev-ignore-case nil
          company-dabbrev-other-buffers nil
          company-idle-delay 0.15
          company-minimum-prefix-length 2
          company-require-match 'never
          company-show-numbers t
          company-tooltip-align-annotations t)
    (global-company-mode +1))

  (use-package company-prescient
    :demand t
    :blackout t
    :after (company)
    :config (company-prescient-mode +1))

  (use-package company-math
    :after (company)
    :config
    (add-to-list 'company-backends 'company-math-symbols-unicode)
    (add-to-list 'company-backends 'company-math-symbols-latex))

  (use-package company-lsp
    :after (lsp-mode)
    :config (setq company-lsp-cache-canidates 'auto))

  (use-package company-anaconda
    :after (anaconda-mode)
    :config (add-to-list 'company-backends 'company-anaconda))

  (use-package company-box
    :disabled t
    :after (company)
    :config (company-box-mode 1))
#+end_src

**** Yasnippet
#+name: init-yasnippet-block
#+begin_src emacs-lisp
  (use-package yasnippet
    :blackout yas-global-mode
    :blackout yas-minor-mode
    :hook ((prog-mode org-mode text-mode) . yas-minor-mode)
    :bind ("C-;" . yas-expand)
    :commands  (yas-global-mode
                yas-new-snippet
                yas-insert-snippet
                yas-next-field
                yas-prev-field
                yas-visit-snippet-file)
    :custom
    (yas-verbosity 1)
    (yas-wrap-around-region t)
    (yas-prompt-functions '(yas-completing-prompt))
    (yas-snippet-dirs '(djm--yasnippet-dir))
    :config
    (use-package yasnippet-snippets
      :blackout t
      :config
      (yas-reload-all))

    (yas-global-mode +1))

  (use-package yas-funcs
    :straight nil
    :after yasnippet)

  (use-package ivy-yasnippet
    :after (yasnippet))
#+end_src

**** Auto-Insert
#+name: init-autoinsert-block
#+begin_src emacs-lisp
  (defconst autoinsert-funcs-el-gnu-license "
  \;; This program is free software; you can redistribute it and/or modify
  \;; it under the terms of the GNU General Public License as published by
  \;; the Free Software Foundation, either version 3 of the License, or
  \;; (at your option) any later version.
  \;; This program is distributed in the hope that it will be useful,
  \;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  \;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  \;; GNU General Public License for more details.
  \;; You should have received a copy of the GNU General Public License
  \;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
  ")

  (defconst autoinsert-funcs-el-form
    '((emacs-lisp-mode . "Emacs Lisp")
      nil
      "\;;; " (file-name-nondirectory (buffer-file-name)) " --- <enter description here>  "
      "-*- lexical-binding: t; -*-" '(setq lexical-binding t) \n
      \n
      ";; Copyright (C) " (format-time-string "%Y") "  "
      (getenv "ORGANIZATION") | user-full-name                \n
      \n
      ";; Author: " user-full-name " <" user-mail-address ">" \n
      autoinsert-funcs-el-gnu-license                            \n
      ";;; Commentary:"                                       \n \n
      ";;; Code:"                                             \n \n
      _                                                       \n \n
      "\(provide '" (file-name-base) ")"                      \n \n
      "\;;; " (file-name-nondirectory (buffer-file-name)) " ends here" \n))

  ;;; Shell-scripts

  (defun autoinsert-funcs--sh-template-string ()
    (let ((program
           (if (f-ext? (buffer-name) "zsh")
               "zsh"
             "bash")))
      (yas-expand-snippet (format "#!/usr/bin/env %s
  $0
  " program))))

  (defconst autoinsert-funcs-sh-form
    '((sh-mode . "Shell Script") . autoinsert-funcs--sh-template-string))

  (use-package autoinsert
    :straight nil
    :preface
    (defvar auto-insert-alist nil)
    :hook (find-file . auto-insert)
    :config
    (setq auto-insert-query (list autoinsert-funcs-sh-form
                                  autoinsert-funcs-el-form)))
#+end_src

*** Ivy/Counsel/Swiper
#+name: init-ivy-block
#+begin_src emacs-lisp
  (use-package ivy
    :blackout t
    :hook (after-init . ivy-mode)
    :bind (([remap ido-switch-buffer] . ivy-switch-buffer)
           ("C-x B" . ivy-switch-buffer-other-window)
           ("C-c C-r" . ivy-resume)
           ("C-c v p" . ivy-push-view)
           ("C-c v o" . ivy-pop-view)
           ("C-c v ." . ivy-switch-view)
           ([remap kill-ring-save] . ivy-kill-ring-save)
           :map ivy-minibuffer-map
           ("<tab>" . ivy-alt-done)
           ("C-w" . ivy-yank-word)
           ("C-o" . ivy-occur)
           (:map ivy-switch-buffer-map
                 ([remap kill-buffer] . ivy-switch-buffer-kill)))
    :custom
    (enable-recursive-minibuffers t)
    (ivy-dynamic-exhibit-delay-ms 250)
    (ivy-use-selectable-prompt t)
    (ivy-initial-inputs-alist nil)
    (ivy-case-fold-search-default t)
    (ivy-use-virtual-buffers t)
    (ivy-virtual-abbreviate 'name)
    (ivy-count-format "")
    (ivy-flx-limit 2000)
    :config
    (ivy-set-actions t '(("I" insert "insert")))
    (ivy-set-occur 'ivy-switch-buffer 'ivy-switch-buffer-occur))

  (use-package counsel
    :blackout t
    :hook (ivy-mode . counsel-mode)
    :bind ((:map counsel-mode-map
                 ([remap dired] . counsel-dired)
                 ([remap execute-extended-command] . counsel-M-x)
                 ([remap find-file] . counsel-find-file)
                 ("C-x C-d" . counsel-dired-jump)
                 ("C-x C-i" . counsel-imenu)
                 ("C-x C-l" . counsel-find-library)
                 ("C-x C-r" . counsel-recentf)
                 ("C-x C-v" . counsel-set-variable)
                 ("C-x C-u" . counsel-unicode-char)
                 ("C-x j" . counsel-mark-ring)
                 ("C-c g" . counsel-grep)
                 ("C-c h" . counsel-command-history)
                 ("C-c j" . counsel-git)
                 ("C-c j" . counsel-git-grep)
                 ("C-c r" . counsel-rg)
                 ("C-c z" . counsel-fzf)
                 ("C-c c w" . counsel-colors-web)
                 ("C-h F" . counsel-describe-face)
                 ("C-h f" . counsel-describe-function)
                 ("C-h v" . counsel-describe-variable)))
    :custom
    (counsel-find-file-at-point t)
    :config
    (use-package ivy-hydra)
    (use-package ivy-prescient
      :demand t
      :after (counsel)
      :config (ivy-prescient-mode +1))

    (setq counsel-grep-base-command
          "rg -S --no-heading --line-number --color never '%s' %s"))

  (use-package swiper
    :demand t
    :after (counsel)
    :bind  (("C-s" . swiper)
            ("C-c c s" . swiper-isearch)
            ("C-c c r" . swiper-isearch-backward)
            ("C-S-s" . swiper-all)
            :map swiper-map
            ("M-%" . swiper-query-replace)
            ("M-s" . swiper-isearch-toggle)
            :map isearch-mode-map
            ("M-s" . swiper-isearch-toggle))
    :config
    (setq ivy-re-builders-alist '((t . ivy-prescient-re-builder)
                                  (t . ivy--regex-fuzzy)
                                  (swiper . ivy--regex-plus)
                                  (swiper-isearch . ivy--regex-plus)
                                  (swiper-query-replace . ivy--regex-plus)
                                  (swiper-all . ivy--regex-plus))))

  (use-package counsel-fd
    :straight (:host github :repo "yqrashawn/counsel-fd"))

  (use-package amx
    :after ivy)

  (use-package ivy-posframe
    :blackout t
    :hook (ivy-mode . ivy-posframe-mode)
    :config
    (setq ivy-posframe-style 'frame-center)
    (setq ivy-posframe-hide-minibuffer t)
    (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display)
                                                 (swiper . nil)
                                                 (swiper-isearch . nil)
                                                 (swiper-isearch-backward . nil)
                                                 (swiper-all . nil)
                                                 (swiper-query-replace . nil)
                                                 (swiper-isearch-toggle . nil)))
    (set-face-attribute 'ivy-posframe nil
                        :background (color-darken-name
                                     (face-attribute 'default :background) 3)))

  (use-package ivy-rich
    :config
    (setq ivy-rich-parse-remote-buffer nil
          ivy-rich-path-style 'abbrev)
    (ivy-rich-set-display-transformer))
#+end_src

** Editing
*** Documentation
#+name: init-help-block
#+begin_src emacs-lisp
  (use-package man)

  (use-package help
    :straight nil
    :config
    (setq help-window-select t)
    (advice-add 'help-window-display-message :override #'ignore))

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . helpful-callable)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))

  (use-package help-fns+
    :straight (:host github :repo "emacsmirror/help-fns-plus")
    :bind ("C-h M-k" . describe-keymap))

  (use-package discover-my-major
    :bind ("C-h C-m" . discover-my-major))

  (use-package devdocs)

  (use-package eldoc
    :custom
    (eldoc-idle-delay 2)
    (eldoc-echo-area-use-multiline-p nil))

  (use-package which-key
    :custom (which-key-idle-delay 0.5)
    :config (which-key-mode))
#+end_src

*** Spell Check

#+name: init-ispell-block
#+begin_src emacs-lisp
  (use-package ispell
    :straight nil
    :custom
    (ispell-dictionary "en_US")
    (ispell-program-name (executable-find "hunspell"))
    (ispell-really-hunspell t)
    (ispell-silently-savep t))
#+end_src

*** Writeroom
#+name: init-writeroom-block
#+begin_src emacs-lisp
  (use-package writeroom-mode
    :commands (writeroom-mode))
#+end_src

*** Editing Tools
#+name: init-edit-utils-block
#+begin_src emacs-lisp
  (use-package ws-butler
    :blackout t
    :hook (after-init . (lambda () (ws-butler-global-mode +1)))
    :commands (ws-butler-global-mode))

  (use-package align
    :straight nil
    :general ("C-x a a" #'align-regexp))

  (use-package find-lisp
    :straight nil)

  (use-package multiple-cursors
    :disabled t
    :bind (("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)))

  (use-package zop-to-char
    :bind (("M-z" . zop-to-char)
           ("M-z" . zop-up-to-char)))
#+end_src

*** Minor Modes
#+name: init-edit-block
#+begin_src emacs-lisp
  (use-package editorconfig
    :straight t
    :config
    (editorconfig-mode 1))

  (use-package default-text-scale
    :commands (default-text-scale-increase
                default-text-scale-decrease
                default-text-scale-reset)
    :bind (("C-x t <up>" . default-text-scale-increase)
           ("C-x t <down>" . default-text-scale-decrease)
           ("C-x t ]". default-text-scale-reset))
    :custom (default-text-scale-amount 20))

  (use-package delsel
    :straight nil
    :init (delete-selection-mode 1))

  (use-package undo-tree
    :blackout t
    :hook (after-init . global-undo-tree-mode)
    :custom
    (undo-tree-save-history t)
    (undo-tree-visualizer-timestamps t)
    (undo-tree-fisualizer-diff t))

  (use-package aggressive-indent
    :commands (aggressive-indent-mode))

  (use-package hungry-delete
    :commands (hungry-delete-mode))

  (use-package prog-mode
    :straight nil
    :hook ((prog-mode . show-paren-mode)
           (prog-mode . display-fill-column-indicator-mode))
    :config
    (global-prettify-symbols-mode +1))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package volatile-highlights
    :hook ((prog-mode text-mode) . volatile-highlights-mode))


  (use-package highlight-thing
    :hook ((prog-mode) . highlight-thing-mode))

  (use-package deadgrep
    :init
    (defalias 'rg #'deadgrep))

  (use-package expand-region
    :bind ("C-=" . er/expand-region))

  (use-package format-all)

  (use-package dumb-jump)

  (use-package smartparens
    :blackout t
    :hook (after-init . smartparens-global-mode))
#+end_src

** Navigation
*** Avy
#+name: init-nav-utils-block
#+begin_src emacs-lisp
  (use-package avy
    :chords
    ("jk" . avy-pop-mark)
    ("jl" . avy-goto-line)
    :config
    (setq avy-keys '(?a ?s ?d ?e ?f ?g ?r ?v ?h ?j ?k ?l ?n ?m ?u)
          avy-background t
          avy-all-windows t
          avy-style 'at-full
          avy-case-fold-search nil)
    (avy-setup-default))
#+end_src

*** Ace-Window
#+name: init-ace-window-block
#+begin_src emacs-lisp
    (use-package ace-window
      :bind (("C-x o" . ace-window))
      :config
      (setq aw-keys '(?a ?s ?d ?f ?j ?k ?l)
            aw-dispatch-always nil
            aw-dispatch-alist '((?x aw-delete-window     "Ace - Delete Window")
                                (?c aw-swap-window       "Ace - Swap Window")
                                (?n aw-flip-window)
                                (?h aw-split-window-vert "Ace - Split Vert Window")
                                (?v aw-split-window-horz "Ace - Split Horz Window")
                                (?m delete-other-windows "Ace - Maximize Window")
                                (?g delete-other-windows)
                                (?b balance-windows)
                                (?u winner-undo)
                                (?r winner-redo))))
#+end_src

#+name: init-ace-link-block
#+begin_src emacs-lisp
  (use-package ace-link)
#+end_src

*** Windower
#+name: init-windower-block
#+begin_src emacs-lisp
  (use-package windower
    :straight (:repo "https://gitlab.com/ambrevar/emacs-windower")
    :bind (("C-c w o" . windower-switch-to-last-buffer)
           ("C-c w t" . windower-toggle-split)))
#+end_src

*** Windmove
#+name: init-windmove-block
#+begin_src emacs-lisp
  (use-package windmove
    :bind (("C-c w j" . windmove-left)
           ("C-c w l" . windmove-right)
           ("C-c w n" . windmove-down)
           ("C-c w u" . windmove-up)))
#+end_src

*** Dired
#+name: init-dired-block
#+begin_src emacs-lisp
  (use-package dired
    :blackout t
    :straight nil
    :functions (dired wdired-change-to-wdired-mode)
    :bind (:map dired-mode-map
                ("C-c C-e" . wdired-change-to-wdired-mode))
    :general
    (:states 'normal :keymaps 'dired-mode-map "$" #'end-of-line)
    :custom
    (dired-auto-revert-buffer t)
    (dired-dwim-target t)
    (dired-use-ls-dired t)
    (dired-ls-F-marks-symlinks t)
    (dired-hide-details-hide-symlink-targets nil)
    (dired-listing-switches "-alhv --group-directories-first --time-style iso")
    (dired-recursive-deletes 'always)
    (dired-recursive-copies 'always)
    :config
    (setq dired-deletion-confirmer '(lambda (x) t))) ;; Don't confirm deleting files

  (use-package dired-aux
    :straight nil)

  (use-package dired-x
    :straight nil
    :functions (dired-guess-default)
    :custom
    (dired-omit-verbose 1)
    (dired-cleanup-buffers-too t))

  (use-package diredfl
    :after (dired)
    :hook (dired-mode . diredfl-global-mode))

  (use-package wdired
    :straight nil)

  (use-package dired-hacks-utils)
  (use-package dired-filter)
  (use-package dired-rainbow)
  (use-package dired-narrow)
  (use-package dired-collapse)

  (use-package dired-ranger
    :bind (:map dired-mode-map
                ("C-c C-c" . dired-ranger-copy)
                ("C-c C-m" . dired-ranger-move)
                ("C-c C-p" . dired-ranger-paste)
                ("C-c C-b" . dired-ranger-bookmark)
                ("C-c b v" . dired-ranger-bookmark-visit)))

  (use-package dired-git-info
    :bind (:map dired-mode-map
                (":" . dired-git-info-mode)))

  (use-package dired-rsync
    :bind (:map dired-mode-map
                ("C-c C-r" . dired-rsync)))

  (use-package dired-subtree
    :bind (:map dired-mode-map
                ("TAB" . dired-subtree-insert)
                (";" . dired-subtree-remove)))

  (use-package fd-dired
    :after (dired))

  (use-package dired-sidebar
    :bind ("M-\\" . dired-sidebar-toggle-sidebar)
    :commands (dired-sidebar-toggle-sidebar)
    :config
    (use-package vscode-icon)
    (setq dired-sidebar-subtree-line-prefix "__")
    (setq dired-sidebar-theme 'vscode)
    (setq dired-sidebar-use-magit-integration t)
    (setq dired-sidebar-use-term-integration t)
    (setq dired-sidebar-use-term-integration t))
#+end_src

*** Ranger
#+name: init-ranger-block
#+begin_src emacs-lisp
  (use-package ranger
    :disabled t)
#+end_src

*** Anzu
#+name: init-anzu-block
#+begin_src emacs-lisp
  (use-package anzu)
#+end_src

*** iBuffer
#+name: init-ibuffer-block
#+begin_src emacs-lisp
  (use-package ibuffer
    :bind (([remap list-buffers] . ibuffer))
    :custom
    (ibuffer-expert t)
    (ibuffer-show-empty-filter-groups nil)
    (ibuffer-formats '((mark modified " " (mode 1 1) " " (name 25 25 :left :elide) " " filename-and-process)))
    (ibuffer-never-show-predicates (list (rx (or "*magit-"
                                                 "*git-auto-push*"
                                                 "*backtrace*"
                                                 "*new*"
                                                 "*org*"
                                                 "*flycheck error messages*"
                                                 "*help*")))))

  (use-package ibuf-ext
    :straight nil
    :hook (ibuffer-mode . ibuffer-auto-mode)
    :functions (ibuffer-remove-alist
                ibuffer-remove-duplicates
                ibuffer-split-list)
    :custom (ibuffer-show-empty-filter-groups nil))

  (use-package ibuffer-projectile
    :commands (ibuffer-projectile-set-filter-groups)
    :functions (ibuffer-do-sort-by-alphabetic)
    :preface
    (defun config-ibuffer--setup-buffer ()
      (ibuffer-projectile-set-filter-groups)
      (add-to-list 'ibuffer-filter-groups '("Dired" (mode . dired-mode)))
      (add-to-list 'ibuffer-filter-groups '("System" (predicate . (-contains? '("*Messages*" "*scratch*" "*straight-process*" "*direnv*" "*dashboard*") (buffer-name)))))
      (add-to-list 'ibuffer-filter-groups '("Shells" (mode . eshell-mode)))
      (unless (eq ibuffer-sorting-mode 'alphabetic)
        (ibuffer-do-sort-by-alphabetic))
      (when (bound-and-true-p page-break-lines-mode)
        (page-break-lines--update-display-tables)))
    :init
    (add-hook 'ibuffer-hook #'config-ibuffer--setup-buffer)
    :custom
    (ibuffer-projectile-prefix ""))

  (use-package ibuffer-sidebar
    :straight (:repo "https://github.com/jojojames/ibuffer-sidebar")
    :bind (("M-]" . ibuffer-sidebar-toggle-sidebar))
    :config
    (setq ibuffer-sidebar-use-custom-font t)
    (setq ibuffer-sidebar-face `(:family "Iosevka Nerd Font" :height 180)))
#+end_src

** Productivity
*** Org
#+name: init-org-hydra-block
#+begin_src emacs-lisp
  (use-package org-hydras
    :straight nil
    :commands (org-babel/body))
#+end_src

#+name: init-org-block
#+begin_src emacs-lisp
  (use-package org-plus-contrib
    :straight nil)

  (use-package org
    :straight nil
    :general
    ("C-c a" #'org-agenda
     "C-c c c" #'org-capture
     "C-c p" #'org-pomodoro
     "C-c s" #'org-search-view
     "C-c t" #'org-todo-list
     "C-c /" #'org-tags-view)
    :hook (org-mode . djm/config-org-mode)
    :hook (after-save . djm/tangle-init-org-file-on-save)
    :preface
    (defun djm/tangle-init-org-file-on-save ()
      (when (string= buffer-file-name
                     (file-truename "~/.emacs.d/dotemacs.org"))
        (org-babel-tangle)))

    (defun djm/config-org-mode ()
      (push '("TODO"       . ?▲)  prettify-symbols-alist)
      (push '("NEXT"       . ?→)  prettify-symbols-alist)
      (push '("DONE"       . ?✓)  prettify-symbols-alist)
      (push '("CANCELLED"  . ?✘)  prettify-symbols-alist)
      (push '("QUESTION"   . ??)  prettify-symbols-alist)
      (push '("SCHEDULED"  . ?🗓) prettify-symbols-alist)
      (push '("DEADLINE"   . ?❗) prettify-symbols-alist)
      (push '("CLOCK"      . ?⏰) prettify-symbols-alist)
      (setq-local line-spacing 0.1)
      (variable-pitch-mode +1)
      (visual-line-mode +1)
      (setq-local left-margin-width 2)
      (setq-local right-margin-width 2)
      (set-window-buffer nil (current-buffer)))

    :custom
    (org-catch-invisible-edits 'smart)
    (org-confirm-babel-evaluate nil)
    (org-cycle-separator-lines 0)
    (org-default-notes-file "~/org/inbox.org")
    (org-default-priority ?B)
    (org-directory "~/org/")
    (org-enforce-todo-dependencies t)
    (org-expiry-inactive-timestamps t)
    (org-export-coding-system 'utf-8)
    (org-file-apps '((auto-mode . emacs)
                     ("\\.x?html?\\'" . "firefox %s")
                     ("\\.pdf\\'" . "open %s")))
    (org-fontify-done-headline t)
    (org-fontify-whole-heading-line t)
    (org-fontity-quote-and-verse-blocks t)
    (org-goto-max-level 10)
    (org-hide-emphasis-markers t)
    (org-highlight-sparse-tree-matches nil)
    (org-html-html5-fancy t)
    (org-html-postamble nil)
    (org-image-actual-width 500)
    (org-imenu-depth 4)
    (org-indirect-buffer-display 'current-window)
    (org-insert-heading-respect-content t)
    (org-lowest-priority ?C)
    (org-modules '(org-habit org-info org-tempo org-archive))
    (org-outline-path-complete-in-steps nil)
    (org-pretty-entities t)
    (org-refile-allow-creating-parent-nodes 'confirm)
    (org-refile-use-outline-path 'file)
    (org-return-follows-link t)
    (org-show-notification-handler 'message)
    (org-special-ctrl-a/e t)
    (org-special-ctrl-k t)
    (org-startup-folded 'content)
    (org-startup-indented t)
    (org-startup-with-inline-images t)
    (org-structure-template-alist '(("a" . "export ascii")
                                    ("c" . "center")
                                    ("C" . "comment")
                                    ("e" . "example")
                                    ("E" . "export")
                                    ("h" . "export html")
                                    ("l" . "export latex")
                                    ("q" . "quote")
                                    ("s" . "src")
                                    ("el" . "src emacs-lisp")
                                    ("d" . "definition")
                                    ("t" . "theorem")))
    (org-use-fast-todo-selection t)
    (org-use-speed-commands t)
    (org-yank-adjusted-subtrees t)
    :config
    (add-to-list 'org-global-properties
                 '("Effort_ALL" . "0:05 0:15 0:30 1:00 2:00 3:00 4:00")))
#+end_src

#+name: init-org-pomodoro-block
#+begin_src emacs-lisp
  (use-package org-pomodoro)
#+end_src

#+name: init-org-bullets-block
#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))
#+end_src

#+name: init-org-agenda-block
#+begin_src emacs-lisp
  (use-package org-agenda
    :straight nil
    :custom
    (org-agenda-compact-blocks t)
    (org-agenda-dim-blocked-tasks nil)
    (org-agenda-files '("~/org/inbox.org"
                        "~/org/projects.org"
                        "~/org/someday.org"
                        "~/org/next.org"))
    (org-agenda-inhibit-startup nil)
    (org-agenda-show-all-dates t)
    (org-agenda-show-future-repeats nil)
    (org-agenda-skip-deadline-if-done t)
    (org-agenda-skip-scheduled-if-done t)
    (org-agenda-skip-timestamp-if-done t)
    (org-agenda-start-on-weekday 1)
    (org-agenda-todo-ignore-with-date nil)
    (org-agenda-window-setup 'current-window)
    (org-log-done 'time)
    (org-log-into-drawer t)
    (org-log-state-notes-insert-after-drawers nil)
    (org-refile-targets '((nil :maxlevel . 9)
                          (org-agenda-files :maxlevel . 9)))
    (org-tag-alist '(("@errand" . ?e)
                     ("@office" . ?o)
                     ("@home" . ?h)
                     ("@school" . ?s)
                     (:newline)
                     ("WAITING" . ?w)
                     ("HOLD" . ?H)
                     ("CANCELLED" . ?c)
                     ("REFILE" . ?r)))
    (org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                         (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING")))
    (org-todo-state-tags-triggers '(("CANCELLED" ("CANCELLED" . t))
                                    ("WAITING" ("WAITING" . t))
                                    ("HOLD" ("WAITING") ("HOLD" . t))
                                    (done ("WAITING") ("HOLD"))
                                    ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                                    ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                                    ("DONE" ("WAITING") ("CANCELLED") ("HOLD"))))
    :config
    (unbind-key "C-c [")
    (unbind-key "C-c ]")

    (setq org-capture-templates '(("t" "todo [inbox]" entry (file "~/org/inbox.org")
                                   "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
                                  ("r" "respond [inbox]" entry (file "~/org/inbox.org")
                                   "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t)
                                  ("n" "note [inbox]" entry (file "~/org/inbox.org")
                                   "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
                                  ("j" "journal" entry (file "~/org/diary.org")
                                   "* %?\n%U\n" :clock-in t :clock-resume t)
                                  ("m" "meeting [inbox]" entry (file "~/org/inbox.org")
                                   "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
                                  ("p" "phone call" entry (file "~/org/inbox.org")
                                   "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
                                  ("h" "habit" entry (file "~/org/inbox.org")
                                   "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \" %<<%Y-%m-%d %a . +1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))
#+end_src

#+name: init-org-babel-block
#+begin_src emacs-lisp
  (use-package org-babel
    :straight nil
    :bind ("C-c v g" . org-babel-goto-named-src-block)
    :custom
    (org-confirm-babel-evaluate nil)
    (org-src-fontify-natively t)
    (org-src-tab-acts-natively t)
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages '((emacs-lisp  . t))))

#+end_src

#+name: init-org-src-block
#+begin_src emacs-lisp
  (use-package org-src
    :straight nil
    :preface
    (defun djm/org-src-supress-final-newline ()
      (setq-local require-final-newline nil))

    (defun djm/org-src-delete-trailing-space (&rest _)
      (delete-trailing-whitespace))

    (defun djm/disable-flycheck-in-org-src-block ()
      (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

    :config
    (setq org-src-window-setup 'current-window)
    (add-hook 'org-src-mode-hook #'djm/org-src-supress-final-newline)
    (add-hook 'org-src-mode-hook #'djm/disable-flycheck-in-org-src-block)
    (advice-add 'org-edit-src-exit :before #'djm/org-src-delete-trailing-space))
#+end_src

#+name: init-toc-org-block
#+begin_src emacs-lisp
  (use-package toc-org
    :hook ((org-mode . toc-org-mode)
           (markdown-mode . toc-org-mode)))
#+end_src

#+name: init-org-mime-block
#+begin_src emacs-lisp
  (use-package org-mime
    :straight nil)
#+end_src

#+name: init-org-htmlize-block
#+begin_src emacs-lisp
  (use-package htmlize)
#+end_src

*** Email
#+name: init-email-block
#+begin_src emacs-lisp
  (use-package notmuch
    :commands (notmuch-tree
               notmuch-search
               notmuch-hello)
    :config
    (setq notmuch-search-oldest-first nil))
#+end_src

*** TODO Calendar
*** Web Browsing
#+name: init-web-browsing-block
#+begin_src emacs-lisp
  (use-package eww
    :defer t
    :straight nil)

  (use-package browse-url
    :defer t
    :straight nil
    :custom (browse-urls-browser-function "firefox"))
#+end_src

** Programming Support
*** Version Control

#+name: init-vc-block
#+begin_src emacs-lisp
  (use-package vc-hooks
    :straight nil
    :config (setq vc-handled-backends nil))

  (use-package smerge-mode)

  (use-package transient
    :config (transient-bind-q-to-quit))

  (use-package magit
    :bind (("C-x g" . magit-status)))

  (use-package git-commit
    :after (magit)
    :custom (git-commit-summary-max-length 50))

  (use-package git-gutter
    :blackout t
    :hook (after-init . (lambda () (global-git-gutter-mode +1)))
    :commands (global-git-gutter-mode))
#+end_src

*** Language Server Support
**** LSP-Mode

#+name: init-lsp-block
#+begin_src emacs-lisp
  (use-package lsp-mode
    :hook ((python-mode cc-mode) . lsp-deferred)
    :custom
    (lsp-eldoc-enable-hover nil)
    (lsp-edoc-render-all nil)
    (lsp-prefer-fly-make nil)
    (lsp-restart nil)
    (lsp-enable-on-type-formatting nil)
    :config
    (use-package lsp-clients
      :straight nil))

  (use-package lsp-ui
    :after (lsp-mode)
    :bind (("C-c f" . lsp-ui-sideline-apply-code-actions))
    :config
    (setq lsp-ui-sideline-show-hover nil))

  (use-package lsp-ui-doc
    :after (lsp-ui lsp-mode)
    :straight nil)
#+end_src

**** Eglot
#+name: init-eglot-block
#+begin_src emacs-lisp

#+end_src

*** Syntax & Linting
**** Flycheck
#+name: init-flycheck-block
#+begin_src emacs-lisp
  (use-package flycheck
    :blackout t
    :commands (flycheck-mode
               flycheck-list-errors
               flycheck-error-list-next-error
               flycheck-error-list-previous-error
               flycheck-error-list-goto-error)
    :hook ((after-init . global-flycheck-mode)
           (prog-mode . flycheck-mode-on-safe))
    :preface
    (autoload 'flycheck-buffer "flycheck")
    (autoload 'flycheck-error-format-message-and-id "flycheck")
    (autoload 'flycheck-get-error-list-window "flycheck")
    (autoload 'flycheck-may-use-echo-area-p "flycheck")
    (autoload 'projectile-project-p "projectile")
    (autoload 'projectile-process-current-project-buffer "projectile")

    (defun djm/flycheck-toogle-error-list ()
      "Show or hide error list."
      (interactive)
      (if-let* ((window (--first (equal flycheck-error-list-buffer
                                        (buffer-name (window-buffer it)))
                                 (window-list))))
          (delete-window window)
        (flycheck-list-errors)))

    (defun djm/flycheck-display-error-messages (errors)
      (unless (flycheck-get-error-list-window 'current-frame)
        (when (and errors (flycheck-may-use-echo-area-p))
          (let ((messages (seq #'flycheck-error-format-message-and-id errors)))
            (display-message-or-buffer (string-join messages "\n\n")
                                       flycheck-error-message-buff
                                       'display-buffer-pop-up-window)))))
    :config
    (setq flycheck-display-errors-function 'djm/flycheck-display-error-messages)
    (setq flycheck-display-errors-delay 0.1)
    (setq flycheck-buffer-switch-check-intermediate-buffers t)
    (setq flycheck-emacs-lisp-load-path 'inherit)
    (setq flycheck-global-mode '(not org-mode
                                     org-agenda-mode
                                     vterm-mode))
    (add-to-list 'flycheck-check-syntax-automatically 'idle-buffer-switch)
    (add-to-list 'display-buffer-alist
                 `(,(rx bos "*Flycheck errors*" eos)
                   (display-buffer-reuse-window
                    display-buffer-in-side-window)
                   (reusable-frames .visible)
                   (side . bottom)
                   (slot . 1)
                   (window-height . 0.2))))

  (use-package flycheck-package
    :disabled t
    :after (flycheck)
    :config
    (flycheck-package-setup)
    (with-eval-after-load 'flycheck
      (setf (flycheck-checker-get 'emacs-lisp-package 'predicate) #'buffer-file-name)))

  (use-package checkdoc
    :straight nil
    :init
    (setq checkdoc-force-docstrings-flag nil)
    (setq checkdoc-arguments-in-order-flag nil))

  (use-package flycheck-posframe
    :after (flycheck)
    :commands (flycheck-posframe-mode)
    :hook (flycheck-mode . flycheck-posframe-mode)
    :config
    (add-to-list 'flycheck-posframe-inhibit-functions
                 #'(lambda () (bound-and-true-p company-backend)))
    (set-face-attribute 'flycheck-posframe-background-face nil :inherit 'ivy-posframe :background nil)
    (flycheck-posframe-configure-pretty-defaults))

  (use-package flycheck-pos-tip
    :after (flycheck)
    :defines flycheck-pos-tip-timeout
    :hook (global-flycheck-mode . flycheck-pos-tip-mode)
    :config (setq flycheck-pos-tip-timeout 30))

  (use-package flycheck-popup-tip
    :after (flycheck)
    :hook (flycheck-mode . flycheck-popup-tip-mode))

#+end_src

** Languages
*** Markdown
#+name: init-markdown-block
#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode ("\\.md\\'" . markdown-mode)
    :commands (markdown-mode gfm-mode)
    :custom
    (markdown-fontify-code-blocks-natively t)
    (markdown-enable-wiki-links t)
    (mardown-indent-nenter 'indent-and-new-item)
    (markdown-asymmetric-header t))
#+end_src

*** YAML
#+name: init-yaml-block
#+begin_src emacs-lisp
  (use-package yaml-mode)
#+end_src

*** Makefiles
#+name: init-makefile-block
#+begin_src emacs-lisp
  (use-package make-mode
    :straight nil
    :blackout ((makefile-automake-mode . "Makefile")
               (makefile-gmake-mode . "Makefile")
               (makefile-makepp-mode . "Makefile")
               (makefile-bsdmake-mode . "Makefile")
               (makefile-imake-mode . "Makefile")))
#+end_src

*** TODO LaTeX
#+name: init-latex-block
#+begin_src emacs-lisp

#+end_src

*** TODO Shell
#+name: init-
#+begin_src emacs-lisp

#+end_src

*** Elisp
#+name: init-elisp-block
#+begin_src emacs-lisp
  (use-package parinfer)

  (use-package paredit)
  (use-package suggest)
  (use-package highlight-defined)

  (use-package elisp-slime-nav
    :blackout t
    :hook (emacs-lisp-mode . turn-on-elisp-slime-nav-mode)
    :general
    (:keymaps 'emacs-lisp-mode-map :states 'normal
              "M-." #'emacs-slime-nav-find-elisp-thing-at-point))
#+end_src

*** TODO R
#+name: init-R-block
#+begin_src emacs-lisp

#+end_src

*** TODO Julia
#+name: init-julia-block
#+begin_src emacs-lisp
  (use-package julia-mode)
#+end_src

*** ESS
#+name: init-ess-block
#+begin_src emacs-lisp
  (use-package ess
    :hook (julia-mode . ess-mode)
    :config
    (add-to-list 'safe-local-variable-values '(outline-minor-mode))
    (add-to-list 'safe-local-variable-values '(whitespace-style
                                               face tabs spaces
                                               trailing lines space-before-tab::space
                                               newline indentation::space empty
                                               space-after-tab::space space-mark
                                               tab-mark newline-mark)))
#+end_src

*** Python

#+name: init-python-block
#+begin_src emacs-lisp
  (use-package pyenv-mode
    :config
    (defun projectile-pyenv-mode-set ()
      (let ((project (projectile-project-name)))
        (if (member project (pyenv-mode-versions))
            (pyenv-mode-set project)
          (pyenv-mode-unset))))

    (add-hook 'projectile-switch-project-hook 'projectile-pyenv-mode-set)
    (add-hook 'python-mode-hook 'pyenv-mode))

  (use-package pyenv-mode-auto
    :hook (projectile-switch-project . pyenv-mode))

  (use-package python
    :hook (python-mode . config-python--init-python-mode)
    :preface
    (progn
      (autoload 'python-indent-dedent-line "python")
      (autoload 'python-shell-get-process "python")

      (defun config-python--init-python-mode ()
        (setq-local comment-inline-offset 2)
        (setq-local tab-width 4)
        (prettify-symbols-mode -1)
        (when (executable-find "ipython")
          (setq-local python-shell-interpreter "ipython")
          (setq-local python-shell-interpreter-args "--simple-promt -i")))

      (defun config-python-backspace ()
        (interactive)
        (if (equal (char-before) ?\s)
            (unless (python-indent-dedent-line)
              (backward-delete-char-untabify 1))
          (sp-backward-delete-char)))

      (defvar config-python-prev-source-buffer)

      (defun config-python-repl-switch-to-source ()
        (interactive)
        (-when-let (buf config-python-prev-source-buffer)
          (when (buffer-live-p buf)
            (pop-to-buffer buf))))

      (defun config-python-repl ()
        (interactive)
        (when (derived-mode-p 'python-mode)
          (setq config-python-prev-source-buffer (current-buffer)))
        (let ((shell-process
               (or (python-shell-get-process)
                   (with-demoted-errors "Error: %S"
                     (call-interactively #'run-python)
                     (python-shell-get-process)))))
          (unless shell-process
            (error "Failed to start python shell properly"))
          (pop-to-buffer (process-buffer shell-process))))
      :config
      (progn
        (setq python-indent-guess-indent-offset nil)
        (setq python-indent-offset 4)
        (setq python-fill-docstring-style 'django))))

  (use-package anaconda-mode
    :hook ((python-mode . anaconda-mode)
           (python-mode . anaconda-eldoc-mode)))

  (use-package py-yapf
    :hook (python-mode . python-auto-format-mode)
    :preface
    (progn
      (defvar python-auto-format-buffer t)

      (defun python-auto-format-maybe ()
        (when python-auto-format-buffer
          (py-yapf-buffer)))

      (define-minor-mode python-auto-format-mode
        nil nil nil nil
        (if python-auto-format-mode
            (add-hook 'before-save-hook 'python-auto-format-maybe nil t)
          (remove-hook 'before-save-hook 'python-auto-format-maybe t)))))
#+end_src

*** C++

#+name: init-c++-block
#+begin_src emacs-lisp
  (defconst moose-c-style
    '("Moose C++ Programming Style."
      (c-tab-always-indent . t)
      (c-basic-offset . 2)
      (c-hanging-braces-alist . ((substatement-open before after)))
      (c-offsets-alist . ((innamespace . 0)
                          (member-init-intro . 4)
                          (statement-block-into . +)
                          (substatement-open . 0)
                          (substatement-label . 0)
                          (label . 0)
                          (statement-cont . +)
                          (case-label . +)))))


  (c-add-style "MOOSE" moose-c-style)
  (setf (map-elt c-default-style 'other) "MOOSE")

  (setq auto-mode-alist
        (append '(("\\.h$" . c++-mode)
                  ("\\.C$" . c++-mode)
                  ("\\.i$" . conf-mode)
                  ("tests" . conf-mode)
                  ("\\.cu". c++-mode))
                auto-mode-alist))

  (use-package c-mode
    :straight nil
    :config
    (c-toggle-auto-hungry-state)
    (c-toggle-auto-newline)
    (c-toggle-auto-state))
#+end_src

** Footer
#+name: init-footer-block
#+begin_src emacs-lisp
  (provide 'init)
  ;;; init.el ends here
#+end_src


-------------------------------------------------------------------
* Mini-Init
:properties:
:header-args: :tangle "~/dotz/editors/emacs.d/mini-init.el"
:end:
** Header
#+name: mini-init-header-block
#+begin_src emacs-lisp
  ;;; init.el --- Emacs mini configuration file -*- lexical-binding: t; buffer-read-only: t-*-
  ;;;
  ;;; Commentary:
  ;;; Emacs `mini-init.el' config by dylanjm.
  ;;; This file was automatically generated by `org-babel-tangle'.
  ;;; Do not change this file.  Main config is located in emacs.d/dotemacs.org
  ;;;
  ;;; Code:
#+end_src

* Conclusion
-------------------------------------------------------------------
* Citations

* COMMENT Local file settings for Emacs
# Local Variables:
# time-stamp-line-limit: 2000
# time-stamp-format: "%Y-%m-%d %H:%M:%S"
# time-stamp-active: t
# time-stamp-start: "\/last updated\/:[ ]*"
# time-stamp-end: "$"
# End:
