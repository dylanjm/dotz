#+TITLE: DotEmacs
#+AUTHOR: Dylan McDowell

* Emacs Dot Files

** Bootstrap

*** Defaults

#+BEGIN_SRC emacs-lisp
(when (boundp 'x-gtk-use-system-tooltips)
  (setq x-gtk-use-system-tooltips nil))

(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file :noerror)

(when (display-graphic-p)
  (setq mouse-wheel-scroll-amount '(1 ((shift) .1))
        mouse-wheel-progressive-speed nil))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(when (fboundp 'set-charset-priority)
  (set-charset-priority 'unicode))
(prefer-coding-system 'utf-8-unix)
(set-language-environment 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-clipboard-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-buffer-file-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-selection-coding-system 'utf-8)
(modify-coding-system-alist 'process "*" 'utf-8)
(set-file-name-coding-system 'utf-8)
(setq locale-coding-system 'utf-8
      default-process-coding-system '(utf-8 . utf-8))

(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
(add-to-list 'default-frame-alist '(ns-appearance . dark))

(add-hook 'window-setup-hook #'window-divider-mode)
(global-hl-line-mode 1)
(global-display-fill-column-indicator-mode 1)
(global-display-line-numbers-mode)

(blink-cursor-mode 0)
(fringe-mode 0)

(fset 'yes-or-no-p 'y-or-n-p)

(add-to-list
 'default-frame-alist
 '(font . "-*-Iosevka Nerd Font Mono-ultralight-normal-normal-*-18-*-*-*-m-0-iso10646-1"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (leaf *init-emacs
    :doc "starting off our emacs init"
    :config
    (leaf exec-path-from-shell
      :ensure t
      :when (memq window-system '(macs ns x))
      :defun (exec-path-from-shell-initialize)
      :custom ((exec-path-from-shell-check-startup-files . nil)
               (exec-path-from-shell-variables . '("PATH" "MANPATH"))
               (exec-path-from-shell-arguments . '("-l")))
      :config
      (exec-path-from-shell-initialize))

    (leaf files
      :custom
      `((auto-save-file-name-transforms . '((".*" "~/.cache/emacs/emacs-backups" t)))
        (backup-directory-alist . '(("." . "~/.cache/emacs/emacs-backups")))
        (backup-by-copying . t)))

    (leaf help
      :custom `((help-window-select . t)))

    (leaf startup
      :custom `((inhibit-startup-screen . t)
                (inhibit-startup-echo-area-message . t)
                (inhibit-default-init . t)
                (initial-scratch-message . "")))

    (leaf uniquify.el
      :custom ((uniquify-buffer-name-style . 'forward)))

    (leaf paragraphs
      :custom ((sentence-end-double-space . nil)))

    (leaf select
      :custom ((select-enable-clipboard . t)))

    (leaf cus-start
      :hook (before-save-hook . delete-trailing-whitespace)
      :custom `((auto-window-vscroll . nil)
                (create-lockfiles . nil)
                (cursor-in-non-selected-windows . nil)
                (cursor-type . 'bar)
                (display-time-default-load-average . nil)
                (fill-column . 80)
                (frame-title-format . '("%b - Emacs"))
                (icon-title-format . frame-title-format)
                (indent-tabs-mode . nil)
                (inhibit-compacting-font-caches . t)
                (load-prefer-newer . t)
                (mode-line-in-non-selected-windows . nil)
                (ns-use-thin-smoothing . t)
                (redisplay-dont-pause . t)
                (ring-bell-function . #'ignore)
                (tab-width . 4)
                (vc-follow-symlinks . t)
                (view-read-only . t)
                (use-file-dialog . nil)
                (use-dialog-box . nil)
                (scroll-conservatively . most-positive-fixnum)
                (scroll-margin . 10)
                (scroll-step . 1)
                (show-trailing-whitespace . t)
                (window-divider-default-places . t)
                (window-divider-default-bottom-width . 1)
                (window-divider-default-right-width . 1)))

    (leaf simple
      :custom `((column-number-mode . t)
                (line-number-mode . t)
                (line-move-visual . nil)
                (track-eol . t)
                (set-mark-command-repeat-pop . t)))

    (leaf saveplace
      :hook (after-init-hook . save-place-mode))

    (leaf savehist
      :hook (after-init-hook . savehist-mode)
      :custom `((history-delete-duplicates . t)
                (history-length . t)
                (savehist-additional-variables . '(mark-ring
                                                   global-mark-ring
                                                   search-ring
                                                   extended-command-history
                                                   kill-ring))
                (savehist-autosave-intervall . 300)
                (savehist-file . "~/.cache/emacs/emacs-history")
                (savehist-save-minibuffer-history . 1)
                (history-length . 1000)))

    (leaf ns-win
      :if (eq system-type 'darwin)
      :custom `((ns-pop-up-frames . nil)
                (ns-use-native-fullscreen . nil)
                (mac-option-modifier . 'meta)
                (mac-command-modifier . 'meta)
                (mac-right-command-modifier . 'left)
                (mac-right-option-modifier . 'none)
                (mac-function-modifier . 'hyper)))

    (leaf prog-mode
      :hook ((prog-mode-hook . show-paren-mode)
             (prog-mode-hook . prettify-symbols-mode))
      :custom `((prettify-symbols-alist . '(("lambda" . ?Î»)))
                (prettify-symbols-unprettify-at-point . 'right-edge)))

    (leaf recentf
      :hook (after-init-hook . recentf-mode)
      :custom
      `((recentf-exclude . '("\\.?cache" ".cask" "url" "COMMIT_EDITMSG\\'" "bookmarks"
                             "\\.\\(?:gz\\|gif\\|svg\\|png\\|jpe?g\\)$" "^/tmp/" "^/ssh:"
                             "\\.?ido\\.last$" "\\.revive$" "/TAGS$" "^/var/folders/.+$"
                             (lambda (file) (file-in-directory-p file package-user-dir))))
        (recentf-max-menu-items . 15)
        (recentf-max-saved-items . 200)
        (recentf-save-file . "~/.cache/emacs/emacs-recentf"))
      :config
      (push (expand-file-name recentf-save-file) recentf-exclude)
      (run-at-time nil (* 5 60) 'recentf-save-list)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; (leaf darktooth-theme
  ;;   :demand
  ;;   :config
  ;;   (load-theme 'darktooth t)
  ;;   (set-face-attribute 'mode-line nil :height 160)
  ;;   (set-face-attribute 'mode-line-inactive nil :height 160)
  ;;   (set-face-attribute 'hl-line nil :extend t))

  ;; (leaf doom-themes
  ;; :custom
  ;; (doom-themes-enable-italic)
  ;; (doom-themes-enable-bold)
  ;; :config
  ;; (doom-themes-treemacs-config)
  ;; (doom-themes-org-config)
  ;; (doom-themes-visual-bell-config)
  ;; (set-face-attribute 'doom-visual-bell nil
  ;;                     :inherit 'mode-line
  ;;                     :background (face-foreground 'error)
  ;;                     :inverse-video nil)


  ;; (leaf solaire-mode
  ;;   :functions persp-load-state-from-file
  ;;   :hook (((change-major-mode after-revert ediff-prepare-buffer) . turn-on-solaire-mode)
  ;;          (minibuffer-setup . solaire-mode-in-minibuffer)
  ;;          (after-load-theme . solaire-mode-swap-bg))
  ;;   :config
  ;;   (setq solaire-mode-remap-fringe nil)
  ;;   (solaire-global-mode 1)
  ;;   (solaire-mode-swap-bg)
  ;;   (advice-add #'persp-load-state-from-file
  ;;               :after #'solaire-mode-restore-persp-mode-buffers))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)
(use-package flx)
(use-package eldoc :hook (emacs-lisp-mode . eldoc-mode))
(use-package use-package-ensure-system-package
  :commands (use-package-ensure-system-package-exists?))

(use-package eyebrowse :config (eyebrowse-mode t))

(use-package aggressive-indent
  :hook (emacs-lisp-mode . aggressive-indent-mode)
  :custom (aggressive-indent-comments-too))

(use-package hungry-delete :init (hungry-delete-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package company
  :commands global-company-mode
  :bind
  (:map company-active-map
        ("RET" . nil)
        ([return] . nil)
        ("TAB" . company-complete-selection)
        ([tab] . company-complete-selection)
        ("C-f" . company-complete-common)
        ("C-n" . company-select-next)
        ("C-p" . company-select-previous))
  :hook (after-init . global-company-mode)
  :custom
  (company-require-match 'never)
  (company-async-timeout 5)
  (company-idle-delay 0.1)
  (company-minimum-prefix-length 2)
  (company-tooltip-align-annotations t)
  (company-frontends '(company-pseudo-tooltip-unless-just-one-frontend
                       company-preview-frontend
                       company-echo-metadata-frontend))
  (company-backends '(company-capf company-files))
  :config
  (use-package company-lsp)
  (use-package company-statistics
    :custom (company-statistics-file "~/.cache/emacs/company-statistics-cache.el")
    :config (company-statistics-mode))

  (use-package company-flx
    :config (company-flx-mode 1))
  (use-package company-quickhelp
    :config (company-quickhelp-mode)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package undo-tree
  :config (global-undo-tree-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :bind (("C-x b" . ivy-switch-buffer)
         ("C-x B" . ivy-switch-buffer-other-window)
         ("C-c C-r" . ivy-resume)
         ("C-c v p" . ivy-push-view)
         ("C-c v o" . ivy-pop-view)
         ("C-c v ." . ivy-switch-view)

         :map ivy-minibuffer-map
         ("<tab>" . ivy-alt-done)
         ("C-w" . ivy-yank-word)
         :map ivy-switch-buffer-map
         ("C-x k" . ivy-switch-buffer-kill)

         :map counsel-mode-map
         ([remap swiper] . counsel-grep-or-swiper)
         ([remap dired] . counsel-dired)
         ("C-x C-f" . counsel-find-file)
         ("C-x C-d" . counsel-dired-jump)
         ("C-x C-l" . counsel-find-library)
         ("C-x C-r" . counsel-buffer-or-recentf)
         ("C-x C-v" . counsel-set-variable)
         ("C-x C-u" . counsel-unicode-char)
         ("C-x j" . counsel-mark-ring)

         ("C-c g" . counsel-grep)
         ("C-c h" . counsel-command-history)
         ("C-c j" . counsel-git)
         ("C-c j" . counsel-git-grep)
         ("C-c r" . counsel-rg)
         ("C-c z" . counsel-fzf)
         ("C-c c w" . counsel-colors-web)

         ("C-h F" . counsel-describe-face)
         ("C-h f" . counsel-describe-function)
         ("C-h v" . counsel-describe-variable)

         ("C-s" . swiper)
         ("C-c c s" . swiper-isearch)
         ("C-c c r" . swiper-isearch-backward)
         ("C-S-s" . swiper-all)

         :map swiper-map
         ("M-%" . swiper-query-replace)
         ("M-s" . swiper-isearch-toggle)
         :map isearch-mode-map
         ("M-s" . swiper-isearch-toggle))
  :hook ((after-init . ivy-mode)
         (ivy-mode . counsel-mode))
  :custom
  (enable-recursive-minibuffers t)
  (ivy-dynamic-exhibit-delay-ms 250)
  (ivy-use-selectable-prompt t)
  (ivy-height 10)
  (ivy-on-del-error-function nil)
  (ivy-initial-inputs-alist nil)
  (ivy-case-fold-search-default t)
  (ivy-use-virtual-buffers t)
  (ivy-count-format "(%d/%d) ")
  :config
  (with-eval-after-load 'ivy
    (push (cons #'swiper (cdr (assq t ivy-re-builders-alist)))
          ivy-re-builders-alist)
    (push (cons t #'ivy--regex-fuzzy) ivy-re-builders-alist))
  (when (executable-find "rg")
    (setq counsel-grep-base-command "rg -S --no-heading --line-number --color never '%s' %s")))

(use-package counsel-projectile
  :after (counsel projectile)
  :config (counsel-projectile-mode 1))

(use-package amx
  :custom (amx-history-length 20)
  :hook (after-init . amx-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ispell
  :ensure-system-package (hunspell . "trizen -S hunspell")
  :custom
  (ispell-dictionary "en_US")
  (ispell-program-name (executable-find "hunspell"))
  (ispell-really-hunspell t)
  (ispell-silently-savep t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind (("C-x g" . magit-status)
         ("C-x M-g" . magit-dispatch)
         ("C-c M-g" . magit-file-popup)))

(use-package git-commit
  :hook (git-commit-mode . (lambda ()
                             (setq fill-column 72)
                             (setq-local comment-auto-fill-only-comments nil)))
  :custom (git-commit-summary-max-length 50))

(use-package git-gutter
  :config (global-git-gutter-mode 1))

(use-package gitconfig-mode
  :hook (gitconfig-mode . (lambda () (setf indent-tabs-mode nil tab-width 4))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :bind (("C-x o" . ace-window)))

(use-package dired
  :ensure nil
  :bind (:map dired-mode-map
              ("C-c C-p" . wdired-change-to-wdired-mode))
  :custom
  (dired-recursive-deletes 'always)
  (dired-recursive-copies 'always)
  (dired-use-ls-dired nil)
  :config
  (when (executable-find "fd")
    (use-package fd-dired))
  (when (executable-find "gls")
    (setq insert-directory-program "gls"))
  (use-package dired-rsync
    :bind (:map dired-mode-map ("C-c C-r" . dired-rsync)))
  (use-package diredfl
    :config (diredfl-global-mode 1))
  (use-package dired-aux :ensure nil)
  (use-package dired-x :ensure nil :demand))

(use-package projectile
  :custom
  (projectile-cache-file "~/.cache/emacs/projectile.cache")
  (projectile-completion-system 'ivy)
  (projectile-enable-caching t)
  (projectile-known-projects-file "~/.cache/emacs/projectile-bookmarks.eld")
  (projectile-mode-line '(:eval (projectile-project-name)))
  :config
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package julia-mode)
(use-package julia-repl :hook (julia-mode . julia-repl-mode))

(use-package eterm-256color :hook (term-mode . eterm-256color-mode))

(use-package flycheck :config (global-flycheck-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(provide 'init)
#+END_SRC
