#+TITLE: DotEmacs
#+AUTHOR: Dylan McDowell

* Emacs Dot Files

** Bootstrap

*** Defaults

#+BEGIN_SRC emacs-lisp
  (setq-default
   visible-bell t                                   ; Flashes on error
   ad-redefinition-action 'accept                   ; Silence warnings for redefinition
   auto-window-vscroll nil                          ; Lighten vertical scroll
   cursor-in-non-selected-windows nil               ; Hide the cursor in inactive windows
   delete-by-moving-to-trash t                      ; Delete files to trash
   display-time-default-load-average nil            ; Don't display load average
   display-time-format "%H:%M"                      ; Format the time string
   fill-column 80                                   ; Set width for automatic line breaks
   help-window-select t                             ; Focus new help windows when opened
   indent-tabs-mode nil                             ; Stop using tabs to indent
   inhibit-startup-screen t                         ; Disable start-up screen
   initial-scratch-message ""                       ; Empty the initial *scratch* buffer
   mouse-yank-at-point t                            ; Yank at point rather than pointer
   ns-use-srgb-colorspace nil                       ; Don't use sRGB colors
   recenter-positions '(5 top bottom)               ; Set re-centering positions
   scroll-conservatively most-positive-fixnum       ; Always scroll by one line
   scroll-margin 10                                 ; Add a margin when scrolling vertically
   select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
   sentence-end-double-space nil                    ; End a sentence after a dot and a space
   show-trailing-whitespace nil                     ; Display trailing whitespaces
   split-height-threshold nil                       ; Disable vertical window splitting
   split-width-threshold nil                        ; Disable horizontal window splitting
   tab-width 4                                      ; Set width for tabs
   uniquify-buffer-name-style 'forward              ; Uniquify buffer names
   window-combination-resize t                      ; Resize windows proportionally
   x-stretch-cursor t)                              ; Stretch cursor to the glyph width
  (delete-selection-mode 1)                         ; Replace region when inserting text
  (display-time-mode 1)                             ; Enable time in the mode-line
  (global-display-line-numbers-mode)                ; Always show line numbers
  (fringe-mode 0)                                   ; Disable fringes
  (fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
  (global-subword-mode 1)                           ; Iterate through CamelCase words
  (menu-bar-mode 0)                                 ; Disable the menu bar
  (put 'downcase-region 'disabled nil)              ; Enable downcase-region
  (put 'upcase-region 'disabled nil)                ; Enable upcase-region
  (set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
  (add-to-list 'default-frame-alist
               '(ns-transparent-titlebar . t))      ; Make the titlebar transparent
  (add-to-list 'default-frame-alist
               '(ns-appearance . dark))             ; Make everything dark
  (scroll-bar-mode 0)                               ; Disable the scroll bar
  (blink-cursor-mode 0)                             ; Disable the cursor blinking
  (scroll-bar-mode 0)                               ; Disable the scroll bar
  (tool-bar-mode 0)                                 ; Disable the tool bar
  (tooltip-mode 0)                                  ; Disable the tooltips
  (global-set-key (kbd "C-x C-b") 'ibuffer)         ; Smart Buffer Default
  (global-hl-line-mode 1)
#+END_SRC

Store all backups and autosave files in `/tmp/`

#+begin_src emacs-lisp
  (setq backup-directory-alist
        `((".*" . , (expand-file-name ".emacs-saves/" user-emacs-directory))))
  (setq auto-save-file-name-transforms
        `((".*" , (expand-file-name ".emacs-saves/" user-emacs-directory) t)))
#+end_src

Setting up Editor Configuration File

#+begin_src emacs-lisp
  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1))
#+end_src

Garbage-collect on focus-out, Emacs /should/ feel snappier.

#+BEGIN_SRC emacs-lisp
  (add-hook 'focus-out-hook #'garbage-collect)
#+END_SRC

*** Theme

#+BEGIN_SRC emacs-lisp
  (use-package gruvbox-theme 
    :demand t
    :config 
    (load-theme 'gruvbox-dark-hard t))
#+END_SRC

*** Load .custom.el

#+begin_src emacs-lisp
  (setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

*** OS Specific

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns nil))
    :hook (after-init . exec-path-from-shell-initialize))
#+end_src


** Language Specific

*** Lisp

#+begin_src emacs-lisp
  (use-package ielm
    :ensure nil
    :hook (ielm-mode . (lambda () (setq-local scroll-margin 0))))
#+end_src

*** Markdown

#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode
    ("INSTALL\\'"
     "CONTRIBUTORS\\'"
     "LICENSE\\'"
     "README\\'"
     "\\.markdown\\'"
     "\\.md\\'")
    :custom
    (markdown-asymmetric-header t)
    (markdown-split-window-direction 'right)
    :config
    (unbind-key "M-<down>" markdown-mode-map)
    (unbind-key "M-<up>" markdown-mode-map))
#+end_src

*** YAML

#+begin_src emacs-lisp
  (use-package yaml-mode
    :mode
    ("\\.yml\\'" "\\.yaml\\'"))
#+end_src

*** LaTeX

Found this LaTeX setup at: https://github.com/peterewills/my_configs/blob/master/.emacs

#+begin_src emacs-lisp
  (use-package tex-site
    :ensure auctex
    :mode ("\\.tex\\'" . LaTeX-mode)
    :config
    (setq TeX-auto-save t)
    (setq TeX-save-query nil)
    (setq TeX-parse-self t)
    (setq-default TeX-master t)
    (setq-default TeX-PDF-mode t)
    (add-hook 'LaTeX-mode-hook
              (lambda ()
                (auto-fill-mode)
                (flyspell-mode)
                (TeX-fold-mode 1)
                (LaTeX-math-mode)
                (turn-on-reftex)
                (setq reftex-plug-into-AUCTeX t)
                (push '("latexmk" "latexmk -pdf %s" TeX-run-TeX nil t
                        :help "Run latexmk on file")
                      TeX-command-list)
                (setq TeX-command-default "latexmk")))
    :custom
    (preview-auto-cache-preamble t)
    (TeX-view-program-selection '((output-pdf "PDF Viewer")))
    (TeX-view-program-list
     '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))
    (preview-gs-command "/usr/local/bin/gs"))

  (use-package reftex
    :ensure t
    :defer t
    :config
    (setq reftex-cite-prompt-optional-args t))
#+end_src


** Features

*** Auto-Complete

This is auto complete stuff:

#+begin_src emacs-lisp
(use-package company
  :bind
  (:map company-active-map
        ("RET" . nil)
        ([return] . nil)
        ("TAB" . company-complete-selection)
        ([tab] . company-complete-selection)
        ("<right>" . company-complete-common))
  :hook
  (after-init . global-company-mode)
  :custom
  (company-dabbrev-downcase nil)
  (company-idle-delay .2)
  (company-minimum-prefix-length 1)
  (company-require-match nil)
  (company-tooltip-align-annotations t))
#+end_src

*** YASnippets


#+begin_src emacs-lisp
(use-package diminish)

(use-package yasnippet
  :ensure t
  :config
  (use-package yasnippet-snippets
    :ensure t)
  (yas-global-mode t)
  (define-key yas-minor-mode-map (kbd "<tab>") nil)
  (define-key yas-minor-mode-map (kbd "C-'") #'yas-expand)
  (add-to-list #'yas-snippet-dirs "~/.emacs.d/snippets/")
  (yas-reload-all)
  (setq yas-prompt-functions '(yas-ido-prompt)))
#+end_src


*** Ivy

#+begin_src emacs-lisp
  (use-package all-the-icons-ivy
    :after (all-the-icons ivy)
    :custom (all-the-icons-ivy-buffer-commands '(ivy-switch-buffer-other-window))
    :config
    (add-to-list 'all-the-icons-ivy-file-commands 'counsel-dired-jump)
    (add-to-list 'all-the-icons-ivy-file-commands 'counsel-find-library)
    (all-the-icons-ivy-setup))

  (use-package counsel
    :after ivy
    :delight
    :bind (("C-x C-d" . counsel-dired-jump)
           ("C-x C-h" . counsel-minibuffer-history)
           ("C-x C-l" . counsel-find-library)
           ("C-x C-r" . counsel-recentf)
           ("C-x C-u" . counsel-unicode-char)
           ("C-x C-v" . counsel-set-variable))
    :config (counsel-mode))

  (use-package ivy
    :delight
    :after ivy-rich
    :bind (("C-x b" . ivy-switch-buffer)
           ("C-x B" . ivy-switch-buffer-other-window)
           ("M-H"   . ivy-resume)
           :map ivy-minibuffer-map
           ("<tab>" . ivy-alt-done)
           ("C-i" . ivy-partial-or-done)
           ("S-SPC" . nil)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-switch-buffer-kill))
    :custom
    (ivy-case-fold-search-default t)
    (ivy-count-format "(%d/%d) ")
    (ivy-re-builders-alist '((t . ivy--regex-plus)))
    (ivy-use-virtual-buffers t)
    :config (ivy-mode))

  (use-package ivy-pass
    :after ivy
    :commands ivy-pass)

  (use-package ivy-rich
    :defer 0.1
    :preface
    (defun ivy-rich-branch-candidate (candidate)
      "Displays the branch candidate of the candidate for ivy-rich."
      (let ((candidate (expand-file-name candidate ivy--directory)))
        (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
            ""
          (format "%s%s"
                  (propertize
                   (replace-regexp-in-string abbreviated-home-dir "~/"
                                             (file-name-directory
                                              (directory-file-name candidate)))
                   'face 'font-lock-doc-face)
                  (propertize
                   (file-name-nondirectory
                    (directory-file-name candidate))
                   'face 'success)))))

    (defun ivy-rich-compiling (candidate)
      "Displays compiling buffers of the candidate for ivy-rich."
      (let* ((candidate (expand-file-name candidate ivy--directory)))
        (if (or (not (file-exists-p candidate)) (file-remote-p candidate)
                (not (magit-git-repo-p candidate)))
            ""
          (if (my/projectile-compilation-buffers candidate)
              "compiling"
            ""))))

    (defun ivy-rich-file-group (candidate)
      "Displays the file group of the candidate for ivy-rich"
      (let ((candidate (expand-file-name candidate ivy--directory)))
        (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
            ""
          (let* ((group-id (file-attribute-group-id (file-attributes candidate)))
                 (group-function (if (fboundp #'group-name) #'group-name #'identity))
                 (group-name (funcall group-function group-id)))
            (format "%s" group-name)))))

    (defun ivy-rich-file-modes (candidate)
      "Displays the file mode of the candidate for ivy-rich."
      (let ((candidate (expand-file-name candidate ivy--directory)))
        (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
            ""
          (format "%s" (file-attribute-modes (file-attributes candidate))))))

    (defun ivy-rich-file-size (candidate)
      "Displays the file size of the candidate for ivy-rich."
      (let ((candidate (expand-file-name candidate ivy--directory)))
        (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
            ""
          (let ((size (file-attribute-size (file-attributes candidate))))
            (cond
             ((> size 1000000) (format "%.1fM " (/ size 1000000.0)))
             ((> size 1000) (format "%.1fk " (/ size 1000.0)))
             (t (format "%d " size)))))))

    (defun ivy-rich-file-user (candidate)
      "Displays the file user of the candidate for ivy-rich."
      (let ((candidate (expand-file-name candidate ivy--directory)))
        (if (or (not (file-exists-p candidate)) (file-remote-p candidate))
            ""
          (let* ((user-id (file-attribute-user-id (file-attributes candidate)))
                 (user-name (user-login-name user-id)))
            (format "%s" user-name)))))

    (defun ivy-rich-switch-buffer-icon (candidate)
      "Returns an icon for the candidate out of `all-the-icons'."
      (with-current-buffer
          (get-buffer candidate)
        (let ((icon (all-the-icons-icon-for-mode major-mode :height 0.9)))
          (if (symbolp icon)
              (all-the-icons-icon-for-mode 'fundamental-mode :height 0.9)
            icon))))
    :config
    (plist-put ivy-rich-display-transformers-list
               'counsel-find-file
               '(:columns
                 ((ivy-rich-candidate               (:width 73))
                  (ivy-rich-file-user               (:width 8 :face font-lock-doc-face))
                  (ivy-rich-file-group              (:width 4 :face font-lock-doc-face))
                  (ivy-rich-file-modes              (:width 11 :face font-lock-doc-face))
                  (ivy-rich-file-size               (:width 7 :face font-lock-doc-face))
                  (ivy-rich-file-last-modified-time (:width 30 :face font-lock-doc-face)))))
    (plist-put ivy-rich-display-transformers-list
               'counsel-projectile-switch-project
               '(:columns
                 ((ivy-rich-branch-candidate        (:width 80))
                  (ivy-rich-compiling))))
    (plist-put ivy-rich-display-transformers-list
               'ivy-switch-buffer
               '(:columns
                 ((ivy-rich-switch-buffer-icon       (:width 2))
                  (ivy-rich-candidate                (:width 40))
                  (ivy-rich-switch-buffer-size       (:width 7))
                  (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right))
                  (ivy-rich-switch-buffer-major-mode (:width 20 :face warning)))
                 :predicate (lambda (cand) (get-buffer cand))))
    (ivy-rich-mode 1))

  (use-package swiper
    :after ivy
    :bind (("C-s" . swiper)
           :map swiper-map
           ("M-%" . swiper-query-replace)))
#+end_src
