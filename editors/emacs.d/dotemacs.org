#+title: Arco Emacs
#+author: Dylan McDowell
#+property: header-args :tangle "~/teton/editors/emacs.d/init.el"

[[file:https://img.shields.io/badge/GNU%20Emacs-28.0.50-b48ead.svg]]

/last updated/: 2020-02-24 14:29:38

* Table of Contents :TOC@2:noexport:
- [[#about][About]]
    - [[#literate-programming-in-org][Literate Programming in Org]]
    - [[#system-requirements][System Requirements]]
- [[#early-init][Early-Init]]
    - [[#header][Header]]
    - [[#preliminary-configuration][Preliminary Configuration]]
    - [[#footer][Footer]]
- [[#init][Init]]
    - [[#header-1][Header]]
    - [[#package-management][Package Management]]
    - [[#initial-demands][Initial Demands]]
    - [[#personal-configuration][Personal Configuration]]
    - [[#built-in-defaults][Built-In Defaults]]
    - [[#user-files][User Files]]
    - [[#themes--aesthetics][Themes & Aesthetics]]
    - [[#meta][Meta]]
    - [[#system][System]]
    - [[#shells][Shells]]
    - [[#project-management][Project Management]]
    - [[#frameworks][Frameworks]]
    - [[#autocompletion][Autocompletion]]
    - [[#documentation][Documentation]]
    - [[#editing-tools][Editing Tools]]
    - [[#writing][Writing]]
    - [[#minor-modes][Minor Modes]]
    - [[#file-explorer][File Explorer]]
    - [[#navigation][Navigation]]
    - [[#org][Org]]
    - [[#email][Email]]
    - [[#media][Media]]
    - [[#version-control][Version Control]]
    - [[#language-server-support][Language Server Support]]
    - [[#syntax--linting][Syntax & Linting]]
    - [[#languages][Languages]]
    - [[#miscellaneous][Miscellaneous]]
    - [[#footer-1][Footer]]
- [[#conclusion][Conclusion]]
- [[#citations][Citations]]

* About
#+ATTR_HTML: :width 500px
#+ATTR_ORG: :width 500px
[[file:assets/config-preview.png]]


** Literate Programming in Org

This document is my current emacs config which contains the code for my =early-init.el= file and =init.el= file. You may be wondering how one file can contain code for two different configuration files. Through the power of =org-babel-tangle=, I am able to configure and document my entire emacs experience in a single Org file. There are several reasons to organize one's configuration this way. I hope these reasons become obvious as you browse through, but personally I find it much easier to document my choices using a markup language. This way I can store links and reference back to forum threads and other places when updating. I can also include pictures throughout and organize code-blocks with specific names to make navigation quick and painless. If you're interested in creating a similar setup, take a look at the raw-version of this file. There is important information contained in the header and throughout the file to make this work. Once you have a proper the proper settings, start adding src-blocks and then run =M-x org-babel-tangle <RET>=. Your config files will then be generated and Emacs will use those files when starting up. I have also written a hook that tangles this file everytime I save.

** System Requirements

| Hardware             |      OS | Emacs Version |
|----------------------+---------+---------------|
| 15" 2019 MacBook Pro | 10.14.6 |       28.0.50 |
| 15" 2019 MacBook Pro |         |       27.0.50 |

* Early-Init
:properties:
:header-args: :tangle "~/teton/editors/emacs.d/early-init.el"
:end:
** Header
#+name: early-init-header-block
#+begin_src emacs-lisp
  ;;; early-init.el --- Early initialization. -*- lexical-binding: t; buffer-read-only: t -*-
  ;;;
  ;;; Commentary:
  ;;; Emacs `early-init.el' config by dylanjm
  ;;; This file was automatically generated by `org-babel-tangle'.
  ;;; Do not change this file.  Main config is located in emacs.d/dotemacs.org
  ;;;
  ;;; Code:
#+end_src

** Preliminary Configuration

You'll see a similar configuration in other dotfiles online. By default, Emac's runs it garbage collector when the

*** Garbage Collection

You'll see this modification in many config files around the internet. The idea is that emacs sets it's memory threshold 40 years in the past. This causes the garbage collector to run frequently and can cause delays or muck up the speed of your setup. We pretty much disable garbage collection during the initial phase to improve our startup time. After we have given enough time for everything to load we then set the gc-theshold to a reasonable number. Sometimes people set the threshold back to its default value, but I keep it a little higher to handle things like fuzzy completion. The FLX README suggest we do this to keep emacs running nice and smooth.

#+name: early-init-gc-block
#+begin_src emacs-lisp
  (defvar default-file-name-handler-alist file-name-handler-alist)
  (defvar extended-gc-cons-threshold most-positive-fixnum)
  (defvar default-gc-cons-threshold 16777216) ;; 16mb

  (setq-default auto-window-vscroll nil
                bidi-display-reordering 'left-to-right
                bidi-paragraph-direction 'left-to-right
                command-line-ns-option-alist nil
                frame-inhibit-implied-resize t
                inhibit-default-init t
                site-run-file nil
                load-prefer-newer t)

  (setq file-name-handler-alist nil
        gc-cons-threshold extended-gc-cons-threshold
        gc-cons-percentage 0.7
        package-enable-at-startup nil
        package--init-file-ensured t)

  (defun djm/return-vars-to-normal ()
    (setq file-name-handler-alist default-file-name-handler-alist
          load-prefer-newer nil
          gc-cons-threshold default-gc-cons-threshold
          gc-cons-percentage 0.1))

  (add-hook 'emacs-startup-hook #'djm/return-vars-to-normal)

#+end_src

*** Pre-Gui Optimization

Ever since Emacs 27.0 we can utilize the early-init file to setup a few graphical settings without seeing a major slow down. The biggest speed ups I've seen from this is setting =vertical-scroll-bars= , =ns-appearance=, and =ns-transparent-titlebar=. I also set the font during this time and handle a few other graphical settings.

#+name: early-init-pre-gui-block
#+begin_src emacs-lisp
  (setq-default initial-frame-alist '((window-right-divider-width . 20)
                                      (window-bottom-divider-width . 20)))

  (setq-default default-frame-alist '((ns-transparent-titlebar . t)
                                      (alpha . (100 100))
                                      (tool-bar-lines . 0)
                                      (ns-appearance . dark)
                                      (font . "Iosevka TermLig SS09-18:weight=ultra-light:width=expanded")))

  (modify-all-frames-parameters '((vertical-scroll-bars)))

  ;; Not sure if this is really needed anymore
  (prefer-coding-system 'utf-8-unix)
  (set-language-environment "UTF-8")
  (set-keyboard-coding-system 'utf-8)
  (set-clipboard-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-selection-coding-system 'utf-8)
  (modify-coding-system-alist 'process "*" 'utf-8)
  (set-file-name-coding-system 'utf-8)
#+end_src

** Footer

#+name: early-init-footer-block
#+begin_src emacs-lisp
  (provide 'early-init)
  ;;; early-init.el ends here
#+end_src

* Init
** Header
#+name: init-header-block
#+begin_src emacs-lisp
  ;;; init.el --- Emacs main configuration file -*- lexical-binding: t; buffer-read-only: t-*-
  ;;;
  ;;; Commentary:
  ;;; Emacs `init.el' config by dylanjm.
  ;;; This file was automatically generated by `org-babel-tangle'.
  ;;; Do not change this file.  Main config is located in emacs.d/dotemacs.org
  ;;;
  ;;; Code:
#+end_src

** Package Management
*** [[https://github.com/raxod502/straight.el][Straight]]

=Straight.el= is my package manager of choice. It is extremely powerful in it's design and ensures you have a functional Emacs config. There are a few peculiar things about this package, but overall I prefer this setup much more to anything I've tried.

#+name: early-init-straight-block
#+begin_src emacs-lisp
  (eval-and-compile
    (defvar straight-recipes-gnu-elpa-use-mirror t)
    (defvar bootstrap-version 5)
    (defvar bootstrap-file
      (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory)))

  (setq-default straight-cache-autoloads t
                straight-fix-org t
                straight-recipe-overrides nil
                straight-repository-branch "develop"
                straight-use-package-by-default t
                straight-check-for-modifications '(check-on-save find-when-checking))

  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))

  (load bootstrap-file nil 'nomessage)
#+end_src

*** [[https://github.com/jwiegley/use-package][Use-Package]]

Use-Package is nearly ubiquitous in an Emacs config these days. Once you spend the time on learning how to leverage the package strengths, it's almost impossible to think of doing your config any other way. There are some people who choose not to use this package. They believe that it abstracts too much away from the user. I think they have a point. There may be a day I can move past relying on Use-Package. Until then, it's a great way to organize and setup a config.

#+name: init-block-use-package-block
#+begin_src emacs-lisp
  (setq-default use-package-verbose t
                use-package-always-defer t
                use-package-compute-statistics t
                use-package-enable-imenu-support t)

  (straight-use-package 'use-package)
#+end_src

** Initial Demands

This section is for packages I need immediately upon launching emacs. My goal is to slim this section down a lot to try to further improve startup-times.

*** [[https://github.com/purcell/exec-path-from-shell][Exec-Path-From-Shell]]

Application launching on MacOS isn't handled by a specific system. This makes it really hard to get envrionment variables from your shell to show up  in Emacs. This package makes that easier.

#+name: init-exec-path-from-shell-block
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :straight t
    :if (eq system-type 'darwin)
    :hook ('emacs-startup . #'exec-path-from-shell-initialize)
    :init
    (setq exec-path-from-shell-variables '("XDG_CACHE_HOME"
                                           "XDG_CONFIG_HOME"
                                           "XDG_DATA_HOME"
                                           "XDG_BIN_HOME"
                                           "LS_COLORS"
                                           "LC_ALL"
                                           "LANG"
                                           "EDITOR"
                                           "EA_PATH"
                                           "EA_EDITOR"
                                           "BROWSER"
                                           "DOTFILES"
                                           "ORG_FILES"
                                           "HISTFILE"
                                           "MPD_HOST"
                                           "MPD_PORT"
                                           "ZSH"
                                           "EXA_COLORS"
                                           "CCACHE_DIR"
                                           "JAVA_HOME"
                                           "JULIA_NUM_THREADS"
                                           "JULIA_DEPOT_PATH"
                                           "R_ENVIRON_USER"
                                           "PATH"
                                           "FPATH"
                                           "CDPATH"
                                           "MANPATH"
                                           "GPG_TTY"
                                           "PYLINTHOME"
                                           "PYENV_ROOT"
                                           "IPYTHONDIR"
                                           "TERMINFO"
                                           "PYTHONSTARTUP"
                                           "MPLCONFIGDIR")
          exec-path-from-shell-arguments '("-l")))

#+end_src

*** [[https://github.com/emacscollective/no-littering][No-Littering]]

Not super stoked on using this package, as I might replace it later with my own setup, but until then it's a good way to keep your emacs directory clean.

#+name: init-no-littering-block
#+begin_src emacs-lisp
  (use-package no-littering
    :demand t
    :straight t
    :init
    (setq no-littering-etc-directory "~/.cache/emacs/etc/"
          no-littering-var-directory "~/.cache/emacs/var/"))
#+end_src

*** [[https://github.com/raxod502/el-patch][El-Patch]]

Great package by the same author of Straight.el. It's similar to adding advice to functions but with a twist. Helpful if you need to future proof your emacs or need to alter a function from a package.

#+name: init-el-patch-block
#+begin_src emacs-lisp
  (use-package el-patch
    :demand t
    :straight t)
#+end_src

*** [[https://github.com/noctuid/general.el][General]]

Great package for managing key-bindings and other customizations.

#+name: init-general-block
#+begin_src emacs-lisp
  (use-package general
    :demand t :straight t)
#+end_src

*** [[https://github.com/raxod502/blackout][Blackout]]

Similar to packages like minions, diminish, or delight. You can alter how your minor and major modes show up in the mode-line.

#+name: init-blackout-block
#+begin_src emacs-lisp
  (use-package blackout
    :demand t
    :straight (:host github :repo "raxod502/blackout"))
#+end_src

*** [[https://github.com/magnars/dash.el][Dash]]

Great Elisp library that I use throughout my config.

#+name: init-dash-block
#+begin_src emacs-lisp
  (use-package dash
    :demand t :straight t)
#+end_src

*** [[https://github.com/rejeep/f.el][F]]

Great Elisp library used throughout my config

#+name: init-f-block
#+begin_src emacs-lisp
  (use-package f
    :demand t
    :straight t)

  (use-package s
    :demand t
    :straight t)
#+end_src

*** [[https://orgmode.org/worg/org-contrib/][Org-Plus-Contrib]]

We need to intercept the built-in org-version that ships with emacs. For some reason we have to do this early. I'm not really sure why though.

#+name: ini-org-plus-contrib-block
#+begin_src emacs-lisp
  (straight-use-package
   '(org :host github :repo "emacs-straight/org-mode" :local-repo "org"))
#+end_src

** Personal Configuration
*** Variables

Here are some of my personal variables that I will need to refer to at some point.

#+name: init-variables-block
#+begin_src emacs-lisp
  (defvar djm--assets-directory    (concat user-emacs-directory "assets/"))
  (defvar djm--lisp-directory      (concat user-emacs-directory "lisp/"))
  (defvar djm--straight-directory  (concat user-emacs-directory "straight/"))
  (defvar djm--yasnippet-directory (concat user-emacs-directory "snippets/"))

  (defvar djm--org-agenda-directory (getenv "ORG_FILES"))

  (defvar djm--custom-file  (no-littering-expand-etc-file-name "custom.el"))
  (defvar arco--user-secret-file (no-littering-expand-etc-file-name "secret.el"))

  (defvar djm--auto-save-file-cache "~/.cache/emacs/var/backups/")

  (defconst EMACS28+ (> emacs-major-version 27))
  (defconst IS-MAC (eq system-type 'darwin))
#+end_src

*** Functions
**** Active-Intervals

This function is a great way to conditional run functions at different intervals. For example, take a look at my =recentf= config. Code taken from [[https://github.com/noctuid/dotfiles/blob/master/emacs/.emacs.d/awaken.org][noctuid dotfiles.]]

#+name: init-active-interval-block
#+begin_src emacs-lisp
  (defmacro arco/run-at-active-interval (interval idle-interval &rest body)
    "Every INTERVAL seconds, unless idle for > IDLE-INTERVAL seconds, run BODY.
  Also, after IDLE-INTERVAL seconds of idle time, run BODY. This allows using an
  idle timer to quickly run BODY when Emacs becomes idle but also ensures that
  BODY is run periodically even if Emacs is actively being used."
    (declare (indent 2))
    `(progn
       (run-at-time (current-time) ,interval
                    (lambda ()
                      (let* ((idle-time (current-idle-time))
                             (idle-secs (when idle-time
                                          (float-time idle-time))))
                        (unless (and idle-secs
                                     (> idle-secs ,idle-interval))
                          ,@body))))
       (run-with-idle-timer ,idle-interval t (lambda () ,@body))))
#+end_src

**** Screen-Capture

A quick work around function to easily snap screenshots of lecture videos while taking notes. Use the prefix command =C-u M-x emacs-screen-capture RET= to insert it automatically as an org link.

#+name: init-screen-capture-block
#+begin_src emacs-lisp
  (defun emacs-screen-capture (arg &optional name dir format)
    (interactive "P")
    (let* ((format (completing-read "Screenshot Format: " '(".png" ".pdf" ".jpg" ".tiff" ".svg")))
           (name (or name (read-string "Name of Screenshot: " nil)))
           (dir (or dir (read-directory-name (format "Save %s%s to: " name format))))
           (fp (concat dir name format))
           (abb-fp (concat "file:" (file-relative-name fp))))
      (set-process-sentinel
       (start-process-shell-command
        "imagecapture" nil (format "screencapture -i %s" fp))
       `(lambda (process msg)
          (when (memq (process-status process) '(exit signal))
            (message (concat (process-name process) " - " msg))
            (when (equal #',current-prefix-arg '(4))
              (org-insert-link nil ,abb-fp nil)))))))
#+end_src

**** WGET-Thing-At-Point

I needed this function to download a list of pdfs that were written as links in a textfile. It was pretty useful.

#+name: init-wget-thing-at-point-block
#+begin_src emacs-lisp
  (defun wget-thing-at-point ()
    (interactive)
    (let* ((name (read-string "Name of File: " nil))
           (dir (read-directory-name (format "Save %s to: " name)))
           (fp (concat dir name))
           (url (thing-at-point 'url)))
      (url-copy-file url fp)))
#+end_src

**** Protect Buffers

There are certain buffers I don't want to delete on accident. Code taken from [[https://github.com/rememberYou/.emacs.d/blob/master/config.org][rememberYou dotfiles.]]

#+name: init-protected-buffers-func-block
#+begin_src emacs-lisp
  (defvar *protected-buffers* '("*scratch*" "*Messages*"))

  (defun arco/protected-buffers ()
    "Protects some buffers from being killed."
    (dolist (buffer *protected-buffers*)
      (if (get-buffer buffer)
          (with-current-buffer buffer
            (emacs-lock-mode 'kill))
        (get-buffer-create buffer)
        (with-current-buffer buffer
          (emacs-lock-mode 'kill)))))

  (general-add-hook 'emacs-startup-hook #'arco/protected-buffers)
#+end_src

**** Async Tangle

This saves me tons of time tangling this config file. Code taken from [[https://github.com/rememberYou/.emacs.d/blob/master/config.org][rememberYou dotfiles.]]

#+name: init-async-tangle-func-block
#+begin_src emacs-lisp
  (defvar *config-file* (expand-file-name "dotemacs.org" user-emacs-directory)
    "The Configuration File.")

  (defvar *config-last-change* (nth 5 (file-attributes *config-file*))
    "Last modification time of the configuration file.")

  (defvar *show-async-tangle-results* nil
    "Keeps *emacs* async buffers arround for later inspection.")

  (defun djm/config-updated ()
    "Checks if the configuration file has been updated since the last time."
    (time-less-p *config-last-change*
                 (nth 5 (file-attributes *config-file*))))

  (defun djm/config-tangle ()
    "Tangle the org file asynchronously."
    (when (djm/config-updated)
      (setq *config-last-change*
            (nth 5 (file-attributes *config-file*)))
      (djm/async-babel-tangle *config-file*)))

  (defun djm/async-babel-tangle (org-file)
    "Tangles org-file async"
    (let ((init-tangle-start-time (current-time))
          (file (buffer-file-name))
          (async-quiet-switch "-q"))
      (async-start
       `(lambda ()
          (require 'org)
          (org-babel-tangle-file ,org-file))
       (unless *show-async-tangle-results*
         `(lambda (result)
            (if result
                (message "SUCCESS: %s successfully tangled (%.2fs)."
                         ,org-file
                         (float-time (time-subtract (current-time)
                                                    ',init-tangle-start-time)))
              (message "ERROR: %s as tangle failed." ,org-file)))))))
#+end_src

**** Temp Buffers

Sometimes I need a different scratch buffer to do some work on.

#+name: init-temp-buffers-block
#+begin_src emacs-lisp
  (defun arco/new-scratch ()
    "open up a guaranteed new scratch buffer"
    (interactive)
    (switch-to-buffer (cl-loop for num from 0
                               for name = (format "blah-%03i" num)
                               while (get-buffer name)
                               finally return name)))
#+end_src

**** Font-Config

Fonts are a pain in the *ASS* in Emacs for some reason. I'm still working on setting this up perfectly but I do set up Apple-Emoji Support.

#+name: init-font-config-block
#+begin_src emacs-lisp
  (defun setup-main-fonts (default-height variable-pitch-height)
    "Set up default fonts.

  Use DEFAULT-HEIGHT for default face and VARIABLE-PITCH-HEIGHT
  for variable-pitch face."
    (set-face-attribute 'default nil
                        :family "Iosevka TermLig SS09"
                        :weight 'ultra-light
                        :width 'extra-expanded
                        :height default-height)
    (set-face-attribute 'variable-pitch nil
                        :family "Iosevka Aile"
                        :height variable-pitch-height
                        :weight 'regular
                        :width 'extra-expanded)
    (set-face-attribute 'fixed-pitch nil
                        :family "Iosevka TermLig SS09"
                        :height default-height
                        :weight 'ultra-light
                        :width 'extra-expanded))

  (when window-system
    (if (> (x-display-pixel-width) 1800)
        (setup-main-fonts 190 185)
      (setup-main-fonts 140 135)))

  (defun configure-fonts ()
    "Set up fonts for FRAME.
  Set the default font, and configure various overrides for
  symbols, emojis, greek letters, as well as fall backs for."
    ;; Additional fonts for special characters and fallbacks
    ;; Test range: 🐷 ❤ ⊄ ∫ 𝛼 α 🜚 Ⓚ
    (dolist (script '(symbol mathematical))
      (set-fontset-font t script (font-spec :family "XITS Math") nil 'prepend))

    (set-fontset-font t 'unicode (font-spec :family "Apple Color Emoji") nil 'prepend)

    ;; Fallbacks for math and generic symbols
    (set-fontset-font t 'symbol (font-spec :family "Apple Symbols") nil 'append))
#+end_src

**** Clean-Up Yanked Text

Sourced from [[https://github.com/chrisbarrett/.emacs.d/blob/master/config/config-basic-settings.el][chrisbarret]].

#+name: init-yank-ws-cleanup-block
#+begin_src emacs-lisp
  (defun djm/yank-ws-cleanup (&rest _)
    (whitespace-cleanup)
    (delete-trailing-whitespace))

  (general-add-advice #'insert-for-yank :after #'djm/yank-ws-cleanup)
#+end_src

*** Hooks & Advice

This just changes the time-stamp at the top of my config. It's super annoying to try and find up-to-date config files online and always hard to tell just by commit times. I want people to see exactly when this file was last updated.
#+name: init-personal-hooks-block
#+begin_src emacs-lisp
  (general-add-hook 'write-file-functions 'time-stamp)
#+end_src

Taken from [[https://github.com/raxod502/radian/blob/develop/emacs/radian.el][radian.el]].
#+name: init-advice-block
#+begin_src emacs-lisp
  (defun arco/always-exit-minibuffer-first ()
    (if-let ((minibuffer (active-minibuffer-window)))
        (with-current-buffer (window-buffer minibuffer)
          (minibuffer-keyboard-quit))
      (funcall keyboard-quit)))

  (general-add-advice #'arco/always-exit-minibuffer-first :around 'keyboard-quit)
#+end_src

#+name: init-misc-settings-block
#+begin_src emacs-lisp
  (mapc (lambda (c)
          (set-char-table-range auto-fill-chars c t)) "!-=+]};:'\",.?")
#+end_src

*** Keybindings & Aliases

#+name: init-personal-keybindings-block
#+begin_src emacs-lisp
  (general-define-key
   "C-z" nil
   "s-m" nil)
#+end_src

#+name: init-aliases-block
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  (fset 'display-startup-echo-area-message 'ignore)
  (fset 'view-hello-file 'ignore)
  (fset 'custom-safe-themes 't)
#+end_src

#+name: init-aliases-block
#+begin_src emacs-lisp
  (defalias 'qr #'query-replace)
  (defalias 'qrr #'query-replace-regexp)
#+end_src

** Built-In Defaults
*** Abbrev (Built-In)

I might set-up some abbreviations in the future. This is more a placeholder block until then.

#+name: init-abbrev-block
#+begin_src emacs-lisp
  (use-package abbrev
    :straight (:type built-in))
#+end_src

*** Advice (Built-In)

Ignore those warnings from the old advice system.

#+name: init-advice-block
#+begin_src emacs-lisp
  (use-package advice
    :straight (:type built-in)
    :config
    (general-setq ad-redefinition-action 'accept))
#+end_src

*** Align (Built-In)

Align can be a pretty powerful tool, I just have to learn how to use it better.
#+name: init-align-block
#+begin_src emacs-lisp
  (use-package align
    :straight (:type built-in)
    :general
    ("C-x a a" #'align-regexp))
#+end_src

*** Ansi-Color (Built-In)

Here we can setup proper coloring for compile buffers.

#+name: init-ansi-color-block
#+begin_src emacs-lisp
  (use-package ansi-color
    :straight (:type built-in)
    :ghook ('compilation-filter-hook #'compilation-ansi-color-process-output)
    :functions (ansi-color-apply-on-region)
    :preface
    (defun compilation-ansi-color-process-output ()
      (ansi-color-process-output nil)
      (set (make-local-variable 'comint-last-output-start)
           (point-marker)))
    :config
    (general-setq ansi-color-for-comint-mode t))
#+end_src

*** Auth-Source (Built-In)
#+name: init-auth-source-block
#+begin_src emacs-lisp
  (use-package auth-source
    :straight (:type built-in)
    :config
    (general-setq auth-sources `(,(no-littering-expand-etc-file-name "authinfo.gpg")
                                 ,(no-littering-expand-etc-file-name "authinfo"))
                  auth-source-do-cache t))
#+end_src

*** Autorevert (Built-In)

#+name: init-autorevert-block
#+begin_src emacs-lisp
  (use-package autorevert
    :straight (:type built-in)
    :ghook ('emacs-startup-hook #'global-auto-revert-mode)
    :config
    (general-setq auto-revert-verbose nil
                  auto-revert-check-vc-info t
                  global-auto-revert-non-file-buffers t
                  auto-revert-interval 1
                  revert-without-query '(".*")
                  auto-revert-use-notify nil))
#+end_src

*** Bookmark (Built-In)

#+name: init-bookmark-block
#+begin_src emacs-lisp
  (use-package bookmark
    :straight (:type built-in)
    :config
    (general-setq bookmark-save-flag +1))
#+end_src

*** Browse-Url (Built-In)

#+name: init-browse-url-block
#+begin_src emacs-lisp
  (use-package browse-url
    :straight (:type built-in))
#+end_src

*** Calculator (Built-In)

Let's add a few helpful units to the calculator.

#+name: init-calc-block
#+begin_src emacs-lisp
  (use-package calc
    :straight (:type built-in)
    :config
    (general-setq math-additional-units
                  '((GiB "1024 * MiB" "Giga Byte")
                    (MiB "1024 * KiB" "Mega Byte")
                    (KiB "1024 * B" "Kilo Byte")
                    (B nil "Byte")
                    (Gib "1024 * Mib" "Giga Bit")
                    (Mib "1024 * Kib" "Mega Bit")
                    (Kib "1024 * b" "Kilo Bit")
                    (b "B / 8" "Bit"))))
#+end_src

*** Calendar (Built-In)

#+name: init-calendar-block
#+begin_src emacs-lisp
  (use-package calendar
    :straight (:type built-in)
    :ghook ('calendar-today-visible-hook #'calendar-mark-today)
    :config
    (general-setq calendar-longitude 43.492
                  calendar-latitude -112.034
                  calendar-location-name "Idaho Falls, Idaho"
                  calendar-holiday-marker t))
#+end_src

*** Checkdoc (Built-In)

#+name: init-checkdoc-block
#+begin_src emacs-lisp
  (use-package checkdoc
    :straight (:type built-in)
    :config
    (put 'checkdoc-package-keywords-flag 'safe-local-variable #'booleanp))
#+end_src

*** CL-Lib (Built-In)

#+name: init-cl-lib-block
#+begin_src emacs-lisp
  (use-package cl-lib
    :demand t :straight (:type built-in))
#+end_src

*** Comint (Built-In)

#+name: init-comint-block
#+begin_src emacs-lisp
  (use-package comint
    :straight (:type built-in)
    :config
    (general-setq comint-prompt-read-only t
                  comint-move-point-for-output t
                  comint-scroll-show-maximum-output t
                  comint-scroll-to-bottom-on-output t
                  comint-scroll-to-botom-on-input t))
#+end_src

*** Compile (Built-In)

#+name: init-compile-block
#+begin_src emacs-lisp
  (use-package compile
    :straight (:type built-in)
    :config
    (general-setq compilation-message-face 'compilation-base-face
                  compilation-always-kill t
                  compilation-ask-about-save nil
                  compilation-scroll-output 'first-error))
#+end_src

*** Conf-Mode (Built-In)

#+name: init-conf-mode-block
#+begin_src emacs-lisp
  (use-package conf-mode
    :straight (:type built-in))
#+end_src

*** Cus-Start (Built-In)

I bassically use this block to load all settings that don't have a loaded emacs library.

#+name: init-cus-start-block
#+begin_src emacs-lisp
  (use-package cus-start
    :straight (:type built-in)
    :init
    (general-setq-default apropos-do-all t
                          auto-save-list-file-prefix nil
                          auto-save-list-file-name nil
                          auto-window-vscroll nil
                          bidi-paragraph-separate-re "^"
                          bidi-paragraph-start-re "^"
                          cursor-in-non-selected-windows nil
                          cursor-type 'bar
                          delete-by-moving-to-trash t
                          disabled-command-function nil
                          display-line-numbers-width 3
                          display-line-numbers-widen t
                          default-directory "~"
                          echo-keystrokes 0.02
                          electric-pair-mode 1
                          enable-recursive-minibuffers t
                          fast-but-imprecise-scrolling t
                          ffap-machine-p-known 'reject
                          fill-column 80
                          frame-resize-pixelwise t
                          frame-title-format '("%b - Emacs")
                          highlight-nonselected-windows nil
                          history-delete-duplicates t
                          history-length 3000
                          icon-title-format frame-title-format
                          indicate-buffer-boundaries nil
                          indicate-empty-lines nil
                          initial-major-mode 'fundamental-mode
                          initial-scratch-message ";; Welcome to the Church of Emacs! 🙏\n"
                          inhibit-compacting-font-caches t
                          inhibit-startup-echo-area-message t
                          inhibit-startup-screen t
                          indent-tabs-mode nil
                          resize-mini-windows 'grow-only
                          max-mini-window-height 0.15
                          ring-bell-function #'ignore
                          split-width-threshold 160
                          split-height-threshold nil
                          scroll-conservatively 101
                          scroll-margin 5
                          scroll-preserve-screen-position t
                          scroll-step 1
                          sentence-end-double-space nil
                          tab-always-indent 'complete
                          tab-width 4
                          truncate-lines t
                          truncate-partial-width-windows nil
                          use-dialog-box nil
                          use-file-dialog nil
                          visible-bell nil
                          window-combination-resize t
                          window-resize-pixelwise t
                          word-wrap t
                          x-underline-at-descent-line t))
#+end_src

*** Delsel (Built-In)

#+name: init-delsel-block
#+begin_src emacs-lisp
  (use-package delsel
    :straight (:type built-in)
    :ghook ('emacs-startup-hook #'delete-selection-mode))
#+end_src

*** Doc-View (Built-In)

#+name: init-doc-view-block
#+begin_src emacs-lisp
  (use-package doc-view
    :straight (:type built-in)
    :config
    (general-setq doc-view-continuous t))
#+end_src

*** Ediff (Built-In)

#+name: init-ediff-block
#+begin_src emacs-lisp
  (use-package ediff
    :straight (:type built-in)
    :config
    (general-setq ediff-window-setup-function #'ediff-setup-windows-plain
                  ediff-diff-options "-w"
                  ediff-split-window-function #'split-window-horizontally))
#+end_src

*** Eldoc (Built-In)
#+name: init-eldoc-block
#+begin_src emacs-lisp
  (use-package eldoc
    :blackout t
    :straight (:type built-in)
    :ghook ('emacs-lisp-mode-hook #'turn-on-eldoc-mode)
    :config
    (general-setq eldoc-idle-delay 0.2
                  eldoc-echo-area-use-multiline-p nil))
#+end_src

*** Electric (Built-In)

#+name: init-electric-block
#+begin_src emacs-lisp
  (use-package electric
    :straight (:type built-in)
    :config
    (general-setq-default electric-indent-chars '(?\n ?\^?)))
#+end_src

*** Epa (Built-In)

#+name: init-epa-block
#+begin_src emacs-lisp
  (use-package epa
    :straight (:type built-in)
    :config
    (general-setq epa-replace-original-text t))
#+end_src

*** Epg (Built-In)

#+name: init-epg-block
#+begin_src emacs-lisp
  (use-package epg
    :straight (:type built-in)
    :config
    (general-setq epg-pinentry-mode 'loopback))
#+end_src

*** Ert (Built-In)
#+name: init-ert-block
#+begin_src emacs-lisp
  (use-package ert
    :straight (:type built-in))
#+end_src

*** Eshell (Built-In)

#+name: init-eshell-block
#+begin_src emacs-lisp
  (use-package eshell
    :straight (:type built-in))
#+end_src

*** Eww (Built-In)

#+name: init-web-browsing-block
#+begin_src emacs-lisp
  (use-package eww
    :straight (:type built-in))
#+end_src

*** Face-Remap (Built-In)

#+name: init-face-remap-block
#+begin_src emacs-lisp
  (use-package face-remap
    :straight (:type built-in))
#+end_src

*** Files (Built-In)

#+name: init-files-block
#+begin_src emacs-lisp
  (use-package files
    :straight (:type built-in)
    :config
    (general-setq-default auto-mode-case-fold nil
                          auto-save-file-name-transforms `((".*" ,djm--auto-save-file-cache t))
                          backup-by-copying t
                          backup-directory-alist `((".*" . ,djm--auto-save-file-cache))
                          confirm-kill-processes nil
                          confirm-nonexistent-file-or-buffer nil
                          create-lockfiles nil
                          delete-old-versions t
                          enable-local-variables :all
                          find-file-suppress-same-file-warnings t
                          find-file-visit-truename t
                          insert-directory-program "gls"
                          kept-new-versions 6
                          large-file-warning-threshold 10000000000
                          require-final-newline t
                          select-enable-clipboard t
                          version-control t
                          view-read-only t))
#+end_src

*** Flyspell (Built-In)

#+name: init-flyspell-block
#+begin_src emacs-lisp
  (use-package flyspell
    :straight (:type built-in)
    :config
    (general-setq flyspell-abbrev-p t
                  flyspell-use-global-abbrev-table-p t
                  flyspell-issue-welcome-flag nil
                  flyspell-issue-message-flag nil))
#+end_src

*** Frame (Built-In)

#+name: init-frame-block
#+begin_src emacs-lisp
  (use-package frame
    :straight (:type built-in)
    :ghook ('after-init-hook #'djm/turn-off-mouse-modes)
    :preface
    (defun djm/turn-off-mouse-modes ()
      (blink-cursor-mode -1)
      (tooltip-mode -1)
      (mouse-wheel-mode -1)
      (global-so-long-mode +1)
      (unless (display-graphic-p)
        (menu-bar-mode -1)))
    :config
    (general-setq window-divider-default-places t
                  window-divider-default-bottom-width 1
                  window-divider-default-right-width 1))
#+end_src

*** Gnutls (Built-In)
#+name: init-gnutls-block
#+begin_src emacs-lisp
  (use-package gnutls
    :straight (:type built-in)
    :config
    (general-setq gnutls-verify-error t
                  gnutls-min-prime-bits 2048
                  tls-checktrust gnutls-verify-error
                  tls-program '("guntls-cli --x509cafile %g -p %p %h"
                                "gnutls-cli -p %p %h"
                                "openssl s_client -connect %h:%p -no_ssl2 -no_ssl3 -ign_eof")))
#+end_src

*** Goto-Addr (Built-In)

#+name: init-goto-addr-block
#+begin_src emacs-lisp
  (use-package goto-addr
    :straight (:type built-in)
    :ghook ('text-mode-hook #'goto-address-mode)
    :ghook ('prog-mode-hook #'goto-address-prog-mode))
#+end_src

*** Help (Built-In)

#+name: init-help-block
#+begin_src emacs-lisp
  (use-package help
    :straight (:type built-in)
    :config
    (general-setq help-window-select 'always)
    (general-add-advice 'help-window-display-message :override #'ignore))
#+end_src

*** Hideshow (Built-In)
#+name: init-hideshow-block
#+begin_src emacs-lisp
  (use-package hideshow
    :straight (:type built-in)
    :ghook ('prog-mode-hook #'hs-minor-mode))
#+end_src

*** iElm (Built-In)
#+name: init-ielm-block
#+begin_src emacs-lisp
  (use-package ielm
    :straight (:type built-in)
    :config
    (general-add-hook 'inferior-emacs-lisp-mode-hook #'hs-minor-mode)

    (add-to-list 'display-buffer-alist
                 `(,(rx bos "*ielm*" eos)
                   (display-buffer-reuse-window display-buffer-in-side-window)
                   (side . right)
                   (window-width . 80))))
#+end_src

*** iMenu (Built-In)

#+name: init-imenu-block
#+begin_src emacs-lisp
  (use-package imenu
    :straight (:type built-in))
#+end_src

*** iSearch (Built-In)

#+name: init-isearch-block
#+begin_src emacs-lisp
  (use-package isearch
    :straight (:type built-in)
    :config
    (general-setq lazy-highlight-initial-delay 0))
#+end_src

*** iSpell (Built-In)

#+name: init-ispell-block
#+begin_src emacs-lisp
  (use-package ispell
    :straight (:type built-in)
    :preface
    (defun djm/fetch-hunspell-dictionary ()
      (unless (file-exists-p "~/Library/Spelling/en_US.aff")
        (shell-command "bash $DOTFILES/bootstrap/bootstrap_dicts.sh")))
    :config
    (djm/fetch-hunspell-dictionary)
    (general-setq ispell-dictionary "en_US"
                  ispell-program-name (executable-find "hunspell")
                  ispell-really-hunspell t
                  ispell-silently-savep t)
    (dolist (regions '((":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:")
                       ("#\\+BEGIN_SRC" . "#\\+END_SRC")
                       ("#\\+BEGIN_EXAMPLE" . "#\\+END_EXAMPLE")))
      (general-pushnew regions ispell-skip-region-alist)))
#+end_src

*** Make-Mode (Built-In)

#+name: init-makefile-block
#+begin_src emacs-lisp
  (use-package make-mode
    :straight (:type built-in)
    :blackout ((makefile-automake-mode . "Makefile")
               (makefile-gmake-mode . "Makefile")
               (makefile-makepp-mode . "Makefile")
               (makefile-bsdmake-mode . "Makefile")
               (makefile-imake-mode . "Makefile"))
    :init
    (general-add-hook 'makefile-mode-hook '(lambda () (setq-local indent-tabs-mode t))))
#+end_src

*** Message (Built-In)
#+name: init-message-block
#+begin_src emacs-lisp
  (use-package message
    :straight (:type built-in)
    :config
    (general-setq send-mail-function 'sendmail-send-it
                  sendmail-program "/usr/local/bin/msmtp"
                  mail-specify-envelope-from t
                  message-sendmail-envelope-from 'header
                  mail-envelope-from 'header))
#+end_src

*** Minibuffer (Built-In)

#+name: init-mini-buffer-block
#+begin_src emacs-lisp
  (use-package minibuffer
    :straight (:type built-in)
    :general
    ("C-g" #'minibuffer-keyboard-quit)
    :config
    (general-setq minibuffer-prompt-properties
                  '(read-only t intangible t cursor-intangible t face minibuffer-prompt))

    (defun djm/minibuffer-setup-hook ()
      "With modern packages like Ivy/Counsel, let's extend the gc-threshold while
    using the minibuffer to maximize performance"
      (setq gc-cons-threshold extended-gc-cons-threshold))

    (defun djm/minibuffer-exit-hook ()
      "Upon exiting the minibuffer, we'll set everything back to normal"
      (setq gc-cons-threshold default-gc-cons-threshold))

    (general-add-hook 'minibuffer-setup-hook #'djm/minibuffer-setup-hook)
    (general-add-hook 'minibuffer-exit-hook #'djm/minibuffer-exit-hook)
    (general-add-hook 'minibuffer-setup-hook #'cursor-intangible-mode))
#+end_src

*** New-Comment (Built-In)
#+name: init-new-comment-block
#+begin_src emacs-lisp
  (use-package newcomment
    :straight (:type built-in))
#+end_src

*** NS-Win (Built-In)

#+name: init-ns-win-block
#+begin_src emacs-lisp
  (use-package ns-win
    :straight (:type built-in)
    :config
    (general-setq mac-command-modifier 'meta
                  mac-option-modifier 'super
                  mac-right-control-modifier 'hyper))
#+end_src

*** Outline (Built-In)

#+name: init-outline-block
#+begin_src emacs-lisp
  (use-package outline
    :straight (:type built-in))
#+end_src

*** Paren (Built-In)

#+name: init-paren-block
#+begin_src emacs-lisp
  (use-package paren
    :straight (:type built-in)
    :ghook ('emacs-startup-hook #'show-paren-mode)
    :config
    (general-setq show-paren-delay 0))
#+end_src

*** Pixel-Scroll (Built-In)

#+name: init-pixel-scroll-block
#+begin_src emacs-lisp
  (use-package pixel-scroll
    :straight (:type built-in)
    :ghook 'emacs-startup-hook)
#+end_src

*** Prog-Mode (Built-In)

#+name: init-prog-mode-block
#+begin_src emacs-lisp
  (use-package prog-mode
    :straight (:type built-in)
    :gfhook
    #'display-fill-column-indicator-mode
    #'show-paren-mode
    #'prettify-symbols-mode
    :config
    (general-setq prettify-symbols-unprettify-at-point 'right)
    (general-add-hook 'after-save-hook #'executable-make-buffer-file-executable-if-script-p))
#+end_src

*** Project (Built-In)
#+name: init-project-block
#+begin_src emacs-lisp
  (use-package project
    :straight (:type built-in))
#+end_src

*** Recentf (Built-In)

#+name: init-recentf-block
#+begin_src emacs-lisp
  (use-package recentf
    :straight (:type built-in)
    :ghook 'pre-command-hook
    :general
    ("C-x C-r" #'crux-recentf-find-file)
    :config
    (general-setq recentf-max-saved-items 2000
                  recentf-max-menu-items 100
                  recentf-auto-cleanup 'never)
    (arco/run-at-active-interval (* 5 60) 10
      (let ((inhibit-message t))
        (recentf-save-list))))
#+end_src

*** Savehist (Built-In)

#+name: init-savehist-block
#+begin_src emacs-lisp
  (use-package savehist
    :straight (:type built-in)
    :ghook 'emacs-startup-hook
    :config
    (general-setq savehist-additional-variables '(mark-ring
                                                  global-mark-ring
                                                  search-ring
                                                  kill-ring
                                                  regexp-search-ring
                                                  extended-command-history)
                  savehist-autosave-interval nil
                  savehist-save-minibuffer-history t))
#+end_src

*** Saveplace (Built-In)

#+name: init-saveplace-block
#+begin_src emacs-lisp
  (use-package saveplace
    :straight (:type built-in)
    :ghook ('emacs-startup-hook #'save-place-mode))
#+end_src

*** Select (Built-In)
#+name: init-select-block
#+begin_src emacs-lisp
  (use-package select
    :straight (:type built-in)
    :config
    (general-setq select-enable-clipboard t
                  x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src

*** Shell-Script (Built-In)
#+name: init-shell-script-block
#+begin_src emacs-lisp
  (use-package sh-script
    :straight (:type built-in)
    :mode (("\\.[a-zA-Z]+rc$" . sh-mode))
    :init
    (defun arco/sh-script-prettify-mode-line ()
      (general-setq mode-line-process nil)
      (when (eq major-mode 'sh-mode)
        (general-setq mode-name (capitalize (symbol-name sh-shell)))))

    (general-add-hook 'sh-mode-hook #'arco/sh-script-prettify-mode-line)
    :config
    (general-setq sh-indentation 2
                  sh-basic-offset 2
                  sh-indent-after-continuation 'always))
#+end_src

*** Simple (Built-In)

#+name: init-simple-block
#+begin_src emacs-lisp
  (use-package simple
    :straight (:type built-in)
    :general
    ("C-x p" #'pop-to-mark-command)
    :config
    (general-setq blink-matching-paren t
                  column-number-mode nil
                  delete-trailing-lines nil
                  eval-expression-print-length nil
                  eval-expression-print-level nil
                  idle-update-delay 1
                  inhibit-point-motion-hooks t
                  kill-do-not-save-duplicates t
                  kill-ring-max 300
                  line-move-visual nil
                  line-number-mode t
                  mode-line-percent-position nil
                  save-interprogram-paste-before-kill t
                  set-mark-command-repeat-pop t
                  shift-select-mode nil
                  show-trailing-whitespace nil))
#+end_src

*** Smerge (Built-In)

#+name: init-smerge-block
#+begin_src emacs-lisp
  (use-package smerge-mode
    :straight (:type built-in)
    :commands (smerge-mode))
#+end_src

*** Subr-X (Built-In)
#+name: init-subr-x-block
#+begin_src emacs-lisp
  (use-package subr-x
    :straight (:type built-in)
    :init
    (defun display-buffer-fullframe (buffer alist)
      (when-let* ((window (or (display-buffer-reuse-window buffer alist)
                              (display-buffer-same-window buffer alist)
                              (display-buffer-pop-up-window buffer alist)
                              (display-buffer-use-some-window buffer alist))))
        (delete-other-windows window)
        window)))
#+end_src

*** Subword (Built-In)

#+name: init-subword-block
#+begin_src emacs-lisp
  (use-package subword
    :straight (:type built-in)
    :ghook ('emacs-startup-hook #'global-subword-mode))
#+end_src

*** Time (Built-In)

#+name: init-time-block
#+begin_src emacs-lisp
  (use-package time
    :straight (:type built-in)
    :ghook ('emacs-startup-hook #'display-time-mode)
    :config
    (general-setq-default display-time-24hr-format nil
                          display-time-day-and-date t
                          display-time-default-load-average nil))
#+end_src

*** Tramp (Built-In)
#+name: init-tramp-block
#+begin_src emacs-lisp
  (use-package tramp
    :straight (:type built-in)
    :config
    (general-setq tramp-default-method "ssh"
                  tramp-verbose 5
                  tramp-completion-reread-directory-timeout nil
                  vc-ignore-dir-regexp (format "\\(%s\\)\\|\\(%s\\)"
                                               vc-ignore-dir-regexp
                                               tramp-file-name-regexp)))
#+end_src

*** Uniquify (Built-In)

#+name: init-uniquify-block
#+begin_src emacs-lisp
  (use-package uniquify
    :straight (:type built-in)
    :config
    (general-setq uniquify-ignore-buffers-re "^\\*"
                  uniquify-buffer-name-style 'forward
                  uniquify-separator "/"))
#+end_src

*** VC-Hooks (Built-In)

#+name: init-vc-hooks-block
#+begin_src emacs-lisp
  (use-package vc-hooks
    :straight (:type built-in)
    :config
    (general-setq vc-follow-symlinks t
                  vc-handled-backends nil))
#+end_src

*** View (Built-In)

#+name: init-view-block
#+begin_src emacs-lisp
  (use-package view
    :straight (:type built-in)
    :config
    (general-setq view-inhibit-help-message t))
#+end_src

*** Warnings (Built-In)

#+name: init-warnings-block
#+begin_src emacs-lisp
  (use-package warnings
    :straight (:type built-in))
#+end_src

*** Whitespace (Built-In)

#+name: init-whitespace-block
#+begin_src emacs-lisp
  (use-package whitespace
    :straight (:type built-in))
#+end_src

*** Winner (Built-In)
#+name: init-winner-block
#+begin_src emacs-lisp
  (use-package winner
    :straight (:type built-in)
    :ghook 'emacs-startup-hook
    :config
    (general-setq winner-boring-buffers '("*Completions*"
                                          "*Compile-Log*"
                                          "*inferior-lisp*"
                                          "*Fuzzy Completions*"
                                          "*Apropos*"
                                          "*Help*"
                                          "*Buffer List*"
                                          "*Ibuffer*")))
#+end_src

*** XRef (Built-In)

#+name: init-xref-block
#+begin_src emacs-lisp
  (use-package xref
    :straight (:type built-in))
#+end_src

** User Files
*** Custom File

#+name: init-custom-load-block
#+begin_src emacs-lisp
  (use-package cus-edit
    :straight (:type built-in)
    :config
    (general-setq custom-file djm--custom-file)
    (when (file-exists-p custom-file)
      (load custom-file :noerror)))
#+end_src

*** Secret File

#+name: init-secret-load-block
#+begin_src emacs-lisp :tangle no
  (when (file-exists-p arco--user-secret-file)
    (load arco--user-secret-file :noerror)
    (general-setq-default user-mail-address arco--user-email
                          user-full-name arco--user-name))
#+end_src

** Themes & Aesthetics
*** Adaptive Wrap Prefix Mode

This package isn't as reliable as I hoped it would be. It never seems to format my org files automatically.
#+name: init-adaptive-wrap-prefix-mode-block
#+begin_src emacs-lisp
  (use-package adaptive-wrap
    :straight t)
#+end_src

*** [[https://github.com/yoshiki/yaml-mode][All-The-Icons]]

Sort of a standard package in most emacs-configs these days.

#+name: init-all-the-icons-block
#+begin_src emacs-lisp
  (use-package all-the-icons
    :straight t
    :config
    (general-setq all-the-icons-scale-factor 1.3)
    (general-pushnew '("\\.db$" all-the-icons-faicon "database" :face all-the-icons-blue) all-the-icons-icon-alist))
#+end_src

*** [[https://github.com/purcell/default-text-scale][Default-Text-Scale]]

- TODO: Figure out how to config my fonts so this changes all font sizes consistently.

#+name: init-default-text-scale-block
#+begin_src emacs-lisp
  (use-package default-text-scale
    :straight t
    :general
    ("<C-s-up>" #'default-text-scale-increase
     "<C-s-down>" #'default-text-scale-decrease
     "<C-M-s-down>" #'default-text-scale-reset)
    :config
    (general-setq default-text-scale-amount 20))
#+end_src

*** [[https://github.com/seagle0128/doom-modeline][Doom-Modeline]]

I hesitated to use doom-modeline for a long time because it always seemed to slow down my emacs. I recently made the switch from smart-mode-line and it's /okay/. I probably need to get in here and add a few more customizations before I'm satisfied.

#+name: init-doom-modeline-block
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ghook 'after-init-hook
    :config
    (general-setq doom-modeline-buffer-file-name-style 'relative-from-project
                  doom-modeline-height 10
                  doom-modeline-github t
                  doom-modeline-mu4e t
                  doom-modeline-project-detection 'projectile))
#+end_src

*** [[https://github.com/hlissner/emacs-doom-themes][Doom-Themes]]

I really like the functions that doom-themes provides but do not like the gruvbox theme it comes with. I would like to create my own theme that provide similar API commands.

#+name: init-doom-themes-block
#+begin_src emacs-lisp :tangle no
  (use-package doom-themes
    :demand t :straight t
    :config/el-patch
    (general-setq doom-themes-enable-bold t
                  doom-themes-enable-italic t)
    (load-theme 'doom-laserwave t)
    (doom-themes-org-config)
    (doom-themes-visual-bell-config)
    (configure-fonts)
    ;; Taken from Chris Barrett doom-modeline-hacks.el
    (el-patch-defun doom-modeline-set-modeline (key &optional default)
      "Set the modeline format. Does nothing if the modeline KEY doesn't exist.
  If DEFAULT is non-nil, set the default mode-line for all buffers."
      (when-let ((modeline (doom-modeline key)))
        (el-patch-wrap 2
          (unless (frame-parent)
            (setf (if default
                      (default-value (el-patch-swap 'mode-line-format 'header-line-format))
                    (buffer-local-value (el-patch-swap 'mode-line-format 'header-line-format) (current-buffer)))
                  (list "%e" modeline)))))))
#+end_src

*** [[https://github.com/dylanjm/emacs-theme-gruvbox][Gruvbox Theme]]

My own personal fork of the gruvbox-theme. I've mostly added color-modes for missing packages.

#+name: init-gruvbox-theme-block
#+begin_src emacs-lisp
  (use-package gruvbox-theme
    :straight (:host github :repo "dylanjm/emacs-theme-gruvbox")
    :ghook ('emacs-startup-hook #'djm/load-gruvbox-theme)
    :preface
    (defun djm/load-gruvbox-theme ()
      (load-theme 'gruvbox-dark-hard t))

    (defun djm/config-fonts (frame)
      (dolist (script '(symbol mathematical))
        (set-fontset-font "fontset-default" script (font-spec :family "XITS Math" :weight 'normal) nil nil))

      ;; Define a font set stack for symbols, greek and math characters
      (dolist (script '(symbol greek))
        (set-fontset-font "fontset-default" script (font-spec :family "Symbola") nil 'append))

      ;; Colored Emoji on OS X, prefer over everything else!
      (set-fontset-font "fontset-default" 'unicode (font-spec :family "Symbola") nil nil)
      (set-fontset-font "fontset-default" 'unicode (font-spec :family "Apple Color Emoji") nil 'prepend)

      (set-fontset-font "fontset-default" nil (font-spec :family "Apple Symbols") nil 'append))

    (when-let (frame (selected-frame))
      (djm/config-fonts frame))

    (general-add-hook 'after-make-frame-functions #'djm/config-fonts))
#+end_src

*** [[https://github.com/hlissner/emacs-hide-mode-line][Hide-Mode-Line-Mode]]

#+name: init-hide-mode-line-block
#+begin_src emacs-lisp
  (use-package hide-mode-line
    :straight t
    :commands (hide-mode-line-mode))
#+end_src

*** [[https://github.com/ubolonton/info-colors][Info-Colors]]

#+name: init-info-colors-block
#+begin_src emacs-lisp
  (use-package info-colors
    :straight (:host github :repo "ubolonton/info-colors")
    :init
    (general-add-hook 'Info-selection-hook #'info-colors-fontify-mode))
#+end_src

*** [[https://github.com/purcell/page-break-lines][Page-Break-Lines]]
This package is great, but can be a little annoying. It can sometimes slow-down emacs a ton.
#+name: init-page-break-lines-block
#+begin_src emacs-lisp
  (use-package page-break-lines
    :blackout t :straight t
    :ghook djm--page-break-line-hooks
    :preface
    (defconst djm--page-break-line-hooks
      '(ibuffer-mode-hook
        text-mode-hook
        comint-mode-hook
        compilation-mode-hook
        ledger-report-mode-hook
        help-mode-hook
        helpful-mode-hook
        org-agenda-mode-hook)))
#+end_src

*** [[https://github.com/Fanael/persistent-scratch][Persistent-Scratch]]

This is a cool package that I never knew I needed until I found out it existed. So many times I write some quick code to a scratch buffer and accidently lose it when closing Emacs. This will save it to a file for you periodically. It is a little finnicky about being consistent though. I probably need to configure it more.
#+name: init-persistent-scratch-block
#+begin_src emacs-lisp
  (use-package persistent-scratch
    :straight t
    :init
    (general-setq persistent-scratch-autosave-interval 60)
    (run-with-idle-timer 3 nil
                         (lambda ()
                           (persistent-scratch-setup-default))))
#+end_src

*** [[https://github.com/emacsmirror/rainbow-mode][Rainbow-Mode]]
#+name: init-rainbow-mode-block
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :blackout t :straight t
    :ghook '(prog-mode-hook text-mode-hook org-mode-hook))
#+end_src

*** [[https://github.com/k-talo/volatile-highlights.el][Volatile-Highlights]]
#+name: init-volatile-highlights-block
#+begin_src emacs-lisp :tangle no
  (use-package volatile-highlights
    :blackout t :straight t
    :ghook 'emacs-startup-hook)
#+end_src

** Meta
*** [[https://gitlab.com/koral/gcmh/][GCMH]]
#+name: init-gcmh-block
#+begin_src emacs-lisp
  (use-package gcmh
    :straight t
    :ghook 'pre-command-hook
    :config
    (general-setq gcmh-idle-delay 10
                  gcmh-high-cons-threshold 16777216) ;; 16mb
    (general-add-hook 'focus-out-hook #'gcmh-idle-garbage-collect))
#+end_src

*** [[https://github.com/emacsorphanage/osx-trash][Restart-Emacs]]
A nice way to restart emacs on the fly if you need to.
#+name: init-restart-emacs-block
#+begin_src emacs-lisp
  (use-package restart-emacs
    :straight t
    :init (defalias 're #'restart-emacs))
#+end_src

** System
*** [[https://github.com/emacsorphanage/osx-trash][OSX-Trash]]
#+name: init-osx-trash-block
#+begin_src emacs-lisp
  (use-package osx-trash
    :straight t
    :ghook ('after-init-hook #'osx-trash-setup))
#+end_src

** Shells
*** [[https://github.com/manateelazycat/aweshell][Aweshell]]
#+name: init-aweshell-block
#+begin_src emacs-lisp
  (use-package aweshell
    :straight (:host github :repo "manateelazycat/aweshell")
    :general
    ("C-c x t" #'aweshell-dedicated-toggle)
    (:keymaps 'eshell-mode-map
     "C-d" #'aweshell-dedicated-close)
    :config/el-patch
    (el-patch-defun epe-remote-user ()
      "Return remote user name."
      (or (tramp-file-name-user (tramp-dissect-file-name default-directory)) "mcdodyla"))

    (el-patch-defun aweshell-dedicated-close ()
      "Close dedicated `aweshell' window."
      (interactive)
      (if (aweshell-dedicated-exist-p)
          (let ((current-window (selected-window)))
            ;; Remember height.
            (aweshell-dedicated-select-window)
            (kill-buffer aweshell-dedicated-buffer)
            (if (aweshell-window-exist-p current-window)
                (select-window current-window)))
        (message "`AWESHELL DEDICATED' window is not exist.")))


    (general-setq aweshell-complete-selection-key "C-f")
    (general-setq eshell-highlight-prompt nil
                  eshell-prompt-function #'epe-theme-pipeline
                  epe-path-style 'fish)
    (general-setq eshell-up-ignore-case nil
                  eshell-up-print-parent-dir t)
    (general-setq aweshell-use-exec-path-from-shell t
                  aweshell-dedicated-window-height 25))
#+end_src

*** [[https://github.com/suonlight/multi-libvterm][Multi-Libvterm]]
#+name: init-multi-vterm-block
#+begin_src emacs-lisp
  (use-package multi-libvterm
    :straight (:host github :repo "suonlight/multi-libvterm")
    :general
    ("C-c x v" #'multi-libvterm-dedicated-toggle)
    :config
    (general-setq multi-libvterm-dedicated-window-height 25))
#+end_src

*** [[https://github.com/akermu/emacs-libvterm][Vterm]]
#+name: init-vterm-block
#+begin_src emacs-lisp
  (use-package vterm
    :straight t
    :preface
    (defun find-file-below (path)
      (if-let* ((buf (find-file-noselect path))
                (window (display-buffer-below-selected buf nil)))
          (select-window window)
        (message "Failed to open file: %s" path)))
    :config
    (defun arco/vterm-kill-buffer-on-quit (buffer event)
      (if buffer (kill-buffer buffer)))

    (general-setq vterm-term-environment-variable "xterm-256color")
    (general-add-hook 'vterm-exit-functions #'arco/vterm-kill-buffer-on-quit)
    (general-pushnew '("find-file-below" find-file-below) vterm-eval-cmds))
#+end_src

*** [[https://github.com/dieggsy/eterm-256color][Eterm-256color]]
#+name: init-eterm-256color-block
#+begin_src emacs-lisp
  (use-package eterm-256color
    :straight t
    :init
    (general-add-hook 'term-mode-hook #'eterm-256color-mode)
    (general-add-hook 'vterm-mode-hook #'eterm-256color-mode))
#+end_src

** Project Management
*** [[https://github.com/bbatsov/projectile][Projectile]]
#+name: init-projectile-block
#+begin_src emacs-lisp
  (use-package projectile
    :blackout t :straight t
    :ghook 'emacs-startup-hook
    :general
    (:prefix "C-c p"
     "s" #'projectile-switch-project
     "c" #'projectile-compile-project
     "f" #'projectile-find-file)
    :preface
    (defun projectile-project-find-function (dir)
      (let* ((root (projectile-project-root dir)))
        (and root (cons 'transient root))))
    :config
    (general-setq projectile-completion-system 'default
                  projectile-enable-caching t
                  projectile-switch-project-action 'projectile-commander)
    (general-pushnew 'projectile-project-find-function project-find-functions))
#+end_src

#+RESULTS: init-projectile-block

*** [[https://github.com/wbolster/emacs-direnv][Direnv]]
#+name: init-direnv-block
#+begin_src emacs-lisp
  (use-package direnv
    :straight t
    :ghook 'projectile-mode-hook)
#+end_src

** Frameworks
*** [[https://github.com/raxod502/prescient.el][Prescient]]
#+name: init-prescient-block
#+begin_src emacs-lisp
  (use-package prescient
    :straight t
    :config (prescient-persist-mode +1))
#+end_src

*** [[https://github.com/lewang/flx][FLX]]
#+name: init-flx-block
#+begin_src emacs-lisp
  (use-package flx
    :straight t)
#+end_src

*** [[https://github.com/abo-abo/swiper][Swiper]]
#+name: init-swiper-block
#+begin_src emacs-lisp :tangle no
  (use-package swiper
    :straight t
    :general ("C-s" #'swiper
              "C-r" #'swiper)
    :config
    (general-setq swiper-goto-start-of-match t
                  swiper-action-recenter t))
#+end_src

*** [[https://github.com/raxod502/ctrlf][Ctrl-F]]
#+name: init-ctrl-f-block
#+begin_src emacs-lisp
  (use-package ctrlf
    :straight (:host github :repo "raxod502/ctrlf")
    :ghook 'emacs-startup-hook)
#+end_src

*** [[https://github.com/raxod502/selectrum][Selectrum]]
#+name: init-selectrum-block
#+begin_src emacs-lisp
  (use-package selectrum
    :straight (:host github
               :repo "raxod502/selectrum"
               :files ("*.el"))
    :ghook 'emacs-startup-hook
    :config
    (general-setq selectrum-num-candidates-displayed 15))


    (use-package selectrum-prescient
      :straight (:host github
                 :repo "raxod502/prescient.el"
                 :files ("selectrum-prescient.el"))
      :ghook 'selectrum-mode-hook)
#+end_src

** Autocompletion
*** [[https://github.com/company-mode/company-mode][Company]]
#+name: init-company-block
#+begin_src emacs-lisp
  (use-package company
    :straight t
    :ghook ('after-init-hook #'global-company-mode)
    :general
    ([remap completion-at-point] #'company-manual-begin
     [remap complete-symbol] #'company-manual-begin)
    (:keymaps 'company-active-map
     "TAB"     #'company-complete-selection
     "<tab>"   #'company-complete-selection)
    (:keymaps 'company-active-map
     :predicate '(company-explicit-action-p)
     "<return>" #'company-complete-selection
     "RET"      #'company-complete-selection)
    (:keymaps 'comint-mode-map
     [remap indent-for-tab-command] #'company-manual-begin)
    :preface
    (general-unbind :keymaps 'company-active-map "C-w" "C-h")
    :config
    (general-setq company-async-timeout 30
                  company-dabbrev-other-buffers nil
                  company-dabbrev-ignore-case nil
                  company-dabbrev-downcase nil
                  company-idle-delay .3
                  company-minimum-prefix-length 2
                  company-show-numbers t
                  company-require-match #'company-explicit-action-p
                  company-auto-complete-chars nil
                  company-tooltip-limit 15
                  company-tooltip-align-annotations t)

    (general-setq company-global-modes
                  '(not message-mode
                        help-mode
                        gud-mode
                        vterm-mode
                        term-mode))

    (general-setq company-frontends '(company-pseudo-tooltip-frontend
                                      company-echo-metadata-frontend)))
#+end_src

*** [[https://github.com/sebastiencs/company-box][Company-Box]]
#+name: init-company-box-block
#+begin_src emacs-lisp
  (use-package company-box
    :blackout t :straight t
    :ghook 'company-mode-hook
    :general
    (:keymaps '(company-active-map company-search-map company-filter-map)
     "C-n" #'company-box--next-line
     "C-p" #'company-box--prev-line)
    :config/el-patch
    (general-setq company-box-icons-alist 'company-box-icons-all-the-icons
                  company-box-enable-icon t)

    ;; Fix background colour on theme change.
    (el-patch-defun company-box--display (string)
      "Display the completions."
      (company-box--render-buffer string)
      (unless (company-box--get-frame)
        (company-box--set-frame (company-box--make-frame)))
      (el-patch-add
        (with-selected-frame (company-box--get-frame)
          (set-background-color (face-background 'company-box-background nil t))))
      (company-box--set-frame-position (company-box--get-frame))
      (unless (frame-visible-p (company-box--get-frame))
        (make-frame-visible (company-box--get-frame)))
      (company-box--update-scrollbar (company-box--get-frame) t))


    ;; Make sure we don't show a header line in company-box.
    (el-patch-defun company-box--render-buffer (string)
      (let ((selection company-selection))
        (with-current-buffer (company-box--get-buffer)
          (erase-buffer)
          (insert string "\n")
          (setq mode-line-format nil
                (el-patch-add header-line-format nil)
                display-line-numbers nil
                truncate-lines t
                cursor-in-non-selected-windows nil)
          (setq-local scroll-step 1)
          (setq-local scroll-conservatively 10000)
          (setq-local scroll-margin  0)
          (setq-local scroll-preserve-screen-position t)
          (add-hook 'window-configuration-change-hook 'company-box--prevent-changes t t)
          (company-box--update-line selection))))

    ;; Fix the foreground and background colours of documentation popup frames.
    (el-patch-defun company-box-doc--show (selection frame)
      (-when-let* ((valid-state (and (eq (selected-frame) frame)
                                     (company-box--get-frame)
                                     (frame-visible-p (company-box--get-frame))))
                   (candidate (nth selection company-candidates))
                   (doc (or (company-call-backend 'quickhelp-string candidate)
                            (company-box-doc--fetch-doc-buffer candidate)))
                   (doc (company-box-doc--make-buffer doc)))
        (unless (frame-live-p (frame-parameter nil 'company-box-doc-frame))
          (set-frame-parameter nil 'company-box-doc-frame (company-box-doc--make-frame doc)))
        (el-patch-add
          (with-selected-frame (frame-parameter nil 'company-box-doc-frame)
            (set-foreground-color (face-foreground 'company-box-candidate nil t))
            (set-background-color (face-background 'company-box-background nil t))))
        (company-box-doc--set-frame-position (frame-parameter nil 'company-box-doc-frame))
        (unless (frame-visible-p (frame-parameter nil 'company-box-doc-frame))
          (make-frame-visible (frame-parameter nil 'company-box-doc-frame))))))
#+end_src

*** [[https://github.com/raxod502/prescient.el][Company-Prescient]]
#+name: init-company-prescient-block
#+begin_src emacs-lisp
  (use-package company-prescient
    :straight t
    :ghook 'company-mode-hook)
#+end_src

*** [[https://github.com/PythonNut/company-flx][Company-FLX]]
#+name: init-company-flx-block
#+begin_src emacs-lisp
  (use-package company-flx
    :straight t
    :ghook 'company-mode-hook)
#+end_src

*** [[https://github.com/Alexander-Miller/company-shell][Company-Shell]]
#+name: init-company-shell-block
#+begin_src emacs-lisp
  (use-package company-shell
    :straight t :after sh-script
    :config
    (dolist (shls '(company-shell
                    company-shell-env
                    company-fish-shell
                    company-files))
      (general-pushnew shls company-backends)))
#+end_src

*** [[https://github.com/CeleritasCelery/company-fish][Company-Fish]]
#+name: init-company-fish-block
#+begin_src emacs-lisp
  (use-package company-fish
    :straight (:host github :repo "CeleritasCelery/company-fish")
    :after (company)
    :if (executable-find "fish")
    :init
    (defun arco/init-company-fish()
      (general-pushnew 'company-fish company-backends))
    (general-add-hook 'eshell-mode-hook #'arco/init-company-fish)
    (general-add-hook 'shell-mode-hook #'arco/init-company-fish))
#+end_src

*** [[https://github.com/joaotavora/yasnippet][Yasnippet]]
#+name: init-yasnippet-block
#+begin_src emacs-lisp
  (use-package yasnippet
    :straight t
    :ghook ('(prog-mode-hook org-mode-hook text-mode-hook) #'yas-global-mode)
    :general ("C-;" #'yas-expand)
    :config
    (general-setq yas-verbosity 1
                  yas-wrap-around-region t
                  yas-prompt-functions '(yas-completing-prompt)
                  yas-snippet-dirs `(,djm--yasnippet-directory)))

  (use-package yasnippet-snippets
    :straight t
    :ghook ('yas-global-mode-hook #'yas-reload-all))
#+end_src

** Documentation
*** [[https://github.com/Wilfred/helpful][Helpful]]
#+name: init-helpful-block
#+begin_src emacs-lisp
  (use-package helpful
    :straight t
    :general
    ([remap describe-function] #'helpful-callable
     "C-h C"                   #'helpful-command
     [remap describe-variable] #'helpful-variable
     [remap describe-key]      #'helpful-key
     "C-c C-d"                 #'helpful-at-point
     "C-h x"                   #'helpful-macro)
    :config
    (add-to-list 'display-buffer-alist
                 `(,(rx bos "*helpful ")
                   (display-buffer-reuse-window
                    display-buffer-pop-up-window)
                   (reusable-frames . visible)
                   (side . right)
                   (slot . 1)
                   (window-width . 0.5))))
#+end_src

*** [[https://github.com/justbur/emacs-which-key][Which-Key]]
#+name: init-which-key-block
#+begin_src emacs-lisp
  (use-package which-key
    :straight t
    :ghook 'emacs-startup-hook
    :config
    (general-setq which-key-separator " "
                  which-key-prefix-prefix "+")
    (which-key-setup-side-window-bottom))
#+end_src

*** [[https://github.com/jguenther/discover-my-major][Discover-My-Major]]
#+name: init-discover-my-major-block
#+begin_src emacs-lisp
  (use-package discover-my-major
    :straight t
    :general
    ("C-h C-m" #'discover-my-major))
#+end_src

** Editing Tools
*** [[https://github.com/syohex/emacs-anzu][Anzu]]
#+name: init-anzu-block
#+begin_src emacs-lisp
  (use-package anzu
    :straight t
    :ghook ('emacs-startup-hook #'global-anzu-mode)
    :general
    ([remap query-replace] #'anzu-query-replace-regexp
     [remap query-replace-regexp] #'anzu-query-replace))
#+end_src

*** [[https://github.com/Wilfred/deadgrep][Deadgrep]]
#+name: init-deadgrep-block
#+begin_src emacs-lisp
  (use-package deadgrep
    :straight t
    :if (executable-find "rg")
    :init (defalias 'rg #'deadgrep))
#+end_src

*** [[https://github.com/bbatsov/crux][Crux]]
#+name: init-crux-block
#+begin_src emacs-lisp
  (use-package crux
    :straight t
    :general
    ("C-c i d" #'crux-downcase-region
     "C-c i u" #'crux-upcase-region
     [remap move-beginning-of-line] #'crux-move-beginning-of-line
     [remap kill-line] #'crux-smart-kill-line))
#+end_src

*** [[https://github.com/justbur/emacs-vdiff][Emacs-VDiff]]
#+name: init-vdiff-block
#+begin_src emacs-lisp
  (use-package vdiff
    :straight t)
#+end_src

*** [[https://github.com/lassik/emacs-format-all-the-code][Emacs-Format-All-The-Code]]
#+name: init-format-all-block
#+begin_src emacs-lisp
  (use-package format-all
    :straight t)
#+end_src

*** [[https://github.com/magnars/expand-region.el][Expand-Region]]
#+name: init-expand-region-block
#+begin_src emacs-lisp
  (use-package expand-region
    :straight t
    :general ("C-=" #'er/expand-region))
#+end_src

*** [[https://github.com/magnars/multiple-cursors.el][Multiple-Cursors]]
#+name: init-multiple-cursors-block
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :straight t
    :general
    ("C->" #'mc/mark-next-like-this
     "C-<" #'mc/mark-previous-like-this))
#+end_src

*** [[https://github.com/akicho8/string-inflection][String-Inflection]]
#+name: init-string-inflection-block
#+begin_src emacs-lisp
  (use-package string-inflection
    :straight t
    :general
    ("C-c i u" #'string-inflection-upcase
     "C-c i t" #'string-inflection-toggle
     "C-c i c" #'string-inflection-camelcase
     "C-c i _" #'string-inflection-underscore
     "C-c i a" #'string-inflection-all-cycle
     "C-c i k" #'string-inflection-kebab-case
     "C-c i l" #'string-inflection-lower-camelcase
     "C-c i C" #'string-inflection-capital-underscore
     "C-c i j" #'string-inflection-java-style-cycle
     "C-c i r" #'string-inflection-ruby-style-cycle
     "C-c i p" #'string-inflection-python-style-cycle))
#+end_src

*** [[https://github.com/thierryvolpiatto/zop-to-char][Zop-To-Char]]
#+name: init-zop-to-char-block
#+begin_src emacs-lisp
  (use-package zop-to-char
    :straight t
    :general
    ("M-z" #'zop-to-char
     "M-Z" #'zop-up-to-char))
#+end_src

** Writing
*** [[https://github.com/d12frosted/flyspell-correct][Flyspell-Correct]]
#+name: init-flyspell-correct-block
#+begin_src emacs-lisp
  (use-package flyspell-correct
    :straight t)
#+end_src

*** [[https://github.com/jorgenschaefer/typoel][Typo]]
#+name: init-typo-block
#+begin_src emacs-lisp
  (use-package typo
    :straight t)
#+end_src

*** [[https://github.com/bnbeckwith/writegood-mode][Writegood]]
#+name: init-writegood-block
#+begin_src emacs-lisp
  (use-package writegood-mode
    :straight t)
#+end_src

** Minor Modes
*** [[https://github.com/Malabarba/aggressive-indent-mode][Aggressive-Indent]]
#+name: init-aggressive-indent-block
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :blackout t :straight t
    :ghook 'emacs-lisp-mode-hook)
#+end_src

*** [[https://github.com/editorconfig/editorconfig-emacs][EditorConfig]]
#+name: init-editorconfig-block
#+begin_src emacs-lisp
  (use-package editorconfig
    :straight t
    :ghook 'emacs-startup-hook)
#+end_src

*** [[https://github.com/DarthFennec/highlight-indent-guides][Highlight-Indent-Guides]]
#+name: init-highlight-indent-guides-block
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :straight t
    :ghook 'python-mode-hook 'yaml-mode-hook)
#+end_src

*** [[https://github.com/nflath/hungry-delete][Hungry-Delete]]
#+name: init-hungry-delete-block
#+begin_src emacs-lisp
  (use-package hungry-delete
    :blackout t :straight t
    :ghook 'emacs-lisp-mode-hook)
#+end_src

*** [[https://github.com/Fanael/rainbow-delimiters][Rainbow-Delimiters]]
#+name: init-rainbow-delimiters-block
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :blackout t :straight t
    :ghook 'prog-mode-hook)
#+end_src

*** [[https://github.com/apchamberlain/undo-tree.el][Undo-Tree]]
#+name: init-undo-tree-block
#+begin_src emacs-lisp
  (use-package undo-tree
    :straight t
    :general
    ("C-/" #'undo-tree-undo
     "C-?" #'undo-tree-redo)
    :config
    (general-setq undo-tree-save-history t
                  undo-tree-visualizer-timestamps t
                  undo-tree-enable-undo-in-region nil
                  undo-tree-visualizer-diff t
                  undo-limit 800000
                  undo-strong-limit 1200000
                  undo-outer-limit 1200000)
    (global-undo-tree-mode +1))
#+end_src

*** [[https://github.com/purcell/whitespace-cleanup-mode][Whitespace-Cleanup]]
#+name: init-whitespace-cleanup-block
#+begin_src emacs-lisp
  (use-package whitespace-cleanup-mode
    :straight t
    :ghook whitespace-modes
    :preface
    (defconst whitespace-modes
      '(prog-mode-hook
        org-mode-hook
        text-mode-hook
        conf-mode-hook))
    :config
    (general-setq show-trailing-whitespace t))
#+end_src

*** [[https://github.com/lewang/ws-butler][WS-Butler]]
#+name: init-ws-butler-block
#+begin_src emacs-lisp :tangle no
  (use-package ws-butler
    :blackout t :straight t
    :ghook ('emacs-startup-hook #'ws-butler-global-mode)
    :config
    (dolist (modes '(special-mode comint-mode term-mode eshell-mode vterm-mode))
      (general-pushnew modes ws-butler-global-exempt-modes)))
#+end_src

** File Explorer
*** Dired (Built-In)
#+name: init-dired-block
#+begin_src emacs-lisp
  (use-package dired
    :blackout "Dired" :straight (:type built-in)
    :general
    (:keymaps 'dired-mode-map
     "h" #'dired-up-directory
     "n" #'dired-next-line
     "p" #'dired-previous-line
     "f" #'find-file)
    :config
    (general-setq dired-auto-revert-buffer t
                  dired-dwim-target t
                  dired-use-ls-dired t
                  dired-ls-F-marks-symlinks t
                  dired-hide-details-hide-symlink-targets nil
                  dired-listing-switches "-lha --group-directories-first"
                  dired-recursive-deletes 'always
                  dired-recursive-copies 'always
                  dired-deletion-confirmer '(lambda (x) t)) ;; Don't confirm deleting files

    (general-add-hook 'dired-mode-hook #'hl-line-mode))
#+end_src

*** WDired (Built-In)
#+name: init-wdired-block
#+begin_src emacs-lisp
  (use-package wdired
    :straight (:type built-in) :after (dired)
    :general
    (:keymaps 'dired-mode-map
     "C-c C-e" #'wdired-change-to-wdired-mode)
    :config
    (general-setq wdired-create-parent-directories t
                  wdired-allow-to-change-permissions t))
#+end_src

*** Dired-X (Built-In)
#+name: init-dired-x-block
#+begin_src emacs-lisp
  (use-package dired-x
    :demand t :straight (:type built-in) :after (dired)
    :ghook ('dired-mode-hook #'dired-omit-mode)
    :config
    (general-setq dired-x-hands-off-my-keys t
                  dired-omit-verbose t
                  dired-omit-files-p t
                  dired-clean-up-buffers-too t
                  dired-clean-confirm-killing-deleted-buffers nil
                  dired-omit-files (concat dired-omit-files
                                           "\\|^.DS_Store\\'"
                                           "\\|^.project\\(?:ile\\)?\\'"
                                           "\\|^.\\(svn\\|git\\)\\'"
                                           "\\|^.ccls-cache\\'"
                                           "\\|^__pycache__\\'"
                                           "\\|\\(?:\\.js\\)?\\.meta\\'"
                                           "\\|\\.\\(?:elc\\|o\\|pyo\\|swp\\|class\\)\\'")))
#+end_src

*** [[https://github.com/jtbm37/all-the-icons-dired][All-The-Icons-Dired]]
#+name: init-dired-all-the-icons-block
#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :straight t
    :ghook 'dired-mode-hook)
#+end_src

*** [[https://github.com/clemera/dired-git-info][Dired-Git-Info]]
#+name: init-dired-git-info-block
#+begin_src emacs-lisp
  (use-package dired-git-info
    :straight t
    :general
    (:keymaps 'dired-mode-map ":" #'dired-git-info-mode))
#+end_src

*** [[https://github.com/Fuco1/dired-hacks][Dired-Hacks]]
#+name: init-dired-hacks-block
#+begin_src emacs-lisp
  (use-package dired-hacks-utils
    :straight dired-hacks)

  (use-package dired-filter
    :straight dired-hacks)

  (use-package dired-rainbow
    :straight dired-hacks)

  (use-package dired-narrow
    :straight dired-hacks
    :general
    (:keymaps
     'dired-mode-map
     "C-c C-n" #'dired-narrow
     "C-c C-f" #'dired-narrow-fuzzy
     "C-c C-r" #'dired-narrow-regexp))

  (use-package dired-collapse
    :straight dired-hacks
    :general
    (:keymaps 'dired-mode-map
              "c" #'dired-collapse-mode))

  (use-package dired-open
    :straight dired-hacks
    :config
    (general-setq dired-open-functions '(dired-open-by-extension
                                         dired-open-subdir)))

  (use-package dired-list
    :straight dired-hacks)

  (use-package dired-images
     :straight (dired-hacks eimp))

  (use-package dired-ranger
    :straight dired-hacks
    :general
    (:keymaps
     'dired-mode-map
     "C-c C-c" #'dired-ranger-copy
     "C-c C-m" #'dired-ranger-move
     "C-c C-p" #'dired-ranger-paste
     "C-c C-b" #'dired-ranger-bookmark
     "C-c b v" #'dired-ranger-bookmark-visit))

  (use-package dired-subtree
    :straight dired-hacks
    :general
    (:keymaps
     'dired-mode-map
     "<tab>"     #'dired-subtree-toggle
     "<backtab>" #'dired-subtree-cycle))
#+end_src

*** [[https://github.com/purcell/diredfl][Diredfl]]
#+name: init-diredfl-block
#+begin_src emacs-lisp
  (use-package diredfl
    :straight t
    :ghook 'dired-mode-hook)
#+end_src

** Navigation
*** [[https://github.com/abo-abo/ace-window][Ace-Window]]
#+name: init-ace-window-block
#+begin_src emacs-lisp
  (use-package ace-window
    :straight t
    :general ("C-x o" #'ace-window)
    :config
    (general-setq aw-keys '(?a ?s ?d ?f ?j ?k ?l)))
#+end_src

*** [[https://github.com/abo-abo/avy][Avy]]
#+name: init-avy-block
#+begin_src emacs-lisp :tangle no
  (use-package avy
    :straight t
    :config
    (general-setq avy-keys '(?a ?s ?d ?e ?f ?g ?r ?v ?h ?j ?k ?l ?n ?m ?u)
                  avy-all-windows nil
                  avy-timeout-seconds 0.3
                  avy-style 'pre))
#+end_src

*** [[https://github.com/jacktasia/dumb-jump][Dumb-Jump]]
#+name: init-dumb-jump-block
#+begin_src emacs-lisp
  (use-package dumb-jump
    :straight t
    :commands (dumb-jump-mode)
    :config (general-setq dumb-jump-selector 'ivy
                          dumb-jump-prefer-searcher 'rg))
#+end_src

*** [[https://github.com/emacs-mirror/emacs/blob/master/lisp/ibuffer.el][iBuffer]]
#+name: init-ibuffer-block
#+begin_src emacs-lisp
  (use-package ibuffer
    :straight t
    :general
    ([remap list-buffers] #'ibuffer)
    :commands (ibuffer ibuffer-forward-line ibuffer-backward-line)
    :defines (ibuffer-show-empty-filter-groups
              ibuffer-never-show-predicates)
    :config/el-patch
    (general-setq ibuffer-expert t
                  ibuffer-show-empty-filter-groups nil)
    (general-setq ibuffer-formats
                  '((mark modified " " (mode 1 1) " " (name 25 25 :left :elide) " " filename-and-process)))
    (general-setq ibuffer-never-show-predicates (list (rx (or "*magit-"
                                                              "*git-auto-push*"
                                                              "*Backtrace*"
                                                              "*new*"
                                                              "*Org*"
                                                              "*helpful"
                                                              "*Flycheck error messages*"
                                                              "*Help*"))))

    (general-add-hook 'ibuffer-mode-hook #'hl-line-mode)

    (define-ibuffer-column mode
      (:inline t)
      (with-current-buffer (current-buffer)
        (let ((icon (all-the-icons-icon-for-buffer)))
          (if (stringp icon)
              icon
            " "))))

    ;; Dim directory part of file path.
    (define-ibuffer-column filename-and-process
      (:name "Filename/Process")
      (let ((proc (get-buffer-process buffer))
            (filename (ibuffer-make-column-filename buffer mark)))
        (if proc
            (concat (propertize (format "(%s %s)" proc (process-status proc))
                                'font-lock-face 'italic)
                    (if (> (length filename) 0)
                        (format " %s" filename)
                      ""))
          (propertize (f-abbrev filename) 'face 'dired-symlink))))

    ;; Show buffer name in a consistent way.
    (define-ibuffer-column name
      (:inline t)
      (let ((string (buffer-name)))
        (if (not (seq-position string ?\n))
            string
          (replace-regexp-in-string
           "\n" (propertize "^J" 'font-lock-face 'escape-glyph) string))))
    
    ;; Show a horizontal rule using page-break-lines instead of using dashes.
    (el-patch-defun ibuffer-update-title-and-summary (format)
      (ibuffer-assert-ibuffer-mode)
      ;; Don't do funky font-lock stuff here
      (let ((inhibit-modification-hooks t))
        (if (get-text-property (point-min) 'ibuffer-title)
            (delete-region (point-min)
                           (next-single-property-change
                            (point-min) 'ibuffer-title)))
        (goto-char (point-min))
        (add-text-properties
         (point)
         (progn
           (let ((opos (point)))
             ;; Insert the title names.
             (dolist (element format)
               (insert
                (if (stringp element)
                    element
                  (pcase-let ((`(,sym ,min ,_max ,align) element))
                    ;; Ignore a negative min when we're inserting the title
                    (when (cl-minusp min)
                      (setq min (- min)))
                    (let* ((name (or (get sym 'ibuffer-column-name)
                                     (error "Unknown column %s in ibuffer-formats" sym)))
                           (len (length name))
                           (hmap (get sym 'header-mouse-map))
                           (strname (if (< len min)
                                        (ibuffer-format-column name
                                                               (- min len)
                                                               align)
                                      name)))
                      (when hmap
                        (setq
                         strname
                         (propertize strname 'mouse-face 'highlight 'keymap hmap)))
                      strname)))))
             (add-text-properties opos (point) '(ibuffer-title-header t))
             (insert "\n")
             ;; Add the underlines

             (el-patch-swap (let ((str (save-excursion
                                         (forward-line -1)
                                         (beginning-of-line)
                                         (buffer-substring (point) (line-end-position)))))
                              (apply #'insert (mapcar
                                               (lambda (c)
                                                 (if (not (or (eq c ?\s)
                                                              (eq c ?\n)))
                                                     ?-
                                                   ?\s))
                                               str)))
                            (insert ""))
             (insert "\n"))
           (point))
         `(ibuffer-title t font-lock-face ,ibuffer-title-face))
        ;; Now, insert the summary columns.
        (goto-char (point-max))
        (if (get-text-property (1- (point-max)) 'ibuffer-summary)
            (delete-region (previous-single-property-change
                            (point-max) 'ibuffer-summary)
                           (point-max)))
        (if ibuffer-display-summary
            (add-text-properties
             (point)
             (progn
               (insert "\n")
               (dolist (element format)
                 (insert
                  (if (stringp element)
                      (make-string (length element) ?\s)
                    (pcase-let ((`(,sym ,min ,_max ,align) element))
                      ;; Ignore a negative min when we're inserting the title.
                      (when (cl-minusp min)
                        (setq min (- min)))
                      (let* ((summary
                              (if (get sym 'ibuffer-column-summarizer)
                                  (funcall (get sym 'ibuffer-column-summarizer)
                                           (get sym 'ibuffer-column-summary))
                                (make-string
                                 (length (get sym 'ibuffer-column-name))
                                 ?\s)))
                             (len (length summary)))
                        (if (< len min)
                            (ibuffer-format-column summary
                                                   (- min len)
                                                   align)
                          summary))))))
               (point))
             '(ibuffer-summary t)))))

    ;; Change the way groups are rendered.
    (el-patch-defun ibuffer-insert-filter-group (name display-name filter-string format bmarklist)
      (add-text-properties
       (point)
       (progn
         (insert (el-patch-remove "[ ")
                 display-name
                 (el-patch-remove " ]"))
         (point))
       `(ibuffer-filter-group-name
         ,name
         font-lock-face ,ibuffer-filter-group-name-face
         keymap ,ibuffer-mode-filter-group-map
         mouse-face highlight
         help-echo ,(let ((echo '(if tooltip-mode
                                     "mouse-1: toggle marks in this group\nmouse-2: hide/show this filtering group"
                                   "mouse-1: toggle marks  mouse-2: hide/show")))
                      (if (> (length filter-string) 0)
                          `(concat ,filter-string
                                   (if tooltip-mode "\n" " ")
                                   ,echo)
                        echo))))
      (insert "\n")
      (when bmarklist
        (put-text-property
         (point)
         (progn
           (dolist (entry bmarklist)
             (ibuffer-insert-buffer-line (car entry) (cdr entry) format))
           (point))
         'ibuffer-filter-group
         name))
      (el-patch-add (insert "\n"))))
#+end_src

*** [[https://github.com/emacs-mirror/emacs/blob/master/lisp/ibuf-ext.el][iBuffer-Extension]]
#+name: init-ibuffer-ext-block
#+begin_src emacs-lisp
  (use-package ibuf-ext
    :straight (:type built-in)
    :ghook ('ibuffer-mode-hook #'ibuffer-auto-mode)
    :config (general-setq ibuffer-show-empty-filter-groups nil))
#+end_src

*** [[https://github.com/purcell/ibuffer-projectile][iBuffer-Projectile]]
#+name: init-ibuffer-projectile-block
#+begin_src emacs-lisp
  (use-package ibuffer-projectile
    :straight t
    :preface
    (defun djm/config-ibuffer-projectile ()
      (ibuffer-projectile-set-filter-groups)
      (add-to-list 'ibuffer-filter-groups '("Dired" (mode . dired-mode)))
      (add-to-list 'ibuffer-filter-groups '("System" (predicate . (-contains? '("*direnv*" "*straight-process*" "lsp" "flycheck") (buffer-name)))))
      (unless (eq ibuffer-sorting-mode 'alphabetic)
        (ibuffer-do-sort-by-alphabetic))

      (when (bound-and-true-p page-break-lines-mode)
        (page-break-lines--update-display-tables)))
    :init
    (general-add-hook 'ibuffer-hook #'djm/config-ibuffer-projectile)
    :config
    (general-setq ibuffer-projectile-prefix ""))
#+end_src

*** [[https://gitlab.com/ambrevar/emacs-windower][Windmove]]
#+name: init-windmove-block
#+begin_src emacs-lisp
  (use-package windmove
    :straight t
    :general
    ("C-c w j" #'windmove-left
     "C-c w l" #'windmove-right
     "C-c w n" #'windmove-down
     "C-c w u" #'windmove-up))
#+end_src

*** [[https://gitlab.com/ambrevar/emacs-windower][Windower]]
#+name: init-windower-block
#+begin_src emacs-lisp
  (use-package windower
    :straight (:host gitlab :repo "ambrevar/emacs-windower")
    :general
    ("C-c w o" #'windower-switch-to-last-buffer
     "C-c w t" #'windower-toggle-split
     "C-c w s" #'windower-swap
     "C-c w m" #'windower-move-border
     "C-c w a" #'windower-toggle-single))
#+end_src

*** [[https://github.com/wasamasa/eyebrowse][Eyebrowse]]
#+name: init-eyebrowse-block
#+begin_src emacs-lisp
  (use-package eyebrowse
    :straight t
    :ghook 'emacs-startup-hook
    :preface
    (defun arco/create-window-config (name)
      (interactive
       (list (let ((current-tags (--map (nth 2 it) (eyebrowse--get 'window-configs)))
                   input)
               (while (progn
                        (setq input (read-string "Workspace name: " (ignore-errors (projectile-project-name))))
                        (cond ((string-blank-p input)
                               (message "Input must be non-empty.")
                               (sit-for 1)
                               t)
                              ((-contains-p current-tags input)
                               (message "Name must be unique")
                               (sit-for 1)
                               t))))
               input)))
      (eyebrowse-create-window-config)
      (eyebrowse-rename-window-config (eyebrowse--get 'current-slot) name))
    :config
    (general-setq eyebrowse-mode-line-separator " "))

#+end_src

** Org
*** Org
#+name: init-org-block
#+begin_src emacs-lisp
  (use-package org
    :straight nil
    :gfhook 'variable-pitch-mode 'visual-line-mode 'adaptive-wrap-prefix-mode
    :mode ("\\.org$" . org-mode)
    :general
    ("C-c a" #'org-agenda
     "C-c c" #'org-capture)
    (:keymaps 'org-mode-map
     "M-n" #'outline-next-visible-heading
     "M-p" #'outline-previous-visible-heading)
    :preface
    (defun set-buffer-fixed-pitch ()
      (setq-local line-spacing 3)
      (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
      (set-face-attribute 'org-code nil  :inherit 'fixed-pitch)
      (set-face-attribute 'org-block nil :inherit 'fixed-pitch))

    ;; Chris Barrett Org Hacks
    (defun org-hacks--fix-org-src-block-edit (fn &rest args)
      (let ((element-type (ignore-errors
                            (org-element-type (org-element-context (org-element-at-point))))))
        (if (equal 'src-block element-type)
            (org-edit-src-code)
          (funcall fn args))))

    (general-add-hook 'org-mode-hook #'set-buffer-fixed-pitch)
    :config
    ;; Directory Settings
    (general-setq org-archive-location "~/Documents/org-files/archive.org::"
                  org-default-notes-file "~/Documents/org-files/inbox.org"
                  org-directory "~/Documents/org-files")

    ;; Export Settings
    (general-setq org-export-backends '(jdf-report ascii html latex gfm)
                  org-export-coding-system 'utf-8
                  org-export-exclude-tags '("noexport" "no_export" "ignore")
                  org-export-headline-levels 5
                  org-export-with-author t
                  org-export-with-drawers t
                  org-export-with-email t
                  org-export-with-footnotes t
                  org-export-with-latex t
                  org-export-with-properties t
                  org-export-with-section-numbers nil
                  org-export-with-smart-quotes t
                  org-export-with-toc nil
                  org-html-html5-fancy t
                  org-html-postamble nil)

    ;; LaTeX Settings
    (general-setq org-latex-pdf-process '("latexmk -shell-escape -bibtex -pdf %f")
                  org-latex-remove-logfiles t
                  org-latex-prefer-user-labels t
                  bibtex-dialect 'biblatex)

    ;; (dolist (ext '("lof" "lot" "tex"
    ;;                "aux" "idx" "log"
    ;;                "out" "toc" "nav"
    ;;                "snm" "vrb" "dvi"
    ;;                "fdb_latexmk" "blg"
    ;;                "brf" "fls" "entoc"
    ;;                "ps" "spl" "bbl"
    ;;                "bcf" "run.xml"))
    ;;   (general-pushnew ext org-latex-logfiles-extensions))


    ;; Startup Settings
    (general-setq org-startup-folded 'content
                  org-startup-with-inline-images t
                  org-startup-indented t
                  org-indent-mode t)

    ;; Fontify Settings
    (general-setq org-fontify-whole-heading-line t
                  org-fontify-quote-and-verse-blocks t
                  org-fontify-done-headline t
                  org-fontify-todo-headline t)

    ;; Refile Settings
    (general-setq org-refile-allow-creating-parent-nodes 'confirm
                  org-refile-use-outline-path 'file
                  org-refile-targets '(("~/Documents/org-files/projects.org" :maxlevel . 3)))

    ;; Log Settings
    (general-setq org-log-done 'time
                  org-log-into-drawer t
                  org-log-state-notes-insert-after-drawers nil)

    ;; Usage Settings
    (general-setq org-use-fast-todo-selection t
                  org-use-fast-tag-selection t
                  org-use-speed-commands t
                  org-use-tag-inheritance t)

    ;; Aesthetic Settings
    (general-setq org-pretty-entities t
                  org-hide-emphasis-markers t
                  org-hide-leading-stars t
                  org-ellipsis "…"
                  org-image-actual-width nil)

    (setf (cdr (assoc 'file org-link-frame-setup)) #'find-file-other-window)

    (font-lock-add-keywords 'org-mode
                            `((,(rx bol (* space) (group "-") (+ space))
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))
                              (,(rx bol (* space) (group "#+begin_src") symbol-end)
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "λ"))))
                              (,(rx bol (* space) (group "#+end_src") symbol-end)
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "⋱"))))
                              (,(rx bol (* space) (group "#+begin_quote") symbol-end)
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "“"))))
                              (,(rx bol (* space) (group "#+end_quote") symbol-end)
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "”"))))))

    ;; List Settings
    (general-setq org-list-indent-offset 2)

    ;; Other Settings
    (general-setq org-catch-invisible-edits 'smart
                  org-cycle-separator-lines 0
                  org-enforce-todo-dependencies t
                  org-enforce-todo-checkbox-dependencies t
                  org-insert-heading-respect-content t
                  org-outline-path-complete-in-steps nil
                  org-special-ctrl-a/e t
                  org-special-ctrl-k t
                  org-tags-column 0
                  org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                                      (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)"))
                  org-yank-adjusted-subtrees t)

    (general-setq org-tag-alist (quote (("@home" .   ?h)
                                        ("@work" .   ?w)
                                        ("@school" . ?s)
                                        ("@church" . ?c)
                                        (:newline)
                                        ("PROJECT" . ?p)
                                        ("AD-HOC" . ?A))))

    (general-pushnew '("el" . "src emacs-lisp") org-structure-template-alist)
    (general-add-advice 'org-edit-special :around #'org-hacks--fix-org-src-block-edit))
#+end_src

*** Org-Capture
#+name: init-org-capture-block
#+begin_src emacs-lisp
  (use-package org-capture
    :straight nil :after org)
#+end_src

*** Org-Clock
#+name: init-org-clock-block
#+begin_src emacs-lisp
  (use-package org-clock
    :straight nil
    :config
    (general-setq org-clock-history-length 20
                  org-clock-in-resume t
                  org-clock-out-remove-zero-time-clocks t
                  org-clock-persist t))
#+end_src

*** Org-Agenda
#+name: init-org-agenda-block
#+begin_src emacs-lisp
  (use-package org-agenda
    :straight nil
    :config
    (general-setq org-agenda-block-separator nil
                  org-agenda-diary-file "~/Documents/org-files/diary.org"
                  org-agenda-dim-blocked-tasks 'invisible
                  org-agenda-files '("~/Documents/org-files/inbox.org"
                                     "~/Documents/org-files/projects.org")
                  org-agenda-inhibit-startup nil
                  org-agenda-show-all-dates t
                  org-agenda-skip-deadline-if-done t
                  org-agenda-skip-scheduled-if-done t
                  org-agenda-span 'day
                  org-agenda-start-on-weekday nil
                  org-agenda-start-with-log-mode nil
                  org-agenda-tags-column -100
                  org-agenda-use-time-grid t
                  org-agenda-window-setup 'only-window))

  (use-package org-super-agenda
    :straight t)

  (defun org-archive-done-tasks ()
    (interactive)
    (org-map-entries 'org-archive-subtree "/DONE" 'file))
#+end_src

*** Org-Src
#+name: init-org-src-block
#+begin_src emacs-lisp
  (use-package org-src
    :straight nil
    :preface
    (defun djm/org-src-supress-final-newline ()
      (setq-local require-final-newline nil))

    (defun djm/org-src-delete-trailing-space (&rest _)
      (delete-trailing-whitespace))

    (defun djm/disable-flycheck-in-org-src-block ()
      (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

    (general-add-hook 'org-src-mode-hook #'djm/org-src-supress-final-newline)
    (general-add-hook 'org-src-mode-hook #'djm/disable-flycheck-in-org-src-block)
    (general-add-advice 'org-edit-src-exit :before #'djm/org-src-delete-trailing-space)

    :config/el-patch
    (defun org-src--construct-edit-buffer-name (org-buffer-name lang)
      (concat "[" org-buffer-name "]"))

    (general-setq org-src-window-setup 'current-window
                  org-src-fontify-natively t
                  org-src-tab-acts-natively t))
#+end_src

*** Org-Ob
#+name: init-org-ob-block
#+begin_src emacs-lisp
  (use-package ob
    :straight nil
    :preface
    (defun arco/org-redisplay-inline-images ()
      (interactive)
      (when org-inline-image-overlays
        (org-redisplay-inline-images)))
    (general-add-hook 'org-babel-after-execute-hook #'arco/org-redisplay-inline-images)
    :config
    (general-setq org-babel-load-languages '((emacs-lisp . t)
                                             (shell . t)
                                             (python . t)
                                             (ditaa . t)
                                             (dot . t)
                                             (plantuml . t)))
    (general-setq org-confirm-babel-evaluate nil))

  (use-package ob-ditaa
    :straight nil
    :commands (org-babel-execute:ditaa)
    :config
    (general-setq org-ditaa-jar-path ;; The custom var set in ob-ditaa.el breaks the ditaa path
                  "/usr/local/Cellar/ditaa/0.11.0_1/libexec/ditaa-0.11.0-standalone.jar"))

  (use-package ob-plantuml
    :straight nil
    :commands (org-babel-execute:plantuml)
    :config
    (general-setq org-plantuml-jar-path "/usr/local/Cellar/plantuml/1.2020.0/libexec/plantuml.jar"))
#+end_src

*** Org-Ox
#+name: init-org-ox-block
#+begin_src emacs-lisp
  (use-package ox-gfm
    :demand t :straight t
    :after (org))

  (use-package ox-koma-letter
    :straight nil
    :after (org)
    :config
    (general-pushnew '("AUTO" "babel" nil) org-latex-packages-alist))

  (use-package ox-slack
    :demand t :straight t
    :after (org)
    :commands (org-slack-export-to-clipboard-as-slack))

  (use-package ox-jdf-report
    :demand t :straight (:host github :repo "dylanjm/ox-jdf")
    :after (org))
#+end_src

*** [[https://github.com/sabof/org-bullets][Org-Bullets]]
#+name: init-org-bullets-block
#+begin_src emacs-lisp
  (use-package org-bullets
    :straight t
    :ghook 'org-mode-hook
    :config
    (general-setq org-bullets-bullet-list '("⦿" "❂" "⦾" "✤")))
#+end_src

*** [[https://gitlab.com/jagrg/org-emms][Org-EMMS]]
#+name: init-org-emms-block
#+begin_src emacs-lisp
  (use-package org-emms
    :straight t :after (org))
#+end_src

*** [[https://github.com/bastibe/org-journal][Org-Journal]]
#+name: init-org-journal-block
#+begin_src emacs-lisp
  (use-package org-journal
    :straight t)
#+end_src

*** [[https://github.com/jkitchin/org-ref][Org-Ref]]
#+name: init-org-ref-block
#+begin_src emacs-lisp
  (use-package org-ref
    :straight t
    :commands (org-ref-insert-link))
#+end_src

*** [[https://github.com/tesujimath/org-wc][Org-WC]]
#+name: init-org-src-block
#+begin_src emacs-lisp
  (use-package org-wc
    :straight t :after (org))
#+end_src

*** [[https://github.com/snosov1/toc-org][TOC-Org]]
#+name: init-toc-org-block
#+begin_src emacs-lisp
  (use-package toc-org
    :ghook 'org-mode-hook 'markdown-mode-hook)
#+end_src

*** [[https://github.com/kiwanami/emacs-calfw][Calfw]]
#+name: init-calfw-block
#+begin_src emacs-lisp
  (use-package calfw
    :straight t
    :commands cfw:open-calendar-buffer
    :config
    (general-setq cfw:face-item-separator-color nil
                  cfw:render-line-breaker 'cfw:render-line-breaker-none
                  cfw:fchar-junction ?╋
                  cfw:fchar-vertical-line ?┃
                  cfw:fchar-horizontal-line ?━
                  cfw:fchar-left-junction ?┣
                  cfw:fchar-right-junction ?┫
                  cfw:fchar-top-junction ?┯
                  cfw:fchar-top-left-corner ?┏
                  cfw:fchar-top-right-corner ?┓))
#+end_src

*** [[https://github.com/kiwanami/emacs-calfw][Calfw-Org]]
#+name: init-calfw-org-block
#+begin_src emacs-lisp
  (use-package calfw-org
    :straight t
    :commands (cfw:open-org-calendar
               cfw:org-create-source
               cfw:open-org-calendar-withkevin
               my-open-calendar))
#+end_src

** Email
*** [[https://github.com/emacsmirror/mu4e][MU4E]]
#+name: init-mu4e-block
#+begin_src emacs-lisp
  (use-package mu4e
    :straight t
    :commands (mu4e mu4e-compose-new)
    :preface
    (defun config-mail--shr-buffer ()
      (let ((shr-use-fonts nil))
        (shr-render-region (point-min) (point-max))))

    (defun config-mail--view-in-external-browser-action (msg)
      "View the current message MSG in the browser."
      (interactive (list mu4e~view-msg))
      (let ((browse-url-browser-function #'browse-url-default-browser))
        (mu4e-action-view-in-browser msg)))

    :config/el-patch
    (general-add-hook 'mu4e-compose-mode-hook #'turn-off-auto-fill)
    (general-add-hook 'mu4e-view-mode-hook #'visual-line-mode)

    (general-setq mu4e-context-policy 'pick-first
                  mu4e-compose-context-policy 'ask-if-none
                  message-kill-buffer-on-exit t
                  mu4e-view-use-gnus t
                  mu4e-use-fancy-chars t
                  mu4e-headers-include-related nil
                  mu4e-headers-attach-mark '("a" . "A")
                  mu4e-headers-unread-mark '("u" . "●")
                  mu4e-headers-seen-mark '(" " . " ")
                  mu4e-hide-index-messages t
                  mu4e-headers-skip-duplicates t
                  mu4e-index-lazy-check t
                  mu4e-confirm-quit t
                  mu4e-view-prefer-html t
                  mu4e-view-show-images t
                  mu4e-view-show-addresses t
                  mu4e-maildir (f-expand "~/Mail")
                  mu4e-headers-date-format "%d-%m-%y %k:%M"
                  mu4e-completing-read-function #'completing-read
                  sendmail-program "msmtp"
                  message-send-mail-function #'message-send-mail-with-sendmail
                  mu4e-compose-format-flowed t
                  fill-flowed-encode-column 998
                  mu4e-get-mail-command "mbsync -V -q -a"
                  mu4e-change-filename-when-moving t
                  smtpmail-queue-mail nil
                  smtpmail-queue-dir (concat mu4e-maildir "/queue/cur")
                  mu4e-attachments-dir (f-expand "~/Downloads")
                  message-forward-before-signature nil
                  message-citation-line-function #'message-insert-formatted-citation-line
                  message-citation-line-format "On %a, %b %d %Y, %f wrote:\n"
                  mu4e-update-interval (* 60 5)
                  sendmail-coding-system 'utf-8
                  mu4e-html2text-command #'config-mail--shr-buffer)

    ;; View html message in eww. `av` in view to activate
    (add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)

    ;; View html message in external browser. `a&` in view to activate
    (add-to-list 'mu4e-view-actions '("&viewInExternalBrowser" . config-mail--view-in-external-browser-action) t)

    (setf (alist-get 'refile mu4e-marks)
          '(:char ("r" . "▶")
            :prompt "refile"
            :dyn-target (lambda (target msg)
                          (if (config-mail--message-from-me-p msg)
                              (mu4e-get-sent-folder msg)
                            (mu4e-get-refile-folder msg)))
            :action (lambda (docid msg target)
                      (unless (config-mail--message-from-me-p msg)
                        (mu4e~proc-move docid (mu4e~mark-check-target target) "+S-u-N")))))

    (add-to-list 'display-buffer-alist
                 `(,(rx bos " *mu4e-main*" eos)
                   (display-buffer-reuse-window
                    display-buffer-fullframe)
                   (reusable-frames . visible)))

    ;; Chris Barrett lisp/mu4e-hacks.el
    ;; https://github.com/chrisbarrett/.emacs.d/blob/master/hacks/mu4e-hacks.el
    (el-patch-defun mu4e-context-label ()
      "Propertized string with the current context name, or \"\" if
    there is none."
      (if (el-patch-wrap 1 1 (and (mu4e-context-current)
                                  (derived-mode-p 'mu4e-main-mode 'mu4e-headers-mode
                                                  'mu4e-view-mode 'mu4e-compose-mode)))
          (concat "[" (propertize (mu4e~quote-for-modeline
                                   (mu4e-context-name (mu4e-context-current)))
                                  'face 'mu4e-context-face) "]")
        ""))

    (el-patch-defun mu4e~main-view ()
      "Create the mu4e main-view, and switch to it."
      (if (eq mu4e-split-view 'single-window)
          (if (buffer-live-p (mu4e-get-headers-buffer))
              (switch-to-buffer (mu4e-get-headers-buffer))
            (mu4e~main-menu))
        (mu4e~main-view-real nil nil)
        ((el-patch-swap switch-to-buffer display-buffer) mu4e~main-buffer-name)
        (goto-char (point-min)))
      (add-to-list 'global-mode-string '(:eval (mu4e-context-label)))))

  (use-package messages-are-flowing
    :straight t
    :ghook ('message-mode-hook #'messages-are-flowing-use-and-mark-hard-newlines)
    :config/el-patch
    (el-patch-defun messages-are-flowing-use-and-mark-hard-newlines ()
      "Turn on `use-hard-newlines', and make hard newlines visible.
  The main use of this is to send \"flowed\" email messages, where
  line breaks within paragraphs are adjusted by the recipient's
  device, such that messages remain readable on narrow displays."
      (interactive)
      (use-hard-newlines (el-patch-add +1 t))
      (add-hook 'after-change-functions 'messages-are-flowing--mark-hard-newlines nil t)))

  (use-package mu4e-alert
    :straight t
    :after (mu4e)
    :config
    (general-setq mu4e-alert-interesting-mail-query "flag:unread maildir:/INBOX ")
    (mu4e-alert-enable-mode-line-display))

  (use-package org-mu4e
    :straight nil
    :after (:any org mu4e))
#+end_src

** Media
*** [[https://www.gnu.org/software/emms/][EMMS]]
#+name: init-emms-block
#+begin_src emacs-lisp
  (use-package emms
    :straight t
    :commands (emms)
    :init
    (defconst emms-info-atomic-parsley-tag-alist '(("©too" . "info-note")
                                                   ("©alb" . "info-album")
                                                   ("©ART" . "info-artist")
                                                   ("©nam" . "info-title")
                                                   ("©gen" . "info-genre")
                                                   ("©day" . "info-year")
                                                   ("trkn" . "info-tracknumber")))

    (defun emms-info-atomic-parsley (track)
      (when (and (eq 'file (emms-track-type track))
                 (string-match "\\.[Mm][Pp]4\\'" (emms-track-name track)))
        (with-temp-buffer
          (when (zerop
                 (apply (if (fboundp 'emms-i18n-call-process-simple)
                            'emms-i18n-call-process-simple
                          'call-process)
                        "AtomicParsley"
                        nil t nil
                        (list (emms-track-name track) "-t" "+")))
            (goto-char (point-min))
            (while (not (eql (point) (point-max)))
              (if (re-search-forward "^Atom \"\\(.*\\)\" contains: \\(.*\\)$" nil t)
                  (progn
                    (let ((name (match-string 1))
                          (value (match-string 2)))
                      (when (> (length value) 0)
                        (emms-track-set track
                                        (intern (cdr (assoc name emms-info-atomic-parsley-tag-alist)))
                                        value))
                      (forward-line 1)))
                (forward-line 1)))))))

    (defun emms-mark-add-info-to-tracks ()
      "Add info to all track in playlist"
      (interactive)
      (emms-mark-do-with-marked-track (lambda nil
                                        (let ((x (emms-playlist-track-at)))
                                          (emms-info-atomic-parsley x))
                                        (progn
                                          (forward-line 1)
                                          (point)))))

  ;;; Display album in playlist
    (defun ambrevar/emms-artist-album-track-and-title-format (bdata fmt)
      (concat
       "%i"
       (let ((artist (emms-browser-format-elem fmt "a")))
         (if (not artist)
             "%n"                           ; If unknown, display the filename.
           (concat
            "%a - "
            (let ((album (emms-browser-format-elem fmt "A")))
              (if album "%A - " ""))
            (let ((disc (emms-browser-format-elem fmt "D")))
              (if (and disc (not (string= disc ""))) "%D/" ""))
            (let ((track (emms-browser-format-elem fmt "T")))
              (if (and track (not (string= track "0")))
                  "%T. "
                ""))
            "%t [%d]")))))


    ;; Display disc number in browser
    (defun ambrevar/emms-browser-track-artist-and-title-format (bdata fmt)
      (concat
       "%i"
       (let ((disc (emms-browser-format-elem fmt "D")))
         (if (and disc (not (string= disc "")))
             "%D/"))
       (let ((track (emms-browser-format-elem fmt "T")))
         (if (and track (not (string= track "0")))
             "%T. "
           ""))
       "%n"))


    (defun ambrevar/emms-time-for-display (track)
      "Inspired by `emms-playing-time-display'."
      (let* ((total-playing-time
              (or (emms-track-get
                   track
                   'info-playing-time)
                  0))
             (total-min-only (/ total-playing-time 60))
             (total-sec-only (% total-playing-time 60)))
        (format "%02d:%02d" total-min-only total-sec-only)))

    (defun ambrevar/emms-track-description-with-album (track)
      "Simple function to give a user-readable description of a track.
  If it's a file track, just return the file name.  Otherwise,
  return the type and the name with a colon in between.
  Hex-encoded characters in URLs are replaced by the decoded
  character."
      (let ((type (emms-track-type track)))
        (cond ((eq 'file type)
               (cl-flet ((fmt (string &optional suffix prefix)
                              (if string
                                  (concat prefix string suffix)
                                "")))
                 (concat
                  (fmt (emms-track-get track 'info-artist) " - ")
                  (fmt (emms-track-get track 'info-album) " - ")
                  (fmt (emms-track-get track 'info-discnumber) "/")
                  (if (emms-track-get track 'info-tracknumber)
                      (format "%02d. " (string-to-number (emms-track-get track 'info-tracknumber)))
                    "")
                  (emms-track-get track 'info-title)
                  (fmt (ambrevar/emms-time-for-display track) "]" " ["))))
              ((eq 'url type)
               (emms-format-url-track-name (emms-track-name track)))
              (t (concat (symbol-name type)
                         ": " (emms-track-name track))))))


    (defun ambrevar/emms-tracks-duration (begin end)
      "Display play time of tracks in region."
      (interactive "r")
      (if (not (use-region-p))
          (message "%s" (emms-browser-track-duration
                         (car (emms-browser-tracks-at-point))))
        (let* ((total-time)
               (first-line (line-number-at-pos begin))
               (last-line (line-number-at-pos end))
               (count 0))
          (setq total-time
                (save-mark-and-excursion
                  (cl-loop for line from first-line to last-line
                           do (goto-line line)
                           for time = (emms-track-get (car (emms-browser-tracks-at-point))
                                                      'info-playing-time)
                           when time
                           do (cl-incf count)
                           when time
                           sum time)))
          (message "%02d:%02d for %d tracks" (/ total-time 60) (% total-time 60)
                   count))))

    :config
    (require 'emms-setup)
    (emms-all)
    (emms-history-load)
    (require 'emms-player-mpv)
    (require 'emms-source-playlist)
    (require 'emms-source-file)
    (require 'emms-mark)
    (require 'emms-info)
    (require 'emms-browser)
    (general-setq emms-player-list '(emms-player-mpv))


    (general-setq emms-source-file-default-directory (expand-file-name "~/Movies/")
                  emms-info-asynchronously t
                  emms-info-auto-update t
                  emms-show-format "NP: %s"
                  emms-playlist-buffer-name "*EMMS Playlist*"
                  emms-browser-default-format "%i%a - %A:	%T	%t [%d]")

    (general-setq emms-info-functions '(emms-info-atomic-parsley))
    (general-pushnew "--no-audio-display" emms-player-mpv-parameters)
    (general-pushnew 'emms-info-initialize-track emms-track-initialize-functions))
#+end_src

*** [[https://github.com/jorenvo/simple-mpc][Simple-MPC]]
#+name: init-simple-mpc-block
#+begin_src emacs-lisp
  (use-package simple-mpc
    :straight t
    :config
    (general-setq simple-mpc-playlist-format "%artist%	%album%	%title%	%file%"
                  simple-mpc-table-separator "	")) ;; These are TAB separators <C-q TAB>

#+end_src

*** [[https://github.com/hniksic/emacs-htmlize][HTMLize]]
#+name: init-htmlize-block
#+begin_src emacs-lisp
  (use-package htmlize
    :straight t)
#+end_src

*** [[https://github.com/flexibeast/ebuku][Ebuku]]
#+name: init-ebuku-block
#+begin_src emacs-lisp
  (use-package ebuku
    :straight t)
#+end_src

** Version Control
*** [[https://github.com/magit/magit][Magit]]
#+name: init-magit-block
#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :general ("C-x g"   #'magit-status
              "C-x M-g" #'magit-dispatch)
    :preface
    (general-add-hook 'magit-mode-mode-hook #'hide-mode-line-mode)
    :config
    (general-setq magit-view-git-manual-method 'woman
                  magit-revision-show-gravatars '("^Author:     " . "^Commit:     ")
                  magit-diff-refine-hunk t
                  magit-save-repository-buffers nil
                  magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1))
#+end_src

*** [[https://github.com/jtatarik/magit-gitflow][Magit-Gitflow]]
#+name: init-magit-gitflow-block
#+begin_src emacs-lisp
  (use-package magit-gitflow
    :straight t
    :ghook ('magit-mode-hook #'turn-on-magit-gitflow))
#+end_src

*** [[https://github.com/magit/magit/blob/master/lisp/git-commit.el][Git-Commit]]
#+name: init-git-commit-block
#+begin_src emacs-lisp
  (use-package git-commit
    :straight nil
    :ghook ('magit-mode-hook #'global-git-commit-mode)
    :config
    (general-setq git-commit-summary-max-length 50
                  git-commit-style-convention-checks '(overlong-summary-line non-empty-second-line)))
#+end_src

*** [[https://github.com/magit/forge][Forge]]
#+name: init-forge-block
#+begin_src emacs-lisp
  (use-package forge
    :straight t :after (magit))
#+end_src

*** [[https://gitlab.com/pidu/git-timemachine][Git-Time-Machine]]
#+name: init-git-timemachine-block
#+begin_src emacs-lisp
  (use-package git-timemachine
    :straight (:host gitlab :repo "pidu/git-timemachine")
    :config
    (general-setq git-timemachine-show-minibuffer-details t))
#+end_src

*** [[https://github.com/magit/with-editor][With-Editor]]
#+name: init-with-editor-block
#+begin_src emacs-lisp
  (use-package with-editor
    :straight t
    :preface
    (general-add-hook 'shell-mode-hook 'with-editor-export-editor))
#+end_src

*** [[https://github.com/justbur/emacs-vdiff-magit][Vdiff-Magit]]
#+name: init-vdiff-magit-block
#+begin_src emacs-lisp
  (use-package vdiff-magit
    :straight t
    :general
    (:keymaps 'magit-mode-map
     "e" #'vdiff-magit-dwim
     "E" #'vdiff-magit)
    :config
    (transient-suffix-put 'magit-dispatch "e" :description "vdiff (dwim)")
    (transient-suffix-put 'magit-dispatch "e" :command #'vdiff-magit-dwim)
    (transient-suffix-put 'magit-dispatch "E" :description "vdiff")
    (transient-suffix-put 'magit-dispatch "E" :command #'vdiff-magit))

#+end_src

** Language Server Support
*** [[https://github.com/joaotavora/eglot#animated_gifs][Eglot]]
#+name: init-eglot-block
#+begin_src emacs-lisp
  (use-package eglot
    :straight t
    :ghook ('python-mode-hook #'eglot-ensure)
    :config
    (add-to-list 'eglot-server-programs
                 `(python-mode . ("pyls" "-v" "--tcp" "--host"
                                  "localhost" "--port" :autoport))))
#+end_src

** Syntax & Linting
*** [[https://github.com/raxod502/apheleia][Apheleia]]
#+name: init-apheleia-block
#+begin_src emacs-lisp
  (use-package apheleia
    :straight (:host github :repo "raxod502/apheleia")
    :ghook ('emacs-startup-hook #'apheleia-global-mode)
    :init
    (defun arco/save-buffer-reformat-maybe (func &optional arg)
      "Make it so \\[save-buffer] with prefix arg inhibits reformatting."
      (let ((apheleia-mode (and apheleia-mode (member arg '(nil 1)))))
        (funcall func)))

    (general-add-advice #'arco/save-buffer-reformat-maybe :around 'save-buffer))
#+end_src

*** [[https://github.com/flycheck/flycheck][Flycheck]]
#+name: init-flycheck-block
#+begin_src emacs-lisp
  (use-package flycheck
    :straight t
    :ghook ('prog-mode-hook #'global-flycheck-mode)
    :init
    (defun arco/disable-eldoc-on-flycheck (&rest _)
      "Disable ElDoc when point is on a Flycheck overlay.
  This prevents ElDoc and Flycheck from fighting over the echo
  area."
      (not (flycheck-overlay-errors-at (point))))
    (general-add-advice #'arco/disable-eldoc-on-flycheck :after-while #'eldoc-display-message-no-interference-p)
    :config
    (general-setq flycheck-sh-shellcheck-executable "shellcheck"
                  flycheck-shellcheck-follow-sources t)
    (general-pushnew 'sh-shellcheck flycheck-checkers))
#+end_src

*** [[https://github.com/flycheck/flycheck-popup-tip][Flycheck-Popup-Tip]]
#+name: init-flycheck-popup-tip-block
#+begin_src emacs-lisp
  (use-package flycheck-popup-tip
    :straight t :after (flycheck)
    :if (display-graphic-p)
    :ghook 'flycheck-mode-hook
    :config
    (general-setq flycheck-popup-tip-error-prefix "* "))
#+end_src

*** [[https://github.com/polymode/polymode][Polymode]]
#+name: init-polymode-block
#+begin_src emacs-lisp
  (use-package polymode
    :straight t)

  (use-package poly-R
    :straight t :after ess)
#+end_src

** Languages
*** Bash
**** [[https://github.com/dougm/bats-mode][BATS]]
#+name: init-bats-block
#+begin_src emacs-lisp
  (use-package bats-mode
    :straight t
    :mode ("\\.bats$"))
#+end_src

*** Emacs-Lisp
**** Elisp-Mode (Built-In)
#+name: init-emacs-lisp-mode-block
#+begin_src emacs-lisp
  (use-package emacs-lisp-mode
    :straight (:type built-in)
    :blackout (emacs-lisp-mode . "Elisp")
    :mode (("\\.el$" . emacs-lisp-mode)
           ("^Cask$" . emacs-lisp-mode))
    :gfhook #'outline-minor-mode
    :config
    (general-setq lisp-indent-offset t)
    (general-setq emacs-lisp-docstring-fill-column 80))
#+end_src

**** Fix Identation
[[https://stackoverflow.com/questions/22166895/customize-elisp-plist-indentation][Found on StackOverflow by the great @raxod502.]]
[[https://github.com/chrisbarrett/.emacs.d/blob/master/hacks/lisp-hacks.el][Chris Barrett's very similar fix to the same problem]]

#+name: init-elisp-identation-block
#+begin_src emacs-lisp
  (el-patch-feature lisp-mode)

  ;; Improve indentation for plists.

  (with-eval-after-load 'lisp-mode
    (with-no-warnings
      (el-patch-defun lisp-indent-function (indent-point state)
        "This function is the normal value of the variable `lisp-indent-function'.
  The function `calculate-lisp-indent' calls this to determine
  if the arguments of a Lisp function call should be indented specially.
  INDENT-POINT is the position at which the line being indented begins.
  Point is located at the point to indent under (for default indentation);
  STATE is the `parse-partial-sexp' state for that position.
  If the current line is in a call to a Lisp function that has a non-nil
  property `lisp-indent-function' (or the deprecated `lisp-indent-hook'),
  it specifies how to indent.  The property value can be:
  ,* `defun', meaning indent `defun'-style
    (this is also the case if there is no property and the function
    has a name that begins with \"def\", and three or more arguments);
  ,* an integer N, meaning indent the first N arguments specially
    (like ordinary function arguments), and then indent any further
    arguments like a body;
  ,* a function to call that returns the indentation (or nil).
    `lisp-indent-function' calls this function with the same two arguments
    that it itself received.
  This function returns either the indentation to use, or nil if the
  Lisp function does not specify a special indentation."
        (el-patch-let (($cond (and (elt state 2)
                                   (el-patch-wrap 1 1
                                     (or (not (looking-at "\\sw\\|\\s_"))
                                         (looking-at ":")))))
                       ($then (progn
                                (if (not (> (save-excursion (forward-line 1) (point))
                                            calculate-lisp-indent-last-sexp))
                                    (progn (goto-char calculate-lisp-indent-last-sexp)
                                           (beginning-of-line)
                                           (parse-partial-sexp (point)
                                                               calculate-lisp-indent-last-sexp 0 t)))
                                ;; Indent under the list or under the first sexp on the same
                                ;; line as calculate-lisp-indent-last-sexp.  Note that first
                                ;; thing on that line has to be complete sexp since we are
                                ;; inside the innermost containing sexp.
                                (backward-prefix-chars)
                                (current-column)))
                       ($else (let ((function (buffer-substring (point)
                                                                (progn (forward-sexp 1) (point))))
                                    method)
                                (setq method (or (function-get (intern-soft function)
                                                               'lisp-indent-function)
                                                 (get (intern-soft function) 'lisp-indent-hook)))
                                (cond ((or (eq method 'defun)
                                           (and (null method)
                                                (> (length function) 3)
                                                (string-match "\\`def" function)))
                                       (lisp-indent-defform state indent-point))
                                      ((integerp method)
                                       (lisp-indent-specform method state
                                                             indent-point normal-indent))
                                      (method
                                       (funcall method indent-point state))))))
          (let ((normal-indent (current-column))
                (el-patch-add
                  (orig-point (point))))
            (goto-char (1+ (elt state 1)))
            (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
            (el-patch-swap
              (if $cond
                  ;; car of form doesn't seem to be a symbol
                  $then
                $else)
              (cond
               ;; car of form doesn't seem to be a symbol, or is a keyword
               ($cond $then)
               ((and (save-excursion
                       (goto-char indent-point)
                       (skip-syntax-forward " ")
                       (not (looking-at ":")))
                     (save-excursion
                       (goto-char orig-point)
                       (looking-at ":")))
                (save-excursion
                  (goto-char (+ 2 (elt state 1)))
                  (current-column)))
               (t $else))))))))
#+end_src

**** [[https://github.com/wasamasa/firestarter][Firestarter]]
This is a nifty package that allows me to define functions as local variables in elisp files that will be run on save. I use this to auto-tangle the config file when editing.
#+name: init-firestarter-block
#+begin_src emacs-lisp
  (use-package firestarter
    :straight t
    :ghook 'before-save-hook)
#+end_src

**** [[https://github.com/jwiegley/emacs-async][Async]]
#+name: init-async-block
#+begin_src emacs-lisp
  (use-package async
    :straight t
    :ghook ('dired-mode-hook #'dired-async-mode)
    :blackout (dired-async-mode . ""))
#+end_src

**** [[https://github.com/emacscollective/auto-compile][Auto-Compile]]
#+name: init-auto-compile-block
#+begin_src emacs-lisp :tangle no
  (use-package auto-compile
    :straight t
    :config
    (general-setq auto-compile-display-buffer nil
                  auto-compile-mode-line-counter t
                  auto-compile-source-recreate-deletes-dest t
                  auto-compile-toggle-deletes-nonlib-dest t
                  auto-compile-update-autoloads t))
#+end_src

*** Clojure
**** [[https://github.com/clojure-emacs/clojure-mode][Clojure-Mode]]
#+name: init-clojure-mode-block
#+begin_src emacs-lisp
  (use-package clojure-mode
    :straight t
    :mode ("\\.edn$"))
#+end_src

*** Markdown
**** [[https://github.com/defunkt/markdown-mode][Mardown-Mode]]
#+name: init-markdown-block
#+begin_src emacs-lisp
  (use-package markdown-mode
    :straight t
    :mode ("\\.md$")
    :config
    (general-setq markdown-fontify-code-blocks-natively t
                  markdown-enable-wiki-links t
                  markdown-italic-underscore t
                  markdown-asymmetric-header t
                  markdown-gfm-uppercase-checkbox t
                  markdown-gfm-additional-languages '("sh")
                  markdown-make-gfm-checkboxes-buttons t
                  mardown-indent-nenter 'indent-and-new-item))
#+end_src

**** [[https://github.com/milkypostman/markdown-mode-plus][Markdown-Mode-Plus]]
#+name: init-markdown-mode-plus-block
#+begin_src emacs-lisp
  (use-package markdown-mode+
    :straight t)
#+end_src

**** [[https://github.com/polymode/poly-markdown][Poly-Markdown]]
#+name: init-poly-markdown
#+begin_src emacs-lisp
  (use-package poly-markdown
    :straight t
    :mode (("\\.md'" . poly-markdown-mode)
           ("\\.Rmd'" . poly-markdown+r-mode)
           ("\\.rmd'" . poly-markdown+r-mode)))
#+end_src

*** LaTeX
**** AuCTeX
#+name: init-auctex-block
#+begin_src emacs-lisp

#+end_src

*** Go
**** [[https://github.com/dominikh/go-mode.el][Go-Mode]]
#+name: init-go-mode-block
#+begin_src emacs-lisp :tangle no
  (use-package go-mode
    :mode "\\.go\\'"
    :ghook ('before-save-hook #'gofmt-before-save))
#+end_src

*** R
**** ESS
#+name: init-ess-block
#+begin_src emacs-lisp :tangle no
  (use-package ess
    :straight t
    :general
    (:keymaps '(ess-mode-map inferior-ess-mode-map)
     "C-c ." #'djm/R-pipe-operator)
    :preface
    (defun djm/R-pipe-operator ()
      "R - piping operator (%>%)"
      (interactive)
      (just-one-space 1)
      (insert "%>%")
      (reindent-then-newline-and-indent))
    :config
    (general-setq ess-ask-for-ess-directory nil
                  ess-style 'RStudio
                  ess-eval-visibly 'nowait
                  ess-fill-calls-newlines t
                  ess-help-own-frame 'one
                  ess-history-file nil
                  ess-indent-with-fancy-comments nil
                  ess-nuke-trailing-whitespace t
                  ess-offset-arguments 'prev-line
                  ess-offset-continued 'straight
                  ess-roxy-fontify-examples t
                  ess-use-auto-complete nil
                  ess-use-company t
                  inferior-R-args "--no-restore --quiet --no-save"
                  inferior-ess-same-window nil))
#+end_src

*** Julia
**** [[https://github.com/JuliaEditorSupport/julia-emacs][Julia-Mode]]
#+name: init-julia-block
#+begin_src emacs-lisp
  (use-package julia-mode
    :straight t
    :interpreter "/usr/local/bin/julia"
    :config
    ;; Borrow matlab.el's fontification of math operators
    ;; From <https://ogbe.net/emacsconfig.html>
    (dolist (mode '(julia-mode ess-julia-mode))
      (font-lock-add-keywords
       mode
       `((,(let ((OR "\\|"))
             (concat "\\(" ;; stolen `matlab.el' operators first
                     "[<>!]=?" OR
                     "\\.[/*^']" OR
                     "==" OR
                     "=>" OR
                     "\\<xor\\>" OR
                     "[-+*\\/^&|$]=?" OR ;; this has to come before next (updating operators)
                     "[-!^&|*+\\/~:]" OR
                     ;; more extra julia operators follow
                     "[%$]" OR
                     ;; bitwise operators
                     ">>>" OR ">>" OR "<<" OR
                     ">>>=" OR ">>" OR "<<" OR
                     ;; comparison
                     "[<>!]=?" OR
                     "\\)"))
          1 font-lock-type-face)))))
#+end_src

**** [[https://github.com/tpapp/julia-repl][Julia-REPL]]
#+name: init-julia-repl-block
#+begin_src emacs-lisp
  (use-package julia-repl
    :straight t
    :ghook 'julia-mode-hook
    :config
    (defun arco/set-julia-repl-env ()
      (setenv "TERM" "xterm-256color"))
    (general-add-hook 'inferior-julia-mode-hook #'arco/set-julia-repl-env))
#+end_src


*** Python
**** Python (Built-In)
#+name: init-python-block
#+begin_src emacs-lisp
  (use-package python
    :straight (:type built-in)
    :config
    (use-package python-docstring
      :demand t :straight t
      :ghook 'python-mode-hook)
    (outline-minor-mode t)
    (general-setq python-shell-interpreter "ipython"
                  python-shell-interpreter-args "--simple-prompt"
                  python-indent-guess-indent-offset-verbose nil))
#+end_src

*** Rust
**** [[https://github.com/brotzeit/rustic][Rustic]]
#+name: init-rust-rustc-block
#+begin_src emacs-lisp
  (use-package rustic
    :straight t
    :mode ("\\.rs$" . rustic-mode)
    :commands rustic-run-cargo-command rustic-cargo-outdated
    :config
    (general-setq rustic-indent-method-chain t
                  rustic-flycheck-setup-mode-line-p nil
                  rustic-format-trigger nil
                  rustic-lsp-client nil))
#+end_src

**** [[https://github.com/racer-rust/emacs-racer][Racer]]
#+name: init-rust-racer-block
#+begin_src emacs-lisp
  (use-package racer
    :straight t :after rustic
    :ghook 'rustic-mode-hook
    :config
    (general-setq auto-mode-alist (delete '("\\.rs\\'" . rust-mode) auto-mode-alist)))
#+end_src

*** File Modes
**** [[https://github.com/tequilasunset/apples-mode][Apple-Script]]
#+name: init-apple-script-block
#+begin_src emacs-lisp
  (use-package apples-mode
    :straight t
    :mode "\\.\\(applescri\\|sc\\)pt\\'")
#+end_src

**** Crontab-Mode
#+name: init-crontab-mode-block
#+begin_src emacs-lisp
  (use-package crontab-mode
    :straight t)
#+end_src

**** Gitconfig-Mode
#+name: init-gitconfig-mode-block
#+begin_src emacs-lisp
  (use-package gitconfig-mode
    :straight t)
#+end_src

**** Gitignore-Mode
#+name: init-gitignore-mode-block
#+begin_src emacs-lisp
  (use-package gitignore-mode
    :straight t)
#+end_src

**** JSON-Mode
#+name: init-json-mode-block
#+begin_src emacs-lisp
  (use-package json-mode
    :straight t)
#+end_src

**** [[https://github.com/ledger/ledger-mode][Ledger-Mode]]
#+name: init-ledger-mode-block
#+begin_src emacs-lisp
  (use-package ledger-mode
    :straight t
    :config/el-patch
    (general-setq ledger-report-use-header-line nil
                  ledger-post-account-alignment-column 2
                  ledger-fontify-xact-state-overrides nil)
    ;; Chris Barret Legder Hacks
    ;; https://github.com/chrisbarrett/.emacs.d/blob/master/hacks/ledger-hacks.el
    (el-patch-defun ledger-do-report (cmd)
      "Run a report command line CMD.
  CMD may contain a (shell-quoted) version of
  `ledger-report--extra-args-marker', which will be replaced by
  arguments returned by `ledger-report--compute-extra-args'."
      (goto-char (point-min))
      (let* ((inhibit-read-only t)
             (marker ledger-report--extra-args-marker)
             (marker-re (concat " *" (regexp-quote marker)))
             (args (ledger-report--compute-extra-args cmd))
             (args-str (concat " " (mapconcat #'shell-quote-argument args " ")))
             (clean-cmd (replace-regexp-in-string marker-re "" cmd t t))
             (real-cmd (replace-regexp-in-string marker-re args-str cmd t t)))
        (setq header-line-format
              (and ledger-report-use-header-line
                   `(:eval (ledger-report--compute-header-line ,clean-cmd))))
        (unless ledger-report-use-header-line
          (insert (format "Report: %s\n" ledger-report-name)
                  (format "Command: %s\n" clean-cmd)

                  (el-patch-swap (make-string (- (window-width) 1) ?=)
                                 "")
                  "\n\n"))
        (let* ((report (shell-command-to-string real-cmd)))
          (when ledger-report-use-native-highlighting
            (setq report (ansi-color-apply report)))
          (save-excursion
            (insert report))
          (when (ledger-report--cmd-needs-links-p cmd)
            (save-excursion
              (ledger-report--add-links))))

        (el-patch-add
          (page-break-lines--update-display-tables)))))

  (use-package flycheck-ledger
    :straight t
    :after (:and flycheck ledger-mode))
#+end_src

**** [[https://github.com/skuro/plantuml-mode][PlantUML-Mode]]
#+name: init-plantuml-mode-block
#+begin_src emacs-lisp
  (use-package plantuml-mode
    :straight t
    :config
    (general-setq plantuml-jar-path "/usr/local/Cellar/plantuml/1.2020.0/libexec/plantuml.jar"
                  plantuml-default-exec-mode 'jar))
#+end_src

**** [[https://github.com/jhgorrell/ssh-config-mode-el][SSH-Config-Mode]]
#+name: init-ssh-config-block
#+begin_src emacs-lisp
  (use-package ssh-config-mode
    :straight t)
#+end_src

**** [[file:https:/github.com/rndusr/subed/][Subed (Subtitle Mode)]]
#+name: init-subtitle-mode-block
#+begin_src emacs-lisp :tangle no
  (use-package subed
    :straight (:host github :repo "rndusr/subed" :files ("subed/*.el"))
    :mode ("\\.srt$")
    :defines subed--init-alist
    :gfhook 'auto-fill-mode
    :config
    ;; Break lines at 40 characters
    (general-add-hook 'subed-mode-hook (lambda () (setq-local fill-column 40))))
#+end_src

**** [[https://github.com/dryman/toml-mode.el][TOML-Mode]]
#+name: init-toml-mode-block
#+begin_src emacs-lisp
  (use-package toml-mode
    :blackout "TOML" :straight t
    :mode "Pipfile\\'")
#+end_src

**** [[https://github.com/yoshiki/yaml-mode][YAML-Mode]]
#+name: init-yaml-block
#+begin_src emacs-lisp
  (use-package yaml-mode
    :straight t
    :mode ("\\.yaml'" "\\.yml'"))
#+end_src


** Miscellaneous
*** [[https://github.com/parkouss/speed-type][SpeedType]]
#+name: init-speed-type-block
#+begin_src emacs-lisp
  (use-package speed-type
    :straight t)
#+end_src


*** [[https://github.com/emacsmirror/2048-game][2048-Game]]
#+name: init-2048-block
#+begin_src emacs-lisp
  (use-package 2048-game
    :straight t)
#+end_src

*** [[https://github.com/dylanjm/emacs-anywhere][Emacs-Anywhere]]
#+name: init-emacs-anywhere-block
#+begin_src emacs-lisp
  (use-package emacs_anywhere
    :straight (:host github :repo "dylanjm/emacs-anywhere")
    :init
    (defun github-conversation-p (window-title)
      (or (string-match-p "Pull Request" window-title)
          (string-match-p "Issues" window-title)))

    (defun popup-handler (app-name window-title x y w h)
      (set-frame-position (selected-frame) x (+ y (- h 300)))
      (unless (zerop w)
        (set-frame-size (selected-frame) w 400 5))

      (when (equal app-name "iTerm2")
        ;; Tell Emacs Anywhere not to paste if launched from Terminal
        (setq ea-paste nil)
        (shell-script-mode))

      (cond
       ((github-conversation-p window-title) (gfm-mode))
       (t (markdown-mode))))

    (general-add-hook 'ea-popup-hook #'popup-handler))
#+end_src

*** [[https://github.com/vermiculus/sx.el][Stack-Exchange]]
#+name: init-stack-exchange-block
#+begin_src emacs-lisp
  (use-package sx
    :straight t)
#+end_src

*** [[https://github.com/rnkn/fountain-mode][Fountain-Mode]]
#+name: init-fountain-mode-block
#+begin_src emacs-lisp
  (use-package fountain-mode
    :straight t)
#+end_src

** Footer

#+name: init-footer-block
#+begin_src emacs-lisp
  (provide 'init)
  ;;; init.el ends here
#+end_src

* Conclusion
* Citations
* COMMENT Local Variables
# Local Variables:
# time-stamp-line-limit: 2000
# time-stamp-format: "%Y-%m-%d %H:%M:%S"
# time-stamp-active: t
# time-stamp-start: "\/last updated\/:[ ]*"
# time-stamp-end: "$"
# page-break-lines-mode: nil
# firestarter: (djm/config-tangle)
# End:
