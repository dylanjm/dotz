#+title: Dot-Z-Macs
#+author: Dylan McDowell
#+startup: content
#+property: header-args :tangle "~/dotz/editors/emacs.d/init.el"

/last updated/: 2019-11-27 20:03:53

* Table of Contents :TOC@3:noexport:
- [[#about][About]]
  - [[#literate-programming-in-org][Literate Programming in Org]]
  - [[#system-requirements][System Requirements]]
- [[#early-init][Early-Init]]
  - [[#header][Header]]
  - [[#performance-tweaks][Performance Tweaks]]
    - [[#garbage-collection][Garbage Collection]]
  - [[#preliminary-configuration][Preliminary Configuration]]
    - [[#pre-gui-optimization][Pre-Gui Optimization]]
  - [[#straight-package-manager][Straight Package Manager]]
  - [[#environment][Environment]]
  - [[#no-littering][No-Littering]]
  - [[#required-packages][Required Packages]]
  - [[#footer][Footer]]
- [[#init][Init]]
  - [[#header-1][Header]]
  - [[#general-user-settings--tools][General User Settings & Tools]]
    - [[#personal-tweaks][Personal Tweaks]]
    - [[#defaults][Defaults]]
    - [[#user-files][User Files]]
  - [[#theme--aesthetics][Theme & Aesthetics]]
    - [[#icons][Icons]]
    - [[#themes][Themes]]
    - [[#modelines][Modelines]]
    - [[#ui-features][UI Features]]
  - [[#utilities][Utilities]]
    - [[#system][System]]
    - [[#terminal--shell][Terminal & Shell]]
    - [[#project-management][Project Management]]
    - [[#autocomplete][Autocomplete]]
    - [[#frameworks][Frameworks]]
    - [[#documentation][Documentation]]
    - [[#spell-check][Spell Check]]
    - [[#editing-tools][Editing Tools]]
    - [[#minor-modes][Minor Modes]]
    - [[#navigation][Navigation]]
  - [[#productivity][Productivity]]
    - [[#org][Org]]
    - [[#ledger][Ledger]]
    - [[#email][Email]]
    - [[#calendar][Calendar]]
    - [[#spotify][Spotify]]
    - [[#web-browsing][Web Browsing]]
  - [[#programming-support][Programming Support]]
    - [[#version-control][Version Control]]
    - [[#language-server-support][Language Server Support]]
    - [[#syntax--linting][Syntax & Linting]]
  - [[#languages][Languages]]
    - [[#markdown][Markdown]]
    - [[#yaml][YAML]]
    - [[#makefiles][Makefiles]]
    - [[#latex][LaTeX]]
    - [[#shell][Shell]]
    - [[#elisp][Elisp]]
    - [[#r][R]]
    - [[#julia][Julia]]
    - [[#ess][ESS]]
    - [[#python][Python]]
    - [[#c][C++]]
  - [[#fun][Fun]]
    - [[#speedtype][SpeedType]]
  - [[#footer-1][Footer]]
- [[#conclusion][Conclusion]]
- [[#citations][Citations]]

* About
#+ATTR_HTML: :width 1000px
#+ATTR_ORG: :width 1000
[[file:assets/config-preview.png]]

** Literate Programming in Org
This document is my current emacs config which contains the code for my =early-init.el= file and =init.el= file. You may be wondering how one file can contain code for two different configuration files. Through the power of =org-babel-tangle=, I am able to configure and document my entire emacs experience in a single Org file. There are several reasons to organize one's configuration this way. I hope these reasons become obvious as you browse through, but personally I find it much easier to document my choices using a markup language. This way I can store links and reference back to forum threads and other places when updating. I can also include pictures throughout and organize code-blocks with specific names to make navigation quick and painless. If you're interested in creating a similar setup, take a look at the raw-version of this file. There is important information contained in the header and throughout the file to make this work. Once you have a proper the proper settings, start adding src-blocks and then run =M-x org-babel-tangle <RET>=. Your config files will then be generated and Emacs will use those files when starting up. I have also written a hook that tangles this file everytime I save.

** System Requirements

#+name: docs-emacs-install-block
#+begin_src shell :tangle no
  brew tap daviderestivo/emacs-head
  brew install emacs-head --HEAD --with-cocoa --with-dbus --with-imagemagick --with-jansson --with-mailutils --with-no-frame-refocus --with-pdumper --with-xwidgets --with-modern-icon-nuvola
#+end_src

| Hardware             |      OS | Emacs Version |
|----------------------+---------+---------------|
| 15" 2019 MacBook Pro | 10.14.6 |       27.0.50 |
| 15" 2019 MacBook Pro |         |       27.0.50 |

-------------------------------------------------------------------

* Early-Init
:properties:
:header-args: :tangle "~/dotz/editors/emacs.d/early-init.el"
:end:
** Header
#+name: early-init-header-block
#+begin_src emacs-lisp
  ;;; early-init.el --- Early initialization. -*- lexical-binding: t; buffer-read-only: t; byte-compile: t-*-
  ;;;
  ;;; Commentary:
  ;;; Emacs `early-init.el' config by dylanjm
  ;;; This file was automatically generated by `org-babel-tangle'.
  ;;; Do not change this file.  Main config is located in emacs.d/dotemacs.org
  ;;;
  ;;; Code:
#+end_src

** Performance Tweaks
You'll see a similar configuration in other dotfiles online. By default, Emac's runs it garbage collector when the
*** Garbage Collection
#+name: early-init-gc-block
#+begin_src emacs-lisp
  (defvar default-file-name-handler-alist file-name-handler-alist)
  (defvar extended-gc-cons-threshold most-positive-fixnum)
  (defvar default-gc-cons-threshold 800000)

  (setq file-name-handler-alist nil
        gc-cons-percentage 0.8
        gc-cons-threshold extended-gc-cons-threshold
        inhibit-compacting-font-caches t
        load-prefer-newer t
        package-enable-at-startup nil)

  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))

  (defun djm/return-vars-to-normal ()
    (setq-default file-name-handler-alist default-file-name-handler-alist
                  gc-cons-threshold default-gc-cons-threshold
                  gc-cons-percentage 0.1
                  load-prefer-newer nil
                  debug-on-error nil))

  (add-hook 'after-init-hook #'djm/return-vars-to-normal)
#+end_src

** Preliminary Configuration
*** Pre-Gui Optimization
#+name: early-init-pre-gui-block
#+begin_src emacs-lisp
  (setq-default auto-window-vscroll nil
                bidi-display-reordering 'left-to-right
                frame-inhibit-implied-resize t
                window-resize-pixelwise t
                frame-resize-pixelwise t)

  (setq initial-frame-alist '((window-divider-default-bottom-width . 1)
                              (window-divider-default-right-width . 1)
                              (window-divider-default-places . t)))

  (setq default-frame-alist '((alpha 95 95)
                              (ns-transparent-titlebar . t)
                              (internal-border-width . 5)
                              (right-fringe . 3)
                              (left-fringe . 3)
                              (vertical-scroll-bars)))

  (prefer-coding-system 'utf-8-unix)
  (set-language-environment "UTF-8")
  (set-keyboard-coding-system 'utf-8)
  (set-clipboard-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-selection-coding-system 'utf-8)
  (modify-coding-system-alist 'process "*" 'utf-8)
  (set-file-name-coding-system 'utf-8)
#+end_src

** Straight Package Manager
#+name: early-init-straight-block
#+begin_src emacs-lisp
    (eval-and-compile
      (defvar straight-recipes-gnu-elpa-use-mirror t)
      (defvar bootstrap-version 5)
      (defvar bootstrap-file
        (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory)))

    (with-no-warnings
      (setq straight-cache-autoloads t
            straight-recipe-overrides nil
            straight-repository-branch "develop"
            straight-use-package-by-default t
            straight-check-for-modifications '(find-at-startup find-when-checking)))

    (with-no-warnings
      (setq use-package-verbose t
            use-package-always-defer t
            use-package-enable-imenu-support t
            use-package-compute-statistics t))

    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))

    (load bootstrap-file nil 'nomessage)
    (straight-use-package 'use-package)
#+end_src

** Environment
#+name: early-init-environment-block
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :demand t
    :straight (:host github :repo "purcell/exec-path-from-shell")
    :custom
    (exec-path-from-shell-check-startup-files nil)
    (exec-path-from-shell-variables '("ENV" "PATH" "MANPATH" "CACHE" "GPG_TTY"))
    (exec-path-from-shell-arguments '("-l"))
    :config
    (exec-path-from-shell-initialize))
#+end_src

** No-Littering
#+name: early-init-no-littering-block
#+begin_src emacs-lisp
  (use-package no-littering
    :demand t
    :straight t
    :preface
    (defvar djm--emacs-cache (concat (getenv "CACHE") "/emacs/"))
    (defvar djm--emacs-etc-cache (concat djm--emacs-cache "etc/"))
    (defvar djm--emacs-var-cache (concat djm--emacs-cache "var/"))
    :custom
    (no-littering-etc-directory djm--emacs-etc-cache)
    (no-littering-var-directory djm--emacs-var-cache))
#+end_src

** Required Packages
#+name: early-init-req-packages-block
#+begin_src emacs-lisp
  (use-package dash :demand t)
  (use-package cl-lib :straight nil)
  (use-package use-package-chords :demand t)
  (use-package use-package-hydra :demand t)
  (use-package el-patch :demand t)
  (use-package bind-key :demand t)
  (use-package general :demand t)
  (use-package blackout :demand t :straight (:host github :repo "raxod502/blackout"))
  (straight-use-package 'org-plus-contrib)
  (straight-use-package 'org)
#+end_src

** Footer
#+name: early-init-footer-block
#+begin_src emacs-lisp
  (provide 'early-init)
  ;;; early-init.el ends here
#+end_src

-------------------------------------------------------------------
* Init
** Header
#+name: init-header-block
#+begin_src emacs-lisp
  ;;; init.el --- Emacs main configuration file -*- lexical-binding: t; buffer-read-only: t; byte-compile: t-*-
  ;;;
  ;;; Commentary:
  ;;; Emacs `init.el' config by dylanjm.
  ;;; This file was automatically generated by `org-babel-tangle'.
  ;;; Do not change this file.  Main config is located in emacs.d/dotemacs.org
  ;;;
  ;;; Code:
#+end_src

** General User Settings & Tools
*** Personal Tweaks
**** Personal Variables
#+name: init-personal-vars-block
#+begin_src emacs-lisp
  (defvar djm--assets-directory    (concat user-emacs-directory "assets/"))
  (defvar djm--lisp-directory      (concat user-emacs-directory "lisp/"))
  (defvar djm--straight-directory  (concat user-emacs-directory "straight/"))
  (defvar djm--yasnippet-directory (concat user-emacs-directory "snippets/"))

  (defvar djm--org-agenda-directory "~/org/")

  (defvar djm--custom-file (concat djm--emacs-etc-cache "custom.el"))
  (defvar djm--secret-file (concat djm--emacs-etc-cache "secret.el"))

  (defvar djm--auto-save-file-cache (concat djm--emacs-var-cache "backups/"))
#+end_src

**** Personal Functions
#+name: init-personal-funcs-block
#+begin_src emacs-lisp
  (defun djm/create-non-existent-directory ()
    (let ((parent-directory (file-name-directory buffer-file-name)))
      (when (and (not (file-exists-p parent-directory))
                 (y-or-n-p (format "Directory `%s' does not exist! Create it?" parent-directory )))
        (make-directory parent-directory t))))

  (defun djm/gc-on-lose-focus ()
    "A convienient time to run garbage collect is when Emacs loses focus."
    (unless (frame-focus-state)
      (garbage-collect)))

  (defun djm/minibuffer-setup-hook ()
    "With modern packages like Ivy/Counsel, let's extend the gc-threshold while
  using the minibuffer to maximize performance"
    (setq gc-cons-percentage .8)
    (setq gc-cons-threshold extended-gc-cons-threshold))

  (defun djm/minibuffer-exit-hook ()
    "Upon exiting the minibuffer, we'll set everything back to normal"
    (setq gc-cons-percentage .1)
    (setq gc-cons-threshold default-gc-cons-threshold))

  (defun djm/delete-custom-file ()
    "Custom function to delete my custom.el file."
    (interactive)
    (if (file-exists-p custom-file)
        (progn
          (delete-file custom-file)
          (message "Custom file deleted!"))
      (message "Custom file does not exist!")))

  (defun djm/delete-secret-file ()
    "Custom Function to delete my secret file anytime."
    (interactive)
    (if (file-exists-p djm--secret-file)
        (progn
          (delete-file djm--secret-file)
          (message "Secret file deleted!"))
      (message "Secret file does not exist!")))

  (defun djm/kill-buffer-when-no-processes (&rest _)
    "Kill buffer and its window when there's no processes left."
    (when (null (get-buffer-process (current-buffer)))
      (kill-buffer (current-buffer))))

  (defun djm/fetch-hunspell-dictionary ()
    (unless (file-exists-p "~/Library/Spelling/en_US.aff")
      (shell-command "bash $DOTFILES/bootstrap/bootstrap_dicts.sh")))
#+end_src

[[https://web.archive.org/web/20191113215833/https://emacs.stackexchange.com/questions/32150/how-to-add-a-timestamp-to-each-entry-in-emacs-messages-buffer][StackOverflow - How to add a timestamp to each entry in Emacs' *Messages* buffer?]]
[[https://web.archive.org/web/20191114151905/http://nullman.net/emacs/files/init-emacs.el.html][nullman.net - init-emacs.el]]

#+name: init-personal-funcs-block
#+begin_src emacs-lisp
  (defun djm/current-time-microseconds ()
    "Return the current time formatted to include microseconds."
    (let* ((nowtime (current-time))
       (now-ms (nth 2 nowtime)))
      (concat (format-time-string "[%Y-%m-%d %T" nowtime) (format ".%d] " now-ms))))

  (defun djm/message-with-timestamp (format-string &rest args)
    "Add timestamps to `*Messages*' buffer."
    (when (and (> (length format-string) 0)
               (not (string= format-string " ")))
      (let ((deactivate-mark nil))
        (save-excursion
          (with-current-buffer "*Messages*"
            (let ((inhibit-read-only t))
              (goto-char (point-max))
              (when (not (bolp)) (newline))
              (insert (djm/current-time-microseconds))))))))
#+end_src

#+name: init-personal-func-whitespace-block
#+begin_src emacs-lisp
  (defun djm/enable-trailing-whitespace ()
    "Show trailing spaces and delete on save."
    (setq show-trailing-whitespace t)
    (add-hook 'before-save-hook #'delete-trailing-whitespace nil t))
#+end_src

**** Personal Hooks & Advice
#+name: init-gc-hooks-block
#+begin_src emacs-lisp
  (add-hook 'minibuffer-setup-hook #'djm/minibuffer-setup-hook)
  (add-hook 'minibuffer-exit-hook #'djm/minibuffer-exit-hook)
  (add-hook 'prog-mode-hook #'djm/enable-trailing-whitespace)
  (add-hook 'org-mode-hook #'djm/enable-trailing-whitespace)
  (add-hook 'text-mode #'djm/enable-trailing-whitespace)
  (add-hook 'conf-mode #'djm/enable-trailing-whitespace)
  (add-hook 'org-babel-pre-tangle-hook #'djm/minibuffer-setup-hook)
  (add-hook 'org-babel-post-tangle-hook #'djm/minibuffer-exit-hook)

  (if (boundp 'after-focus-change-function)
      (add-function :after after-focus-change-function #'djm/gc-on-lose-focus))
#+end_src

#+name: init-personal-hooks-block
#+begin_src emacs-lisp
  (add-hook 'write-file-hooks 'time-stamp)
  (advice-add 'message :before #'djm/message-with-timestamp)
#+end_src

**** Personal Keybindings
#+name: init-personal-keybindings-block
#+begin_src emacs-lisp
    (general-define-key
     "RET" #'newline-and-indent
     "C-j" #'newline-and-indent
     "C-g" #'minibuffer-keyboard-quit
     "C-z" nil)
#+end_src

#+name: init-aliases-block
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  (fset 'display-startup-echo-area-message 'ignore)
  (fset 'view-hello-file 'ignore)
  (fset 'custom-safe-themes 't)
  (fset 'bb 'bury-buffer)
#+end_src

**** Personal Code & Packages
#+name: init-personal-packages-block
#+begin_src emacs-lisp

#+end_src

*** Defaults
**** Advice [Built-In]
#+name: init-advice-block
#+begin_src emacs-lisp
  (use-package advice
    :demand t :straight nil
    :config
    (setq ad-redefinition-action 'accept))
#+end_src

**** Auth-Source [Built-In]
#+name: init-auth-source-block
#+begin_src emacs-lisp
  (use-package auth-source
    :demand t :straight nil
    :init
    (setq auth-sources `(,(no-littering-expand-etc-file-name "authinfo.gpg")
                         ,(no-littering-expand-etc-file-name "authinfo"))))
#+end_src

**** Autorevert [Built-In]
#+name: init-autorevert-block
#+begin_src emacs-lisp
  (use-package autorevert
    :demand t :blackout t :straight nil
    :init
    (global-auto-revert-mode +1)
    (setq auto-revert-verbose nil
          global-auto-revert-non-file-buffers t
          auto-revert-use-notify nil))
#+end_src

**** Comint [Built-In]
#+name: init-comint-block
#+begin_src emacs-lisp
  (use-package comint
    :demand t :straight nil
    :init (setq comint-prompt-read-only t))
#+end_src

**** Compile [Built-In]
#+name: init-compile-block
#+begin_src emacs-lisp
  (use-package compile
    :demand t
    :straight nil
    :init
    (setq compilation-message-face 'compilation-base-face
          compilation-always-kill t
          compilation-ask-about-save nil
          compilation-scroll-output 'first-error))
#+end_src

**** Cus-Start [Built-In]
#+name: init-cus-start-block
#+begin_src emacs-lisp
  (use-package cus-start
    :demand t :straight nil
    :init
    (setq-default auto-save-list-file-prefix nil
                  auto-save-list-file-name nil
                  command-line-x-option-alist nil
                  cursor-in-non-selected-windows nil
                  cursor-type 'bar
                  delete-by-moving-to-trash t
                  disabled-command-function nil
                  default-directory (getenv "HOME")
                  echo-keystrokes 0.02
                  enable-recursive-minibuffers t
                  fast-but-imprecise-scrolling t
                  ffap-machine-p-known 'reject
                  fill-column 80
                  frame-title-format '("%b - Emacs")
                  highlight-nonselected-windows nil
                  icon-title-format frame-title-format
                  initial-scratch-message ""
                  inhibit-startup-echo-area-message t
                  inhibit-startup-screen t
                  indent-tabs-mode nil
                  indicate-buffer-boundaries nil
                  indicate-empty-lines nil
                  max-specpdl-size 2040
                  mode-line-in-non-selected-windows t
                  ring-bell-function #'ignore
                  scroll-conservatively 101
                  scroll-margin 0
                  scroll-preserve-screen-position t
                  scroll-step 1
                  sentence-end-double-space nil
                  split-width-threshold 160
                  split-height-threshold nil
                  tab-always-indent 'complete
                  tab-width 4
                  use-dialog-box nil
                  use-file-dialog nil
                  visible-cursor nil
                  window-combination-resize t
                  x-stretch-cursor nil
                  x-underline-at-descent-line t))
#+end_src

**** Delsel [Built-In]
#+name: init-delsel-block
#+begin_src emacs-lisp
  (use-package delsel
    :demand t :blackout t :straight nil
    :init (delete-selection-mode +1))
#+end_src

**** Epa [Built-In]
#+name: init-epa-block
#+begin_src emacs-lisp
  (use-package epa
    :demand t :straight nil
    :init (setq epa-replace-original-text t))
#+end_src

**** Epg [Built-In]
#+name: init-epg-block
#+begin_src emacs-lisp
  (use-package epg
    :demand t :straight nil
    :init (setq epg-pinentry-mode 'loopback))
#+end_src

**** Face-Remap [Built-In]
#+name: init-face-remap-block
#+begin_src emacs-lisp
  (use-package face-remap
    :demand t :straight nil
    :config
    (blackout 'buffer-face-mode)
    (blackout 'variable-pitch-mode))
#+end_src

**** Files [Built-In]
#+name: init-files-block
#+begin_src emacs-lisp
  (use-package files
    :demand t :straight nil
    :init
    (setq auto-save-file-name-transforms `((".*" ,djm--auto-save-file-cache t))
          backup-directory-alist `((".*" . ,djm--auto-save-file-cache))
          backup-by-copying t
          confirm-kill-processes nil
          create-lockfiles nil
          delete-old-versions t
          find-file-visit-truename t
          insert-directory-program "gls"
          kept-new-versions 6
          delete-old-versions t
          confirm-nonexistent-file-or-buffer nil
          version-control t
          select-enable-clipboard t
          large-file-warning-threshold 10000000000
          require-final-newline t
          view-read-only t)
    (unless (file-exists-p djm--auto-save-file-cache)
      (make-directoy djm--auto-save-file-cache)))
#+end_src

**** Frame [Built-In]
#+name: init-frame-block
#+begin_src emacs-lisp
  (use-package frame
    :demand t :straight nil
    :init
    (blink-cursor-mode -1)
    (unless (display-graphic-p)
      (menu-bar-mode -1)))
#+end_src

**** Gnutls [Built-In]
#+name: init-gnutls-block
#+begin_src emacs-lisp
  (use-package gnutls
    :demand t :straight nil
    :init
    (setq gnutls-verify-error t
          gnutls-min-prime-bits 2048))
#+end_src

**** MWheel [Built-In]
#+name: init-mwheel-block
#+begin_src emacs-lisp
  (use-package mwheel
    :demand t :straight nil
    :config
    (setq mouse-wheel-scroll-amount '(5 ((shift) . 2))
          mouse-wheel-progressive-speed nil))
#+end_src

**** NS-Win [Built-In]
#+name: init-ns-win-block
#+begin_src emacs-lisp
  (use-package ns-win
    :demand t :straight nil
    :init
    (setq mac-command-modifier 'meta
          mac-option-modifier 'meta
          mac-right-command-modifier 'super
          mac-right-option-modifier 'none
          mac-function-modifier 'hyper)
    (setq ns-pop-up-frames nil
          ns-use-native-fullscreen nil
          ns-use-thin-smoothing t))
#+end_src

**** Pixel-Scroll [Built-In]
#+name: init-pixel-scroll-block
#+begin_src emacs-lisp
  (use-package pixel-scroll
    :demand t :blackout t :straight nil
    :init (pixel-scroll-mode +1))
#+end_src

**** Recentf [Built-In]
#+name: init-recentf-block
#+begin_src emacs-lisp
  (use-package recentf
    :defer 3 :straight nil
    :init
    (setq recentf-max-saved-items 2000
          recentf-max-menu-items 100
          recentf-auto-cleanup 'never
          recentf-exclude `(,djm--emacs-cache
                            ,djm--straight-directory
                            ,djm--org-agenda-directory
                            "\\.\\(?:gz\\|gif\\|svg\\|png\\|jpe?g\\)$"
                            "\\.?emacs-head"
                            "\\.?straight"
                            "\\.?cache"
                            ".cask"
                            "url"
                            "COMMIT_EDITMSG\\'"
                            "bookmarks"
                            "^/tmp/"
                            "^/ssh:"
                            "\\.?ido\\.last$"
                            "\\.revive$"
                            "/TAGS$"
                            "^/var/folders/.+$"))
    (run-at-time nil (* 5 60) (lambda () (let ((inhibit-message t)) (recentf-cleanup))))
    (run-at-time nil (* 5 60) (lambda () (let ((save-silently t)) (recentf-save-list))))
    (recentf-mode +1))
#+end_src

**** Savehist [Built-In]
#+name: init-savehist-block
#+begin_src emacs-lisp
  (use-package savehist
    :demand t :blackout t :straight nil
    :init
    (setq history-delete-duplicates t
          savehist-additional-variables '(kill-ring regexp-search-ring))
    (savehist-mode +1))
#+end_src

**** Saveplace [Built-In]
#+name: init-saveplace-block
#+begin_src emacs-lisp
  (use-package saveplace
    :demand t :blackout t :straight nil
    :init (save-place-mode +1))
#+end_src

**** Select [Built-In]
#+name: init-select-block
#+begin_src emacs-lisp
  (use-package select
    :demand t :straight nil
    :init (setq select-enable-clipboard t))
#+end_src

**** Time [Built-In]
#+name: init-time-block
#+begin_src emacs-lisp
  (use-package time
    :demand t :straight nil
    :init
    (setq display-time-24hr-format t
          display-time-day-and-date t
          display-time-default-load-average nil)
    (display-time-mode +1))
#+end_src

**** Tooltip [Built-In]
#+name: init-tooltip-block
#+begin_src emacs-lisp
  (use-package tooltip
    :demand t :straight nil
    :init (tooltip-mode -1))
#+end_src

**** Uniquify [Built-In]
#+name: init-uniquify-block
#+begin_src emacs-lisp
  (use-package uniquify
    :demand t :straight nil
    :init
    (setq uniquify-ignore-buffers-re "^\\*"
          uniquify-buffer-name-style 'forward
          uniquify-separator "/"))
#+end_src

**** VC-Hooks [Built-In]
#+name: init-vc-block
#+begin_src emacs-lisp
  (use-package vc-hooks
    :demand t :straight nil
    :init
    (setq vc-handled-backends nil
          vc-follow-symlinks t))
#+end_src

**** Winner [Built-In]
#+name: init-winner-block
#+begin_src emacs-lisp
  (use-package winner
    :demand t :blackout t :straight nil
    :init
    (setq winner-boring-buffers '("*Completions*"
                                  "*Compile-Log*"
                                  "*inferior-lisp*"
                                  "*Fuzzy Completions*"
                                  "*Apropos*"
                                  "*Help*"
                                  "*cvs*"
                                  "*Buffer List*"
                                  "*Ibuffer*"
                                  "*esh command on file*"))
    (winner-mode +1))
#+end_src

*** User Files
**** Custom File
#+name: init-custom-load-block
#+begin_src emacs-lisp
  (setq custom-file djm--custom-file)
  (when (file-exists-p custom-file)
    (load custom-file :noerror))
#+end_src

**** Secret File
#+name: init-secret-load-block
#+begin_src emacs-lisp
  (when (file-exists-p djm--secret-file)
    (load djm--secret-file :noerror))
#+end_src

** Theme & Aesthetics
*** Icons
**** VSCode-Icon
#+name: init-vscode-icon-block
#+begin_src emacs-lisp
  (use-package vscode-icon
    :demand t
    :straight t
    :commands (vscode-icon-for-file))
#+end_src

**** All-The-Icons
#+name: init-all-the-icons-block
#+begin_src emacs-lisp
  (use-package all-the-icons
    :demand t
    :straight t
    :commands (all-the-icons-wicon
               all-the-icons-insert
               all-the-icons-install-fonts
               all-the-icons-insert-wicon
               all-the-icons-insert-faicon
               all-the-icons-insert-octicon
               all-the-icons-insert-fileicon
               all-the-icons-insert-material
               all-the-icons-insert-alltheicon))
#+end_src

*** Themes
**** Gruvbox Theme
#+name: init-gruvbox-theme-block
#+begin_src emacs-lisp
  (use-package gruvbox-theme
    :demand t
    :straight (:host github :repo "dylanjm/emacs-theme-gruvbox")
    :config
    (load-theme 'gruvbox-dark-hard t))

  (set-face-attribute 'variable-pitch nil :inherit 'default
                      :family "Iosevka Aile" :weight 'ultra-light)
  (set-face-attribute 'font-lock-comment-face nil
                      :family "Iosevka Etoile" :weight 'ultra-light :slant 'italic)
  (set-face-attribute 'fixed-pitch nil :inherit 'default
                      :family "Iosevka Term" :weight 'ultra-light)
#+end_src

#+name: init-font-config-block
#+begin_src emacs-lisp
  ;; Test range: 🐷 ❤ ⊄ ∫ 𝛼 α 🜚 Ⓚ
  (set-fontset-font t nil (font-spec :family "Iosevka Term") nil nil)
  (dolist (script '(symbol mathematical))
    (set-fontset-font t script (font-spec :family "XITS Math" :weight 'normal) nil nil))

  ;; Define a font set stack for symbols, greek and math characters
  (dolist (script '(symbol greek))
    (set-fontset-font t script (font-spec :family "Symbola") nil 'append)
    (set-fontset-font t script (font-spec :family "Arial Unicode MS") nil 'append)
    (set-fontset-font t script (font-spec :family "DejaVu Sans Mono") nil 'prepend))

  ;; Colored Emoji on OS X, prefer over everything else!
  (set-fontset-font t 'unicode (font-spec :family "Symbola") nil nil)
  (set-fontset-font t 'unicode (font-spec :family "DejaVuSansMono Nerd Font") nil 'prepend)
  (set-fontset-font t 'unicode (font-spec :family "Apple Color Emoji") nil 'prepend)

  ;; Fallbacks for math and generic symbols
  (set-fontset-font t nil (font-spec :family "Apple Symbols") nil 'append)
#+end_src

*** Modelines
**** Hide-Modeline
#+name: init-hide-modelines-block
#+begin_src emacs-lisp
  (use-package hide-mode-line
    :blackout t
    :straight t
    :commands (hide-mode-line-mode
               hide-mode-line-reset
               global-hide-mode-line-mode))
#+end_src

**** Smart-Mode-Line
#+name: init-smart-mode-line-block
#+begin_src emacs-lisp
  (use-package smart-mode-line
    :straight t
    :hook (after-init . sml/setup)
    :config
    (setq sml/theme nil
          sml/no-confirm-load-theme t))
#+end_src

**** Minions
#+name: init-minions-block
#+begin_src emacs-lisp
  (use-package minions
    :disabled t
    :straight t
    :hook (after-init . minions-mode))
#+end_src

**** Custom Modeline
#+name: init-custom-modeline-block
#+begin_src emacs-lisp
  (defun djm/mode-line-time-format ()
    (propertize (format-time-string " %H:%M ")
        'face 'font-lock-builtin-face))

  (defun djm/mode-line-buffer-modified-status ()
    (propertize "%b" 'face
        (let ((face (buffer-modified-p)))
          (if face 'font-lock-warning-face
            'font-lock-type-face))
        'help-echo (buffer-file-name)))

   ;; https://emacs.stackexchange.com/a/7542/12534
   (defun djm/mode-line-align (left right)
     (let ((width (- (window-total-width) (length left))))
       (format (format "%%s%%%ds" width) left right)))

   (defcustom djm--mode-line-left
     '((:eval (djm/mode-line-time-format))
       (:eval (djm/mode-line-buffer-modified-status))
       " (%l,%c) [%m]")
     "Composite mode line construct to be shown left-aligned."
     :type 'sexp)

   (defcustom djm--mode-line-right nil
     "Composite mode line construct to be shown right-aligned."
     :type 'sexp)

   ;; Actually reset the mode line format to show all the things we just
   ;; defined.
   ;; (setq-default mode-line-format
   ;;       '(:eval (replace-regexp-in-string
   ;;            "%" "%%"
   ;;            (djm/mode-line-align
   ;;             (format-mode-line djm--mode-line-left)
   ;;             (format-mode-line djm--mode-line-right))
   ;;            'fixedcase 'literal)))
#+end_src

*** UI Features
**** Ansi-Color [Built-In]
#+name: init-ansi-color-block
#+begin_src emacs-lisp
  (use-package ansi-color
    :demand t :straight nil)
#+end_src

**** Beacon
#+name: init-beacon-block
#+begin_src emacs-lisp
  (use-package beacon
    :blackout t :straight t
    :ghook 'prog-mode-hook 'org-mode-hook
    :config
    (setq beacon-push-mark 15
          beacon-color .50))
#+end_src

**** Color [Built-In]
#+name: init-color-block
#+begin_src emacs-lisp
  (use-package color
    :demand t :straight nil
    :functions (color-darken-name))
#+end_src

**** Dashboard
#+name: init-dashboard-block
#+begin_src emacs-lisp
  (use-package dashboard
    :disabled t
    :blackout t
    :straight (:host github :repo "emacs-dashboard/emacs-dashboard")
    :hook (dashboard-mode . hide-mode-line-mode)
    :init
    (dashboard-setup-startup-hook)
    :custom
    (dashboard-items '((recents . 3) (projects . 3) (bookmarks . 3) (agenda . 5)))
    (dashboard-startup-banner 4)
    (dashboard-init-info "")
    (dashboard-set-file-icons t)
    (dashboard-heading-icons t)
    (dashboard-page-separator "\n\n")
    (dashboard-center-content t)
    (dashboard-footer "djm emacs configuration 2019")
    (dashboard-footer-icon (all-the-icons-wicon "moon-4"
                                                :height 1.05
                                                :v-adjust -0.05
                                                :face 'font-lock-keyword-face))
    :config/el-patch
    (defun dashboard-get-banner-path (index)
      "Return the full path to banner with index INDEX."
      (concat (el-patch-swap
                dashboard-banners-directory
                djm--assets-directory)
              (format "%d.txt" index)))

    (defun dashboard-insert-projects (list-size)
      "Add the list of LIST-SIZE items of projects."
      (require 'projectile)
      (el-patch-swap
        (projectile-cleanup-known-projects)
        (let ((inhibit-message t))
          (projectile-cleanup-known-projects)))
      (projectile-load-known-projects)
      (dashboard-insert-section
       "Projects:"
       (dashboard-subseq (projectile-relevant-known-projects)
                         0 list-size)
       list-size
       "p"
       `(lambda (&rest ignore) (projectile-switch-project-by-name ,el))
       (abbreviate-file-name el)))


    (set-face-attribute 'dashboard-text-banner nil :foreground "#4e4e4e")
    (set-face-attribute 'dashboard-footer nil :foreground "#4e4e4e"))
#+end_src

**** Default-Text-Scale
#+name: init-default-text-scale-block
#+begin_src emacs-lisp
  (use-package default-text-scale
    :straight t
    :general
    ("<C-s-up>" #'default-text-scale-increase
     "<C-s-down>" #'default-text-scale-decrease
     "<C-M-s-down>" #'default-text-scale-reset)
    :custom (default-text-scale-amount 20))
#+end_src

**** Dimmer-Mode
#+name: init-dimmer-block
#+begin_src emacs-lisp
  (use-package dimmer
    :disabled t :blackout t :straight t
    :commands (dimmer-mode)
    :custom
    (dimmer-fraction 0.33)
    (dimmer-exclusion-regexp-list '(".*minibuf.*"
                                    ".*which-key.*"
                                    ".*messages.*"
                                    ".*async.*"
                                    ".*warnings.*"
                                    ".*lv.*"
                                    ".*ilist.*"
                                    ".*posframe.*"
                                    ".*transient.*")))
#+end_src

**** Eterm-256-Color
#+name: init-eterm-256-color-block
#+begin_src emacs-lisp
  (use-package eterm-256color
    :blackout t :straight t
    :hook (vterm-mode . eterm-256color-mode))
#+end_src

**** Focus
#+name: init-focus-block
#+begin_src emacs-lisp
  (use-package focus
    :straight t)
#+end_src

**** Highlight-Defined
#+name: init-highlight-defined-block
#+begin_src emacs-lisp
  (use-package highlight-defined
    :blackout t :straight t
    :ghook 'emacs-lisp-mode-hook 'lisp-interaction-mode-hook)
#+end_src

**** Highlight-Indent-Guides
#+name: init-highlight-indent-guides-block
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :blackout t :straight t
    :ghook 'python-mode-hook 'yaml-mode-hook)
#+end_src

**** Highlight-Line [Built-In]
#+name: init-hl-line-block
#+begin_src emacs-lisp
  (use-package hl-line
    :demand t :blackout t :straight nil
    :commands (hl-line-mode global-hl-line-mode))
#+end_src

**** Highlight-Thing
#+name: init-highlight-thing-block
#+begin_src emacs-lisp
  (use-package highlight-thing
    :blackout t :straight t
    :ghook 'prog-mode-hook)
#+end_src

**** Origami
#+name: init-origami-block
#+begin_src emacs-lisp
  (use-package origami
    :straight t)
#+end_src

**** Page-Break-Lines
#+name: init-page-break-lines-block
#+begin_src emacs-lisp
  (use-package page-break-lines
    :blackout t :straight t
    :hook (after-init . global-page-break-lines-mode)
    :custom
    (page-break-lines-modes
     '(ibuffer-mode text-mode comint-mode compilation-mode help-mode org-agenda-mode)))
#+end_src

**** Posframe
#+name: init-posframe-block
#+begin_src emacs-lisp
  (use-package posframe
    :disabled t :straight t)
#+end_src

**** Rainbow-Delimiters
#+name: init-rainbow-delimiters-block
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :blackout t :straight t
    :ghook 'prog-mode-hook)
#+end_src

**** Shackle
#+name: init-shackle-block
#+begin_src emacs-lisp
  (use-package shackle
    :blackout t :straight t
    :hook 'after-init-hook)
#+end_src

**** Simple [Built-In]
#+name: init-simple-block
#+begin_src emacs-lisp
  (use-package simple
    :demand t :straight nil
    :init
    (blackout 'visual-line-mode)
    (setq blink-matching-paren t
          column-number-mode t
          display-time-mode t
          eval-expression-print-length nil
          eval-expression-print-level nil
          inhibit-point-motion-hooks t
          kill-do-not-save-duplicates t
          line-move-visual nil
          line-number-mode t
          next-line-add-newlines nil
          save-interprogram-paste-before-kill t
          set-mark-command-repeat-pop t
          show-trailing-whitespace nil
          track-eol t))
#+end_src

**** Tab-Line [Built-In]
#+name: init-tab-line-block
#+begin_src emacs-lisp
    (use-package tab-line
      :disabled t :straight nil)
#+end_src

**** Volatile-Highlights
#+name: init-volatile-highlights-block
#+begin_src emacs-lisp
  (use-package volatile-highlights
    :blackout t :straight t
    :ghook 'prog-mode-hook 'text-mode-hook)
#+end_src

**** Whitespace [Built-In]
#+name: init-whitespace-block
#+begin_src emacs-lisp
  (use-package whitespace
    :demand t :straight nil
    :init
    (setq whitespace-style '(face empty indentation::space tab trailing)))
#+end_src

**** Whitespace-Cleanup
#+name: init-whitespace-cleanup-block
#+begin_src emacs-lisp
  (use-package whitespace-cleanup-mode
    :blackout t :straight t
    :ghook 'after-init-hook)
#+end_src

** Utilities
*** System
**** Async
#+name: init-async-block
#+begin_src emacs-lisp
  (use-package async
    :straight t
    :hook ((dired-mode . dired-async-mode)
           (after-init . async-bytecomp-package-mode))
    :config
    (setq async-bytecomp-allowed-packages '(all)))
#+end_src

**** OSX-Trash
#+name: init-osx-trash-block
#+begin_src emacs-lisp
  (use-package osx-trash
    :demand t :straight t
    :config (osx-trash-setup))
#+end_src

**** OSX-Lib
#+name: init-osx-lib-block
#+begin_src emacs-lisp
  (use-package osx-lib
    :straight t)
#+end_src

**** Restart-Emacs
#+name: init-restart-emacs-block
#+begin_src emacs-lisp
  (use-package restart-emacs
    :straight t
    :commands (restart-emacs))
#+end_src

**** Server
#+name: init-server-block
#+begin_src emacs-lisp

#+end_src

**** PDF-Tools
#+name: init-pdf-tools-block
#+begin_src emacs-lisp
  (use-package pdf-tools
    :straight t)
#+end_src

*** Terminal & Shell
**** Term [Built-In]
#+name: init-term-block
#+begin_src emacs-lisp
    (use-package term
      :straight nil)
#+end_src

**** VTerm
#+name: init-vterm-block
#+begin_src emacs-lisp
  (use-package vterm
    :straight t
    :config
    (setq vterm-term-environment-variable "eterm-256color"))
#+end_src

**** VTerm-Toggle
#+name: init-vterm-toggle-block
#+begin_src emacs-lisp
  (use-package vterm-toggle
    :straight t
    :general
    ("C-c C-t" #'vterm-toggle
     "C-c C-y" #'term-toggle-cd))
#+end_src

*** Project Management
**** Projectile
#+name: init-projectile-block
#+begin_src emacs-lisp
  (use-package projectile
    :blackout t :straight t
    :hook (after-init . projectile-global-mode)
    :config
    (setq projectile-completion-system 'ivy
          projectile-enable-caching t
          projectile-switch-project-action 'projectile-dired
          projectile-verbose nil))
#+end_src

**** Projectile-Speedbar
#+name: init-projectile-speedbar-block
#+begin_src emacs-lisp
  (use-package projectile-speedbar
    :straight t)
#+end_src

**** Direnv
#+name: init-direnv-block
#+begin_src emacs-lisp
  (use-package direnv
    :blackout t :straight t
    :ghook 'after-init-hook
    :commands (direnv-update-environment
               direnv-allow)
    :config
    (add-to-list 'direnv-non-file-modes '(comint-mode
                                          term-mode
                                          vterm-mode
                                          eshell-mode
                                          shell-mode
                                          compilation-mode)))
#+end_src
**** Find-File-in-Project
#+name: init-find-file-in-project-block
#+begin_src emacs-lisp
  (use-package find-file-in-project
    :straight t
    :commands (find-file-in-project
               find-file-in-project-by-selected)
    :config
    (setq ffip-use-rust-fd t))
#+end_src

*** Autocomplete
**** Hippie Expand [Built-In]
#+name: init-hippie-block
#+begin_src emacs-lisp
  (use-package hippie-exp
    :demand t :straight nil
    :general ([remap dabbrev-expand] #'hippie-expand)
    :custom
    (hippie-expand-try-functions-list '(try-expand-dabbrev
                                        try-expand-dabbrev-all-buffers
                                        try-expand-dabbrev-from-kill
                                        try-complete-file-name-partially
                                        try-complete-file-name
                                        try-expand-all-abbrevs
                                        try-expand-list
                                        try-complete-lisp-symbol-partially
                                        try-complete-lisp-symbol)))
#+end_src

**** Abbrev [Built-In]
#+name: init-abbrev-block
#+begin_src emacs-lisp
  (use-package abbrev
    :demand t :blackout t :straight nil
    :custom
    (save-abbrevs 'silently)
    (abbrev-file-name (no-littering-expand-var-file-name "abbrev_defs"))
    :config
    (abbrev-mode +1))
#+end_src


**** Company
#+name: init-company-block
#+begin_src emacs-lisp
    (use-package company
      :blackout t :straight t
      :hook (after-init . global-company-mode)
      :general
      (:keymaps
       'company-active-map
       "RET" nil
       [return] nil
       "TAB" #'company-complete-selection
       [tab] #'company-complete-selection
       "<right>" #'company-complete-common
       "C-n" #'company-select-next
       "C-p" #'company-select-previous)
      :custom
      (company-begin-commands '(self-insert-command))
      (company-backends '(company-files
                          company-keywords
                          company-capf
                          company-yasnippet
                          (company-abbrev company-dabbrev)))
      (company-frontends '(company-pseudo-tooltip-unless-just-one-frontend
                           company-preview-frontend
                           company-echo-metadata-frontend))
      (company-auto-complete-chars nil)
      (company-async-timeout 10)
      (company-dabbrev-downcase nil)
      (company-dabbrev-ignore-case nil)
      (company-dabbrev-other-buffers nil)
      (company-idle-delay 0.1)
      (company-minimum-prefix-length 2)
      (company-require-match #'company-explicit-action-p)
      (company-show-numbers t)
      (company-tooltip-limit 10)
      (company-tooltip-align-annotations t))

    (use-package company-prescient
      :blackout t :straight t
      :ghook 'global-company-mode-hook)

    (use-package company-flx
      :blackout t :straight t
      :ghook 'global-company-mode)

    (use-package company-box
      :blackout t :straight t
      :ghook 'company-mode-hook
      :custom (company-box-enable-icon t))

    (use-package company-emoji
      :straight t
      :hook (global-company-mode . company-emoji-init))

    (use-package company-math
      :straight t
      :hook (global-company-mode . company-math-init)
      :preface
      (defun company-math-init ()
        (setq company-backends (-snoc company-backends 'company-math-symbols-unicode 'company-math-symbols-latex))))

    (use-package company-lsp
      :after (company lsp-mode)
      :custom (company-lsp-cache-canidates 'auto))

    (use-package company-anaconda
      :straight t
      :hook (global-company-mode . company-anaconda-init)
      :preface
      (defun company-anaconda-init ()
        (setq company-backends (-snoc company-backends 'company-anaconda))))
#+end_src

**** Yasnippet
#+name: init-yasnippet-block
#+begin_src emacs-lisp
  (use-package yasnippet
    :blackout t :straight t
    :hook ((prog-mode org-mode text-mode) . yas-minor-mode)
    :hook (after-init . yas-global-mode)
    :general ("C-;" #'yas-expand)
    :custom
    (yas-verbosity 1)
    (yas-wrap-around-region t)
    (yas-prompt-functions '(yas-completing-prompt))
    (yas-snippet-dirs `(,djm--yasnippet-directory)))

  (use-package yasnippet-snippets
    :blackout t :straight t :after (yasnippet)
    :config (yas-reload-all))

  (use-package auto-yasnippet
    :straight t :after (yasnippet))

  (use-package ivy-yasnippet
    :straight t)
#+end_src

**** Auto-Insert [Built-In]
#+name: init-autoinsert-block
#+begin_src emacs-lisp
  (use-package autoinsert
    :demand t :straight nil)
#+end_src

*** Frameworks
**** Hydra
#+name: init-hydra-block
#+begin_src emacs-lisp
  (use-package hydra
    :straight t)
#+end_src

**** Key Chords
#+name: init-key-chords-block
#+begin_src emacs-lisp
  (use-package key-chord
    :blackout t :straight t
    :config (key-chord-mode +1))
#+end_src

**** Amx
#+name: init-amx-block
#+begin_src emacs-lisp
  (use-package amx
    :disabled t :blackout t :straight t
    :ghook 'ivy-mode-hook
    :custom
    (amx-ignored-command-matchers nil)
    (amx-show-key-bindings nil)
    (amx-save-file (no-littering-expand-var-file-name "amx-save.el")))
#+end_src

**** FLX
#+name: init-flx-block
#+begin_src emacs-lisp
  (use-package flx
    :demand t :straight t)
#+end_src

**** Prescient
#+name: init-prescient-block
#+begin_src emacs-lisp
  (use-package prescient
    :demand t :blackout t :straight t
    :config (prescient-persist-mode +1))
#+end_src

**** Ivy
#+name: init-ivy-block
#+begin_src emacs-lisp
  (use-package ivy
    :blackout t :straight t
    :ghook 'after-init-hook
    :general
    ([remap ido-switch-buffer] #'ivy-switch-buffer
     "C-x B"                   #'ivy-switch-buffer-other-window
     "C-c C-r"                 #'ivy-resume
     [remap kill-ring-save]    #'ivy-kill-ring-save)
    (:keymaps
     'ivy-minibuffer-map
     "<tab>" #'ivy-alt-done
     "C-w"   #'ivy-yank-word
     "C-o"   #'ivy-occur)
    (:keymaps
     'ivy-switch-buffer-map
     [remap kill-buffer] #'ivy-switch-buffer-kill)
    :custom
    (ivy-dynamic-exhibit-delay-ms 250)
    (ivy-use-selectable-prompt t)
    (ivy-case-fold-search-default 'auto)
    (ivy-use-virtual-buffers t)
    (ivy-virtual-abbreviate 'name)
    (ivy-count-format "(%d/%d) ")
    (ivy-flx-limit 2000)
    :config
    (ivy-set-actions t '(("I" insert "insert")))
    (ivy-set-occur 'ivy-switch-buffer 'ivy-switch-buffer-occur))
#+end_src

**** Counsel
#+name: init-counsel-block
#+begin_src emacs-lisp
  (use-package counsel
    :blackout t
    :straight t
    :ghook 'ivy-mode-hook
    :general
    (:keymaps
     'counsel-mode-map
     [remap dired] #'counsel-dired
     [remap execute-extended-command] #'counsel-M-x
     [remap find-file] #'counsel-find-file
     "C-x C-d"  #'counsel-dired-jump
     "C-x C-i"  #'counsel-imenu
     "C-x C-l"  #'counsel-find-library
     "C-x C-r"  #'counsel-recentf
     "C-x C-v"  #'counsel-set-variable
     "C-x C-u"  #'counsel-unicode-char
     "C-c g"    #'counsel-grep
     "C-c h"    #'counsel-command-history
     "C-c j"    #'counsel-git
     "C-c j"    #'counsel-git-grep
     "C-c r"    #'counsel-rg
     "C-c z"    #'counsel-fzf
     "C-c c w"  #'counsel-colors-web
     "C-h F"    #'counsel-describe-face
     "C-h f"    #'counsel-describe-function
     "C-h v"    #'counsel-describe-variable)
     :custom
     (counsel-find-file-at-point t)
     :config
     (use-package ivy-prescient
       :demand t
       :config (ivy-prescient-mode +1))

     (setq counsel-grep-base-command
           "rg -S --no-heading --line-number --color never '%s' %s")

     (setq counsel-fzf-cmd "fd --type f | fzf -f \"%s\"")

     (setq ivy-re-builders-alist '((swiper . ivy--regex-plus)
                                   (swiper-isearch . ivy--regex-plus)
                                   (swiper-query-replace . ivy--regex-plus)
                                   (swiper-all . ivy--regex-plus)
                                   (t . ivy-prescient-re-builder)
                                   (t . ivy--regex-ignore-order)
                                   (t . ivy--regex-fuzzy)
                                   (t . ivy--regex-plus))))
#+end_src

**** Counsel-FD
#+name: init-counsel-fd-block
#+begin_src emacs-lisp
  (use-package counsel-fd
    :disabled t
    :straight (:host github :repo "yqrashawn/counsel-fd"))
#+end_src

**** Swiper
#+name: init-swiper-block
#+begin_src emacs-lisp
  (use-package swiper
    :straight t
    :general ("C-s" #'swiper))
#+end_src

**** Ivy-Posframe
#+name: init-ivy-posframe-block
#+begin_src emacs-lisp
  (use-package ivy-posframe
    :disabled t :blackout t :straight t
    :ghook 'ivy-mode-hook
    :custom
    (ivy-posframe-style 'frame-center)
    (ivy-posframe-hide-minibuffer t)
    (ivy-posframe-display-functions-alist '((t . ivy-posframe-display)
                                            (swiper . nil)
                                            (swiper-isearch . nil)
                                            (swiper-isearch-backward . nil)
                                            (swiper-all . nil)
                                            (swiper-query-replace . nil)
                                            (swiper-isearch-toggle . nil))))
#+end_src

**** Ivy-Rich
#+name: init-ivy-rich-block
#+begin_src emacs-lisp
  (use-package ivy-rich
    :straight t
    :ghook 'ivy-mode-hook
    :custom
    (ivy-rich-parse-remote-buffer nil)
    (ivy-rich-path-style 'relative)
    :config
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))
#+end_src

**** Ivy-Xref
#+name: init-ivy-xref-block
#+begin_src emacs-lisp
  (use-package ivy-xref
    :blackout t :straight t
    :custom
    (xref-show-definitions-function #'ivy-xref-show-defs))
#+end_src

*** Documentation
**** Devdocs
#+name: init-devdocs-block
#+begin_src emacs-lisp
  (use-package devdocs
    :straight t)
#+end_src

**** Discover
#+name: init-discover-block
#+begin_src emacs-lisp
  (use-package discover
    :blackout t
    :straight t
    :hook (after-init . global-discover-mode))
#+end_src

**** Discover-My-Major
#+name: init-discover-my-major-block
#+begin_src emacs-lisp
  (use-package discover-my-major
    :straight t
    :general
    ("C-h M-m" #'discover-my-major
     "C-h RET" #'discover-my-mode))
#+end_src

**** Doxymacs
#+name: init-doxymacs-block
#+begin_src emacs-lisp
  (use-package doxymacs
    :straight (:host github :repo "pniedzielski/doxymacs"))
#+end_src

**** Eldoc [Built-In]
#+name: init-eldoc-block
#+begin_src emacs-lisp
  (use-package eldoc
    :demand t
    :blackout t
    :straight nil
    :init
    (setq eldoc-idle-delay 1.5
          eldoc-echo-area-use-multiline-p nil)
    (eldoc-mode +1))
#+end_src

**** Help [Built-In]
#+name: init-help-block
#+begin_src emacs-lisp
  (use-package help
    :straight nil
    :init
    (setq help-window-select t)
    (advice-add 'help-window-display-message :override #'ignore))
#+end_src

**** Help-Functions-Plus
#+name: init-help-fns-plus-block
#+begin_src emacs-lisp
  (use-package help-fns-plus
    :straight t
    :general ("C-h M-k" #'describe-keymap))
#+end_src

**** Helpful
#+name: init-helpful-block
#+begin_src emacs-lisp
  (use-package helpful
    :straight t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :general
    ([remap describe-function] #'helpful-callable
     [remap describe-command]  #'helpful-command
     [remap describe-variable] #'helpful-variable
     [remap describe-key]      #'helpful-key)
    :config
    (use-package elisp-demos
      :demand t
      :straight t
      :config
      (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update)))
#+end_src

**** Info-Plus
#+name: init-info-plus-block
#+begin_src emacs-lisp
  (use-package info-plus
    :straight t
    :custom
    (Info-fontify-angle-bracketed-flag nil))
#+end_src

**** Man [Built-In]
#+name: init-man-block
#+begin_src emacs-lisp
  (use-package man)
#+end_src

**** Suggest
#+name: init-suggest-block
#+begin_src emacs-lisp
  (use-package suggest
    :straight t)
#+end_src

**** Which-Key
#+name: init-which-key-block
#+begin_src emacs-lisp
  (use-package which-key
    :blackout t
    :straight t
    :ghook 'after-init-hook
    :config (setq which-key-idle-delay 0.5))
#+end_src

**** Woman [Built-In]
#+name: init-woman-block
#+begin_src emacs-lisp
  (use-package woman)
#+end_src
*** Spell Check
**** Ispell [Built-In]
#+name: init-ispell-block
#+begin_src emacs-lisp
  (use-package ispell
    :straight nil
    :preface (djm/fetch-hunspell-dictionary)
    :init (setq ispell-dictionary "en_US"
                ispell-program-name (executable-find "hunspell")
                ispell-really-hunspell t
                ispell-silently-savep t))
#+end_src

*** Editing Tools
**** Vimish Fold
#+name: init-vim-fold-block
#+begin_src emacs-lisp
  (use-package vimish-fold
    :straight t)
#+end_src

**** Multiple Cursors
#+name: init-multiple-cursors-block
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :straight t
    :general
    ("C->" #'mc/mark-next-like-this
     "C-<" #'mc/mark-previous-like-this))
#+end_src

**** Zop-To-Char
#+name: init-zop-to-char-block
#+begin_src emacs-lisp
  (use-package zop-to-char
    :straight t
    :general
    ("M-z" #'zop-to-char
     "M-Z" #'zop-up-to-char))
#+end_src

**** Align [Built-In]
#+name: init-edit-utils-block
#+begin_src emacs-lisp
  (use-package align
    :demand t :straight nil
    :general ("C-x a a" #'align-regexp))
#+end_src

**** Interactive-Align
#+name: init-interactive-align-block
#+begin_src emacs-lisp
  (use-package ialign
    :straight t)
#+end_src

**** Visual-Regexp
#+name: init-visual-regexp-block
#+begin_src emacs-lisp
  (use-package visual-regexp
    :straight t)
#+end_src

**** Visual-Regexp-Steroids
#+name: init-visual-regexp-steroids-block
#+begin_src emacs-lisp
    (use-package visual-regexp-steroids
      :straight t
      :config
      (setq vr/engine 'emacs))
#+end_src

**** Anzu
#+name: init-anzu-block
#+begin_src emacs-lisp
  (use-package anzu
    :blackout t :straight t
    :general ([remap query-replace] #'anzu-query-replace-regexp))
#+end_src

**** Deadgrep
#+name: init-deadgrep-block
#+begin_src emacs-lisp
  (use-package deadgrep
    :straight t
    :init (defalias 'rg #'deadgrep))
#+end_src

**** Expand-Region
#+name: init-expand-region-block
#+begin_src emacs-lisp
  (use-package expand-region
    :straight t
    :general ("C-=" #'er/expand-region))
#+end_src

**** String-Inflection
#+name: init-string-inflection-block
#+begin_src emacs-lisp
  (use-package string-inflection :straight t)
#+end_src

**** Crux
#+name: init-crux-block
#+begin_src emacs-lisp
    (use-package crux
      :straight t)
#+end_src

*** Minor Modes
**** EditorConfig
#+name: init-editorconfig-block
#+begin_src emacs-lisp
  (use-package editorconfig
    :blackout t :straight t
    :ghook 'after-init-hook)
#+end_src

**** Writeroom
#+name: init-writeroom-block
#+begin_src emacs-lisp
  (use-package writeroom-mode
    :blackout t :straight t
    :commands (writeroom-mode))
#+end_src

**** Whitespace-Butler
#+name: init-ws-butler-block
#+begin_src emacs-lisp
  (use-package ws-butler
    :blackout t :straight t
    :hook (after-init . ws-butler-global-mode))
#+end_src

**** Undo-Tree
#+name: init-undo-tree-block
#+begin_src emacs-lisp
  (use-package undo-tree
    :blackout t :straight t
    :hook (after-init . global-undo-tree-mode)
    :custom
    (undo-tree-save-history t)
    (undo-tree-visualizer-timestamps t)
    (undo-tree-visualizer-diff t))
#+end_src

**** Aggressive-Indent
#+name: init-aggressive-indent-block
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :blackout t :straight t
    :commands (aggressive-indent-mode))
#+end_src

**** Hungry-Delete
#+name: init-hungry-delete-block
#+begin_src emacs-lisp
  (use-package hungry-delete
    :blackout t :straight t
    :commands (hungry-delete-mode))
#+end_src

**** Smart-Hungry-Delete
#+name: init-smart-hungry-delete-block
#+begin_src emacs-lisp
  (use-package smart-hungry-delete
    :blackout t :straight t
    :commands (smart-hungry-delete-mode))
#+end_src

**** Format-All
#+name: init-format-all-block
#+begin_src emacs-lisp
  (use-package format-all
    :blackout t :straight t
    :commands (format-all-buffer format-all-mode))
#+end_src

**** SmartParens
#+name: init-smartparens-block
#+begin_src emacs-lisp
  (use-package smartparens
    :disabled t
    :blackout t :straight t
    :hook ((prog-mode eshell-mode text-mode) . smartparens-strict-mode)
    :config (show-smartparens-global-mode +1))
#+end_src

**** Prog-Mode [Built-In]
#+name: init-prog-mode-block
#+begin_src emacs-lisp
  (use-package prog-mode
    :demand t :straight nil
    :gfhook
    #'display-fill-column-indicator-mode
    #'show-paren-mode
    #'global-prettify-symbols-mode)
#+end_src

*** Navigation
**** Avy
#+name: init-nav-utils-block
#+begin_src emacs-lisp
  (use-package avy
    :straight t
    :general
    ((general-chord "jk") #'avy-pop-mark
     (general-chord "jl") #'avy-goto-line)
    :custom
    (avy-background t)
    (avy-case-fold-search nil)
    (avy-indent-line-overlay nil)
    (avy-keys '(?a ?s ?d ?e ?f ?g ?r ?v ?h ?j ?k ?l ?n ?m ?u))
    (avy-style 'pre)
    :config
    (avy-setup-default))
#+end_src

**** Ace-Window
#+name: init-ace-window-block
#+begin_src emacs-lisp
  (use-package ace-window
    :straight t
    :general ("C-x o" #'ace-window)
    :custom
    (aw-keys '(?a ?s ?d ?f ?j ?k ?l)))
#+end_src

#+name: init-ace-link-block
#+begin_src emacs-lisp
  (use-package ace-link
    :straight t
    :config
    (ace-link-setup-default))
#+end_src

**** Windower
#+name: init-windower-block
#+begin_src emacs-lisp
  (use-package windower
    :straight (:host gitlab :repo "ambrevar/emacs-windower")
    :general
    ("C-c w o" #'windower-switch-to-last-buffer
     "C-c w t" #'windower-toggle-split))
#+end_src

**** Windmove
#+name: init-windmove-block
#+begin_src emacs-lisp
  (use-package windmove
    :straight t
    :general
    ("C-c w j" #'windmove-left
     "C-c w l" #'windmove-right
     "C-c w n" #'windmove-down
     "C-c w u" #'windmove-up))
#+end_src

**** Dumb-Jump
#+name: init-dumb-jump-block
#+begin_src emacs-lisp
    (use-package dumb-jump
      :blackout t :straight t
      :ghook 'prog-mode-hook
      :custom (dumb-jump-selector 'ivy))
#+end_src

**** Dired
#+name: init-dired-block
#+begin_src emacs-lisp
  (use-package dired
    :blackout "Dired" :straight nil
    :functions (dired wdired-change-to-wdired-mode)
    :general
    (:keymaps
     'dired-mode-map
     "C-c C-e" #'wdired-change-to-wdired-mode)
    :custom
    (dired-auto-revert-buffer t)
    (dired-dwim-target t)
    (dired-use-ls-dired t)
    (dired-ls-F-marks-symlinks t)
    (dired-hide-details-hide-symlink-targets nil)
    (dired-listing-switches "-alhvF --group-directories-first --time-style iso")
    (dired-recursive-deletes 'always)
    (dired-recursive-copies 'always)
    (dired-deletion-confirmer '(lambda (x) t))) ;; Don't confirm deleting files
#+end_src

**** WDired
#+name: init-wdired-block
#+begin_src emacs-lisp
  (use-package wdired
    :straight nil)
#+end_src

**** Dired-Aux
#+name: init-dired-aux-block
#+begin_src emacs-lisp
  (use-package dired-aux
    :straight nil)
#+end_src

**** Dired-X
#+name: init-dired-x-block
#+begin_src emacs-lisp
  (use-package dired-x
    :straight nil
    :functions (dired-guess-default)
    :custom
    (dired-omit-verbose +1)
    (dired-cleanup-buffers-too t))
#+end_src

**** Diredfl
#+name: init-diredfl-block
#+begin_src emacs-lisp
  (use-package diredfl
    :blackout t :straight t
    :ghook 'dired-mode-hook)
#+end_src

**** Dired-Hacks
#+name: init-dired-hacks-block
#+begin_src emacs-lisp
  (use-package dired-hacks-utils
    :straight (:host github :repo "Fuco1/dired-hacks"))

  (use-package dired-filter
    :straight (:host github :repo "Fuco1/dired-hacks"))

  (use-package dired-rainbow
    :straight (:host github :repo "Fuco1/dired-hacks"))

  (use-package dired-narrow
    :straight (:host github :repo "Fuco1/dired-hacks"))

  (use-package dired-collapse
    :straight (:host github :repo "Fuco1/dired-hacks"))

  (use-package dired-tagsistant
    :straight (:host github :repo "Fuco1/dired-hacks"))

  (use-package dired-open
    :straight (:host github :repo "Fuco1/dired-hacks"))

  (use-package dired-list
    :straight (:host github :repo "Fuco1/dired-hacks"))

  (use-package dired-images
    :straight (:host github :repo "Fuco1/dired-hacks"))

  (use-package dired-ranger
    :straight (:host github :repo "Fuco1/dired-hacks")
    :general
    (:keymaps
     'dired-mode-map
     "C-c C-c" #'dired-ranger-copy
     "C-c C-m" #'dired-ranger-move
     "C-c C-p" #'dired-ranger-paste
     "C-c C-b" #'dired-ranger-bookmark
     "C-c b v" #'dired-ranger-bookmark-visit))

  (use-package dired-subtree
    :straight (:host github :repo "Fuco1/dired-hacks")
    :general
    (:keymaps
     'dired-mode-map
     "TAB" #'dired-subtree-insert
     ";" #'dired-subtree-remove))
#+end_src

**** Dired-Git-Info
#+name: init-dired-git-info-block
#+begin_src emacs-lisp
  (use-package dired-git-info
    :blackout t :straight t
    :general
    (:keymaps
     'dired-mode-map
     ":" #'dired-git-info-mode))
#+end_src

**** Dired-Rsync
#+name: init-dired-rsync-block
#+begin_src emacs-lisp
  (use-package dired-rsync
    :straight t
    :general
    (:keymaps
     'dired-mode-map
     "C-c C-r" #'dired-rsync))
#+end_src

**** FD-Dired
#+name: init-fd-dired-block
#+begin_src emacs-lisp
  (use-package fd-dired
    :straight (:host github :repo "yqrashawn/fd-dired"))
#+end_src

**** Dired-Sidebar
#+name: init-dired-sidebar-block
#+begin_src emacs-lisp
  (use-package dired-sidebar
    :straight t
    :general ("M-\\" #'dired-sidebar-toggle-sidebar)
    :custom
    (dired-sidebar-subtree-line-prefix "__")
    (dired-sidebar-theme 'vscode)
    (dired-sidebar-use-magit-integration t)
    (dired-sidebar-use-term-integration t)
    (dired-sidebar-use-wdired-integration t))
#+end_src

**** Direx
#+name: init-direx-block
#+begin_src emacs-lisp
  (use-package direx
    :straight (:host github :repo "m2ym/direx-el"))
#+end_src

**** Ranger
#+name: init-ranger-block
#+begin_src emacs-lisp
  (use-package ranger
    :disabled t :straight t)
#+end_src

**** iBuffer
#+name: init-ibuffer-block
#+begin_src emacs-lisp
  (use-package ibuffer
    :blackout t
    :straight t
    :general
    ([remap list-buffers] #'ibuffer)
    :custom
    (ibuffer-expert t)
    (ibuffer-formats '((mark modified
                             " " (name 25 50 :left)
                             " " (mode 25 50)
                             (filename-and-process 25 50 :right))))
    (ibuffer-never-show-predicates (list (rx (or "*magit-"
                                                 "*git-auto-push*"
                                                 "*backtrace*"
                                                 "*new*"
                                                 "*org*"
                                                 "*flycheck error messages*"
                                                 "*flycheck-posframe-buffer*"
                                                 "*help*"
                                                 "*helpful")))))
#+end_src

**** iBuffer-Extention
#+name: init-ibuf-ext-block
#+begin_src emacs-lisp
  (use-package ibuf-ext
    :straight nil
    :hook (ibuffer-mode . ibuffer-auto-mode)
    :functions (ibuffer-remove-alist
                ibuffer-remove-duplicates
                ibuffer-split-list)
    :custom (ibuffer-show-empty-filter-groups nil))
#+end_src

**** iBuffer-Projectile
#+name: init-ibuffer-projectile
#+begin_src emacs-lisp
  (use-package ibuffer-projectile
    :straight t
    :commands (ibuffer-projectile-set-filter-groups)
    :functions (ibuffer-do-sort-by-alphabetic)
    :preface
    (defun config-ibuffer--setup-buffer ()
      (ibuffer-projectile-set-filter-groups)
      (add-to-list 'ibuffer-filter-groups '("Dired" (mode . dired-mode)))
      (add-to-list 'ibuffer-filter-groups
                   '("System"
                     (predicate . (-contains? '("*straight-process*"
                                                "*direnv*"
                                                "*pyls*"
                                                "*pyls::stderr*"
                                                "*lsp-log*"
                                                "*Compile-Log*")
                                              (buffer-name)))))
      (add-to-list 'ibuffer-filter-groups '("Shells" (mode . eshell-mode)))
      (unless (eq ibuffer-sorting-mode 'alphabetic)
        (ibuffer-do-sort-by-alphabetic))
      (when (bound-and-true-p page-break-lines-mode)
        (page-break-lines--update-display-tables)))
    :init
    (add-hook 'ibuffer-hook #'config-ibuffer--setup-buffer)
    :custom
    (ibuffer-projectile-prefix ""))
#+end_src

**** iBuffer-Sidebar
#+name: init-ibuffer-sidebar
#+begin_src emacs-lisp
  (use-package ibuffer-sidebar
    :straight t
    :general ("M-]" #'ibuffer-sidebar-toggle-sidebar))
#+end_src

**** Bookmark
#+name: init-bookmark-block
#+begin_src emacs-lisp
  (use-package bookmark
    :straight nil
    :custom (bookmark-save-flag +1))
#+end_src

**** iMenu
#+name: init-imenu-block
#+begin_src emacs-lisp
  (use-package imenu-anywhere
    :straight t)
#+end_src

** Productivity
*** Org
**** Org-Mode
#+name: init-org-block
#+begin_src emacs-lisp
  (use-package org
    :blackout "𝕆" :straight nil
    :general
    ("C-c a" #'org-agenda
     "C-c c c" #'org-capture
     "C-c p" #'org-pomodoro
     "C-c s" #'org-search-view
     "C-c t" #'org-todo-list
     "C-c /" #'org-tags-view)
    :hook (org-mode . djm/config-org-mode)
    :hook (after-save . djm/tangle-init-org-file-on-save)
    :preface
    (defun djm/tangle-init-org-file-on-save ()
      (when (string= buffer-file-name
                     (file-truename "~/.emacs.d/dotemacs.org"))
        (org-babel-tangle)))

    (defun djm/config-org-mode ()
      (push '("TODO"       . ?▲)  prettify-symbols-alist)
      (push '("NEXT"       . ?→)  prettify-symbols-alist)
      (push '("DONE"       . ?✓)  prettify-symbols-alist)
      (push '("CANCELLED"  . ?✘)  prettify-symbols-alist)
      (push '("WAITING"    . ?𝌗) prettify-symbols-alist)
      (push '("QUESTION"   . ??)  prettify-symbols-alist)
      (push '("SCHEDULED"  . ?🗓) prettify-symbols-alist)
      (push '("CLOSED"     . ?🏁) prettify-symbols-alist)
      (push '("DEADLINE"   . ?❗) prettify-symbols-alist)
      (push '("CLOCK"      . ?⏰) prettify-symbols-alist)
      (setq-local line-spacing 0.1)
      (variable-pitch-mode +1)
      (visual-line-mode +1)
      (setq-local left-margin-width 2)
      (setq-local right-margin-width 2)
      (set-window-buffer nil (current-buffer)))

    :custom
    (org-catch-invisible-edits 'smart)
    (org-cycle-separator-lines 0)
    (org-default-notes-file "~/org/inbox.org")
    (org-default-priority ?B)
    (org-directory "~/org/")
    (org-enforce-todo-dependencies t)
    (org-expiry-inactive-timestamps t)
    (org-export-coding-system 'utf-8)
    (org-file-apps '((auto-mode . emacs)
                     ("\\.x?html?\\'" . "open %s")
                     ("\\.pdf\\'" . "open %s")))
    (org-fontify-done-headline t)
    (org-fontify-whole-heading-line t)
    (org-fontity-quote-and-verse-blocks t)
    (org-goto-max-level 10)
    (org-hide-emphasis-markers t)
    (org-highlight-sparse-tree-matches nil)
    (org-image-actual-width nil)
    (org-imenu-depth 4)
    (org-indirect-buffer-display 'current-window)
    (org-insert-heading-respect-content t)
    (org-lowest-priority ?C)
    (org-modules '(org-agenda org-src org-timer org-habit org-info org-tempo org-archive))
    (org-outline-path-complete-in-steps nil)
    (org-pretty-entities t)
    (org-return-follows-link t)
    (org-show-notification-handler 'message)
    (org-special-ctrl-a/e t)
    (org-special-ctrl-k t)
    (org-startup-folded 'content)
    (org-startup-with-inline-images t)
    (org-structure-template-alist '(("a" . "export ascii")
                                    ("c" . "center")
                                    ("C" . "comment")
                                    ("e" . "example")
                                    ("E" . "export")
                                    ("h" . "export html")
                                    ("l" . "export latex")
                                    ("q" . "quote")
                                    ("s" . "src")
                                    ("el" . "src emacs-lisp")
                                    ("d" . "definition")
                                    ("t" . "theorem")))
    (org-use-fast-todo-selection t)
    (org-use-speed-commands t)
    (org-yank-adjusted-subtrees t)
    :config
    (add-to-list 'org-global-properties
                 '("Effort_ALL" . "0:05 0:15 0:30 1:00 2:00 3:00 4:00")))
#+end_src

**** Org-Indent
#+name: init-org-indent-block
#+begin_src emacs-lisp
  (use-package org-indent
    :blackout t :straight nil
    :custom (org-startup-indented t))
#+end_src

**** Org-Pomodoro
#+name: init-org-pomodoro-block
#+begin_src emacs-lisp
  (use-package org-pomodoro
    :straight t)
#+end_src

**** Org-Protocol-Caputure-HTML
#+name: init-org-protocol-capture-html-block
#+begin_src emacs-lisp
  (use-package org-protocol-capture-html
    :straight (:host github :repo "alphapapa/org-protocol-capture-html")
#+end_src

**** Org-Brain
#+name: init-org-brain-block
#+begin_src emacs-lisp
  (use-package org-brain
    :straight t)
#+end_src

**** Org-Bullets
#+name: init-org-bullets-block
#+begin_src emacs-lisp
  (use-package org-bullets
    :blackout t :straight t
    :ghook 'org-mode-hook)
#+end_src

**** Org-Agenda
#+name: init-org-agenda-block
#+begin_src emacs-lisp
  (use-package org-agenda
    :straight nil
    :custom
    (org-agenda-compact-blocks t)
    (org-agenda-dim-blocked-tasks nil)
    (org-agenda-files '("~/org/inbox.org"
                        "~/org/work.org"
                        "~/org/personal.org"
                        "~/org/school.org"))
    (org-agenda-inhibit-startup t)
    (org-agenda-show-all-dates t)
    (org-agenda-show-future-repeats nil)
    (org-agenda-skip-deadline-if-done t)
    (org-agenda-skip-scheduled-if-done t)
    (org-agenda-skip-timestamp-if-done t)
    (org-agenda-start-on-weekday nil)
    (org-agenda-todo-ignore-with-date nil)
    (org-agenda-window-setup 'current-window)
    (org-log-done 'time)
    (org-log-into-drawer t)
    (org-log-state-notes-insert-after-drawers nil)
    (org-refile-allow-creating-parent-nodes 'confirm)
    (org-refile-targets '((nil :maxlevel . 9)
                          (org-agenda-files :maxlevel . 9)))
    (org-refile-use-outline-path 'file)
    (org-tag-alist '(("@errand" . ?e)
                     ("@office" . ?o)
                     ("@home" . ?h)
                     ("@school" . ?s)
                     (:newline)
                     ("WAITING" . ?w)
                     ("QUESTION" . ?Q)
                     ("HOLD" . ?H)
                     ("CANCELLED" . ?c)
                     ("REFILE" . ?r)))

    (org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                         (sequence "WAITING(w@/!)" "HOLD(h@/!)"  "QUESTION(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING")))
    :config
    (setq org-capture-templates '(("t" "todo [inbox]" entry (file "~/org/inbox.org")
                                   "* TODO %?\n%U\n" :clock-in t :clock-resume t)
                                  ("n" "note [inbox]" entry (file "~/org/inbox.org")
                                   "* %? :NOTE:\n%U\n" :clock-in t :clock-resume t)
                                  ("m" "meeting [inbox]" entry (file "~/org/inbox.org")
                                   "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
                                  ("p" "phone call [inbox]" entry (file "~/org/inbox.org")
                                   "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t))))

  (use-package org-super-agenda
    :straight t)
#+end_src

**** Org-Babel
#+name: init-org-babel-block
#+begin_src emacs-lisp
  (use-package org-babel
    :straight nil
    :general
    (:keymaps
     'org-mode-map
     "C-c v g" #'org-babel-goto-named-src-block)
    :custom
    (org-confirm-babel-evaluate nil)
    (org-src-fontify-natively t)
    (org-src-tab-acts-natively t)
    :config
    (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp  . t)
                                                             (shell . t))))
#+end_src

**** Org-Src
#+name: init-org-src-block
#+begin_src emacs-lisp
  (use-package org-src
    :straight nil
    :preface
    (defun djm/org-src-supress-final-newline ()
      (setq-local require-final-newline nil))

    (defun djm/org-src-delete-trailing-space (&rest _)
      (delete-trailing-whitespace))

    (defun djm/disable-flycheck-in-org-src-block ()
      (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
    :custom
    (org-src-window-setup 'current-window)
    :config/el-patch
    (defun org-src--construct-edit-buffer-name (org-buffer-name lang)
      (concat "[ " org-buffer-name"]"))
    (add-hook 'org-src-mode-hook #'djm/org-src-supress-final-newline)
    (add-hook 'org-src-mode-hook #'djm/disable-flycheck-in-org-src-block)
    (advice-add 'org-edit-src-exit :before #'djm/org-src-delete-trailing-space))
#+end_src

**** TOC-Org
#+name: init-toc-org-block
#+begin_src emacs-lisp
  (use-package toc-org
    :ghook 'org-mode-hook 'markdown-mode-hook)
#+end_src

*** Ledger
#+name: init-ledger-block
#+begin_src emacs-lisp
  (use-package ledger-mode
    :straight t)
#+end_src

*** Email
**** NotMuch
#+name: init-notmuch-block
#+begin_src emacs-lisp
  (use-package notmuch
    :commands (notmuch-tree
               notmuch-search
               notmuch-hello)
    :config
    (setq notmuch-search-oldest-first nil))
#+end_src

*** Calendar
#+name: init-calendar-block
#+begin_src emacs-lisp
  (use-package calendar
    :hook (calendar-today-visible . calendar-mark-today)
    :custom
    (calendar-longitude 43.492)
    (calendar-latitude -112.034)
    (calendar-location-name "Idaho Falls, Idaho")
    (calendar-holiday-marker t))
#+end_src

*** Spotify
#+name: init-spotify-block
#+begin_src emacs-lisp
  (use-package spotify
    :straight t
    :general
    (:keymaps
     'spotify-mode-map
     "C-c ." #'spotify-command-map)
    :custom
    (spotify-transport 'connect)
    (spotify-player-status-truncate-length 20)
    (spotfy-api-search-limit 50)
    :config
    (when-let ((plist (car (auth-source-search :host "spotify.api" :max 1)))
           (id (plist-get plist :user))
           (secret (funcall (plist-get plist :secret))))
      (setq spotify-oauth2-client-secret secret)
      (setq spotify-oauth2-client-id id)))
#+end_src

*** Web Browsing
#+name: init-htmlize-block
#+begin_src emacs-lisp
  (use-package htmlize
    :straight t)
#+end_src

#+name: init-web-browsing-block
#+begin_src emacs-lisp
  (use-package eww
    :straight nil)

  (use-package browse-url
    :straight nil
    :custom (browse-urls-browser-function "firefox"))
#+end_src

** Programming Support
*** Version Control
**** Smerge-Mode [Built-In]
#+name: init-smerge-mode-block
#+begin_src emacs-lisp
  (use-package smerge-mode
    :straight nil)
#+end_src

**** Transient
#+name: init-transient-block
#+begin_src emacs-lisp
  (use-package transient
    :straight t
    :config (transient-bind-q-to-quit))
#+end_src

**** Magit
#+name: init-magit-block
#+begin_src emacs-lisp
  (use-package magit
    :general ("C-x g" #'magit-status))
#+end_src

**** Git-Commit
#+name: init-git-commit-block
#+begin_src emacs-lisp
  (use-package git-commit
    :straight t :after (magit)
    :custom (git-commit-summary-max-length 50))
#+end_src

**** Git-Gutter
#+name: init-git-gutter-block
#+begin_src emacs-lisp
  (use-package git-gutter
    :blackout t
    :hook (after-init . global-git-gutter-mode))
#+end_src

**** Git-Time-Machine
#+name: init-git-timemachine-block
#+begin_src emacs-lisp
  (use-package git-timemachine
    :straight t)
#+end_src

*** Language Server Support
**** LSP-Mode
#+name: init-lsp-block
#+begin_src emacs-lisp
  (use-package lsp-mode
    :straight t
    :hook ((python-mode cc-mode) . lsp-deferred)
    :custom
    (lsp-eldoc-enable-hover t)
    (lsp-edoc-render-all nil)
    (lsp-prefer-flymake nil)
    (lsp-restart nil)
    (lsp-enable-on-type-formatting nil)
    :config
    (use-package lsp-clients
      :straight nil))

  (use-package lsp-ui
    :after (lsp-mode)
    :general
    (:keymaps
     'lsp-mode-map
     "C-c f" #'lsp-ui-sideline-apply-code-actions)
    :config
    (setq lsp-ui-sideline-show-hover nil))

  (use-package lsp-ui-doc
    :after (lsp-ui lsp-mode)
    :straight nil)
#+end_src

**** Eglot
#+name: init-eglot-block
#+begin_src emacs-lisp

#+end_src

*** Syntax & Linting
**** Flycheck
#+name: init-flycheck-block
#+begin_src emacs-lisp
  (use-package flycheck
    :blackout t :straight t
    :commands (flycheck-mode
               flycheck-list-errors
               flycheck-error-list-next-error
               flycheck-error-list-previous-error
               flycheck-error-list-goto-error)
    :hook ((after-init . global-flycheck-mode)
           (prog-mode . flycheck-mode-on-safe))
    :preface
    (autoload 'flycheck-buffer "flycheck")
    (autoload 'flycheck-error-format-message-and-id "flycheck")
    (autoload 'flycheck-get-error-list-window "flycheck")
    (autoload 'flycheck-may-use-echo-area-p "flycheck")
    (autoload 'projectile-project-p "projectile")
    (autoload 'projectile-process-current-project-buffer "projectile")

    (defun djm/flycheck-toogle-error-list ()
      "Show or hide error list."
      (interactive)
      (if-let* ((window (--first (equal flycheck-error-list-buffer
                                        (buffer-name (window-buffer it)))
                                 (window-list))))
          (delete-window window)
        (flycheck-list-errors)))

    (defun djm/flycheck-display-error-messages (errors)
      (unless (flycheck-get-error-list-window 'current-frame)
        (when (and errors (flycheck-may-use-echo-area-p))
          (let ((messages (seq #'flycheck-error-format-message-and-id errors)))
            (display-message-or-buffer (string-join messages "\n\n")
                                       flycheck-error-message-buff
                                       'display-buffer-pop-up-window)))))
    :config
    (setq flycheck-display-errors-function 'djm/flycheck-display-error-messages)
    (setq flycheck-display-errors-delay 0.1)
    (setq flycheck-buffer-switch-check-intermediate-buffers t)
    (setq flycheck-emacs-lisp-load-path 'inherit)
    (setq flycheck-global-mode '(not org-mode
                                     org-agenda-mode
                                     vterm-mode))
    (add-to-list 'flycheck-check-syntax-automatically 'idle-buffer-switch)
    (add-to-list 'display-buffer-alist
                 `(,(rx bos "*Flycheck errors*" eos)
                   (display-buffer-reuse-window
                    display-buffer-in-side-window)
                   (reusable-frames .visible)
                   (side . bottom)
                   (slot . 1)
                   (window-height . 0.2))))
#+end_src

**** Flycheck-Package
#+name: init-flycheck-package-block
#+begin_src emacs-lisp
  (use-package flycheck-package
    :disabled t
    :after (flycheck)
    :config
    (flycheck-package-setup)
    (with-eval-after-load 'flycheck
      (setf (flycheck-checker-get 'emacs-lisp-package 'predicate) #'buffer-file-name)))
#+end_src

**** Checkdoc
#+name: init-checkdoc-block
#+begin_src emacs-lisp
  (use-package checkdoc
    :straight nil
    :init
    (setq checkdoc-force-docstrings-flag nil)
    (setq checkdoc-arguments-in-order-flag nil))
#+end_src

**** Flycheck-Posframe
#+name: init-flycheck-posframe-block
#+begin_src emacs-lisp
  (use-package flycheck-posframe
    :after (flycheck)
    :if (display-graphic-p)
    :commands (flycheck-posframe-mode)
    :hook (flycheck-mode . flycheck-posframe-mode)
    :config
    (add-to-list 'flycheck-posframe-inhibit-functions
                 #'(lambda () (bound-and-true-p company-backend)))
    (set-face-attribute 'flycheck-posframe-background-face nil :inherit 'ivy-posframe :background nil)
    (flycheck-posframe-configure-pretty-defaults))
#+end_src

**** Flycheck-Pos-Tip
#+name: init-flycheck-pos-tip-block
#+begin_src emacs-lisp
  (use-package flycheck-pos-tip
    :after (flycheck)
    :if (display-graphic-p)
    :defines flycheck-pos-tip-timeout
    :hook (global-flycheck-mode . flycheck-pos-tip-mode)
    :config (setq flycheck-pos-tip-timeout 30))
#+end_src

**** Flycheck-Popup-Tip
#+name: init-flycheck-popup-tip-block
#+begin_src emacs-lisp
  (use-package flycheck-popup-tip
    :blackout t
    :straight t
    :if (display-graphic-p)
    :hook (flycheck-mode . flycheck-popup-tip-mode))
#+end_src

** Languages
*** Markdown
**** Mardown-Mode
#+name: init-markdown-block
#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode ("\\.md\\'" . markdown-mode)
    :commands (markdown-mode gfm-mode)
    :custom
    (markdown-fontify-code-blocks-natively t)
    (markdown-enable-wiki-links t)
    (mardown-indent-nenter 'indent-and-new-item)
    (markdown-asymmetric-header t))

#+end_src

**** Markdown-Mode-Plus
#+name: init-markdown-mode-plus-block
#+begin_src emacs-lisp
  (use-package markdown-mode+
    :straight (:host github :repo "milkypostman/markdown-mode-plus"))
#+end_src

*** YAML
**** YAML-Mode
#+name: init-yaml-block
#+begin_src emacs-lisp
  (use-package yaml-mode
    :mode ("\\.yaml'" "\\.yml'"))
#+end_src

*** Makefiles
**** Make-Mode [Built-In]
#+name: init-makefile-block
#+begin_src emacs-lisp
  (use-package make-mode
    :straight nil
    :blackout ((makefile-automake-mode . "Makefile")
               (makefile-gmake-mode . "Makefile")
               (makefile-makepp-mode . "Makefile")
               (makefile-bsdmake-mode . "Makefile")
               (makefile-imake-mode . "Makefile")))
#+end_src

*** LaTeX
**** AuCTeX
#+name: init-auctex-block
#+begin_src emacs-lisp

#+end_src

*** Shell
#+name: init-shell-block
#+begin_src emacs-lisp
  (add-hook 'after-save-hook #'executable-make-buffer-file-executable-if-script-p)
#+end_src

*** Elisp
**** Parinfer
#+name: init-parinfer-block
#+begin_src emacs-lisp
  (use-package parinfer)
#+end_src

**** Paredit
#+name: init-elisp-paredit-block
#+begin_src emacs-lisp
  (use-package paredit)
#+end_src
**** Elisp-Slime-Nav
#+name: init-elisp-slime-nav-block
#+begin_src emacs-lisp
  (use-package elisp-slime-nav
    :blackout t
    :hook (emacs-lisp-mode . turn-on-elisp-slime-nav-mode)
    :general
    (:keymaps 'emacs-lisp-mode-map :states 'normal
              "M-." #'emacs-slime-nav-find-elisp-thing-at-point))
#+end_src
**** F - File Manipulation
#+name: init-f-block
#+begin_src emacs-lisp
  (use-package f)
#+end_src

**** S - String Manipulation
#+name: init-s-block
#+begin_src emacs-lisp
  (use-package s)
#+end_src

**** Map
#+name: init-elisp-map-block
#+begin_src emacs-lisp
  (use-package map :demand t :straight nil)
#+end_src

**** GV
#+name: init-elisp-gv-block
#+begin_src emacs-lisp
  (use-package gv :demand t :straight nil)
#+end_src

*** R
#+name: init-R-block
#+begin_src emacs-lisp
  (use-package stan-mode
    :straight t)
#+end_src

*** Julia
#+name: init-julia-block
#+begin_src emacs-lisp
  (use-package julia-mode)
#+end_src

*** ESS
#+name: init-ess-block
#+begin_src emacs-lisp
  (use-package ess
    :hook (julia-mode . ess-mode)
    :config
    (add-to-list 'safe-local-variable-values '(outline-minor-mode))
    (add-to-list 'safe-local-variable-values '(whitespace-style
                                               face tabs spaces
                                               trailing lines space-before-tab::space
                                               newline indentation::space empty
                                               space-after-tab::space space-mark
                                               tab-mark newline-mark)))
#+end_src

*** Python
#+name: init-python-block
#+begin_src emacs-lisp
  (use-package pyenv-mode
    :config
    (defun projectile-pyenv-mode-set ()
      (let ((project (projectile-project-name)))
        (if (member project (pyenv-mode-versions))
            (pyenv-mode-set project)
          (pyenv-mode-unset))))

    (add-hook 'projectile-switch-project-hook 'projectile-pyenv-mode-set)
    (add-hook 'python-mode-hook 'pyenv-mode))

  (use-package pyenv-mode-auto
    :hook (projectile-switch-project . pyenv-mode))

  (use-package python
    :straight nil
    :hook (python-mode . config-python--init-python-mode)
    :preface
    (autoload 'python-indent-dedent-line "python")
    (autoload 'python-shell-get-process "python")

    (defun config-python--init-python-mode ()
      (setq-local comment-inline-offset 2)
      (setq-local tab-width 4)
      (when (executable-find "ipython")
        (setq-local python-shell-interpreter "ipython")
        (setq-local python-shell-interpreter-args "--simple-prompt -i")))
    :config
    (setq python-indent-guess-indent-offset nil)
    (setq python-indent-offset 4)
    (setq python-indent-guess-indent-offset-verbose nil)
    (setq python-fill-docstring-style 'django))

  (use-package anaconda-mode
    :hook ((python-mode . anaconda-mode)
           (python-mode . anaconda-eldoc-mode)))

  (use-package py-yapf
    :hook (python-mode . python-auto-format-mode)
    :preface
    (defvar python-auto-format-buffer t)

    (defun python-auto-format-maybe ()
      (when python-auto-format-buffer
        (py-yapf-buffer)))

    (define-minor-mode python-auto-format-mode
      nil nil nil nil
      (if python-auto-format-mode
          (add-hook 'before-save-hook 'python-auto-format-maybe nil t)
        (remove-hook 'before-save-hook 'python-auto-format-maybe t))))
#+end_src

*** C++
#+name: init-c++-block
#+begin_src emacs-lisp
  (defconst moose-c-style
    '("Moose C++ Programming Style."
      (c-tab-always-indent . t)
      (c-basic-offset . 2)
      (c-hanging-braces-alist . ((substatement-open before after)))
      (c-offsets-alist . ((innamespace . 0)
                          (member-init-intro . 4)
                          (statement-block-into . +)
                          (substatement-open . 0)
                          (substatement-label . 0)
                          (label . 0)
                          (statement-cont . +)
                          (case-label . +)))))


  (c-add-style "MOOSE" moose-c-style)
  (setf (map-elt c-default-style 'other) "MOOSE")

  (setq auto-mode-alist
        (append '(("\\.h$" . c++-mode)
                  ("\\.C$" . c++-mode)
                  ("\\.i$" . conf-mode)
                  ("tests" . conf-mode)
                  ("\\.cu". c++-mode))
                auto-mode-alist))

  (use-package c-mode
    :straight nil
    :config
    (c-toggle-auto-hungry-state)
    (c-toggle-auto-newline)
    (c-toggle-auto-state))
#+end_src

** Fun
*** SpeedType
#+name: init-speed-type-block
#+begin_src emacs-lisp
  (use-package speed-type
    :straight (:host github :repo "parkouss/speed-type"))
#+end_src
** Footer
#+name: init-footer-block
#+begin_src emacs-lisp
  (provide 'init)
  ;;; init.el ends here
#+end_src


-------------------------------------------------------------------
* Conclusion
-------------------------------------------------------------------
* Citations

* COMMENT Local file settings for Emacs
# Local Variables:
# time-stamp-line-limit: 2000
# time-stamp-format: "%Y-%m-%d %H:%M:%S"
# time-stamp-active: t
# time-stamp-start: "\/last updated\/:[ ]*"
# time-stamp-end: "$"
# End:
