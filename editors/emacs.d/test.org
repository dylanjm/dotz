#+title: DotEmacs with Org Mode
#+property: header-args :tangle "~/dotz/editors/emacs.d/init.el"

* About This Document
-------------------------------------------------------------------
* Early-Init
:properties:
:header-args: :tangle "~/dotz/editors/emacs.d/early-init.el"
:end:

** Header

#+name: early-init-header-block
#+begin_src emacs-lisp
;;; early-init.el --- Early initialization. -*- lexical-binding: t; buffer-read-only: t; coding: utf-8-*-
;;;
;;; Commentary:
;;; Emacs `early-init.el' config by dylanjm
;;; This file was automatically generated by `org-babel-tangle'.
;;; Do not change this file.  Main config is located in emacs.d/dotemacs.org
;;;
;;; Code:
#+end_src

** Performance Tweaks
*** Garbage Collection

#+name: early-init-gc-block
#+begin_src emacs-lisp
  (defvar default-file-name-handler-alist file-name-handler-alist)
  (defvar extended-gc-cons-threshold 400000000)
  (defvar default-gc-cons-threshold 800000)

  (setq auto-window-vscroll nil
        file-name-handler-alist nil
        frame-inhibit-implied-resize t
        frame-resize-pixelwise t
        gc-cons-percentage 0.8
        gc-cons-threshold extended-gc-cons-threshold
        inhibit-compacting-font-caches t
        initial-scratch-message ""
        inhibit-startup-echo-area-message t
        inhibit-startup-screen t
        load-prefer-newer t
        message-log-max 10000
        package-enable-at-startup nil)

  (add-hook 'after-init-hook
            (lambda ()
              (setq file-name-handler-alist default-file-name-handler-alist)
              (setq gc-cons-threshold default-gc-cons-threshold)
              (setq gc-cons-percentage 0.1)
              (setq debug-on-error nil)

              (defun djm/gc-on-lose-focus ()
                (unless (frame-focus-state)
                  (let ((inhibit-message t))
                    (save-buffer))
                  (garbage-collect)))

              (if (boundp 'after-focus-change-function)
                  (add-function :after after-focus-change-function #'djm/gc-on-lose-focus))

              (defun djm/minibuffer-setup-hook ()
                (setq gc-cons-percentage .8)
                (setq gc-cons-threshold extended-gc-cons-threshold))

              (defun djm/minibuffer-exit-hook ()
                (setq gc-cons-percentage .1)
                (setq gc-cons-threshold default-gc-cons-threshold))

              (add-hook 'minibuffer-setup-hook #'djm/minibuffer-setup-hook)
              (add-hook 'minibuffer-exit-hook #'djm/minibuffer-exit-hook)))
#+end_src

** Preliminary Configuration
*** Pre-GUI Customization

#+name: early-init-gui-block
#+begin_src emacs-lisp
  (fset 'display-startup-echo-area-message 'ignore)
  (fset 'view-hello-file 'ignore)
  (fset 'yes-or-no-p 'y-or-n-p)

  (put 'narrow-to-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
  (put 'up-case-rgion 'disabled nil)
  (put 'erase-buffer 'disabled nil)

  (blink-cursor-mode 0)

  (push '(window-divider-bottom-width . 1) initial-frame-alist)
  (push '(window-divider-right-width . 1) initial-frame-alist)
  (push '(window-divider-default-places . t) initial-frame-alist)
  (push '(right-divider-width . 1) initial-frame-alist)
  (push '(bottom-divider-width . 1) initial-frame-alist)
  (push '(width . 188) initial-frame-alist)
  (push '(height . 188) initial-frame-alist)


  (push '(ns-transparent-titlebar . t) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)
  (push '(internal-border . 0) default-frame-alist)
  (push '(ns-appearance . nil) default-frame-alist)
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(right-fringe . 5) default-frame-alist)
  (push '(left-fringe . 5) default-frame-alist)

  (push '(font . "-*-Iosevka Nerd Font Mono-ultralight-normal-ultracondensed-*-18-*-*-*-m-0-iso10646-1") default-frame-alist)
  (push '(variable-pitch . "-*-Iosevka Nerd Font-normal-normal-normal-*-18-*-*-*-m-0-iso10646-1") default-frame-alist)

  (global-set-key (kbd "C-g") 'minibuffer-keyboard-quit)
  (global-unset-key (kbd "C-z"))

  (prefer-coding-system 'utf-8-unix)
  (set-language-environment "UTF-8")
  (set-keyboard-coding-system 'utf-8)
  (set-clipboard-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-selection-coding-system 'utf-8)
  (modify-coding-system-alist 'process "*" 'utf-8)
  (set-file-name-coding-system 'utf-8)
#+end_src

*** Miscellaneous

#+name: early-init-misc-block
#+begin_src emacs-lisp

#+end_src

** Package Manager
*** Straight

#+name: early-init-straight-block
#+begin_src emacs-lisp
  (with-no-warnings
    (setq straight-cache-autoloads t)
    (setq straight-check-for-modifications 'live-with-find)
    (setq straight-repository-branch "develop")
    (setq straight-use-package-by-default t))

  (with-no-warnings
    (setq use-package-verbose t)
    (setq use-package-enable-imenu-support t))

  (eval-and-compile
    (defvar straight-recipes-gnu-elpa-use-mirror t)
    (defvar bootstrap-version 5)
    (defvar bootstrap-file (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory)))

  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
	(url-retrieve-synchronously
	 "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	 'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))

  (load bootstrap-file nil 'nomessage)
  (straight-use-package 'use-package)
#+end_src

** Environment
*** Exec Path From Shell

#+name: early-init-environment-block
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :demand t
    :init
    (setq exec-path-from-shell-check-startup-files nil)
    (setq exec-path-from-shell-variables '("PATH" "MANPATH" "CACHE_HOME" "FPATH" "PYENV_ROOT"))
    (setq exec-path-from-shell-arguments '("-l"))
    (exec-path-from-shell-initialize))
#+end_src

*** Custom Variables

#+name: custom-var-init-block
#+begin_src emacs-lisp

#+end_src

** Keeping =~/.emacs.d= Clean

#+name: no-littering-init-block
#+begin_src emacs-lisp
  (defvar djm--straight-directory (expand-file-name "straight/" user-emacs-directory))
  (defvar djm--emacs-cache (expand-file-name "emacs/" (getenv "CACHE_HOME")))
  (defvar djm--emacs-etc-cache (expand-file-name "config/" djm--emacs-cache))
  (defvar djm--emacs-var-cache (expand-file-name "data/" djm--emacs-cache))
  (defvar djm--auto-save-file-cache (expand-file-name "backups/" djm--emacs-var-cache))

  (setq no-littering-etc-directory djm--emacs-etc-cache)
  (setq no-littering-var-directory djm--emacs-var-cache)
  (setq auto-save-file-name-transforms `((".*" ,djm--auto-save-file-cache t)))
  (setq backup-directory-alist `((".*" . ,djm--auto-save-file-cache)))
  (setq recentf-exclude '(djm--emacs-cache djm--straight-directory "/private/var*"))
  (setq custom-file (expand-file-name djm--emacs-etc-cache "custom.el"))

  (use-package no-littering :demand t :straight t)
#+end_src

** Required Packages

#+name: early-init-req-packages-block
#+begin_src emacs-lisp
  (use-package use-package-ensure-system-package)
  (use-package use-package-chords)
  (use-package use-package-hydra)
  (use-package el-patch)
  (use-package bind-key)
  (use-package general)
  (use-package dash)
  (use-package f)
  (use-package s)
  (use-package hydra)

  (use-package map :straight nil)
  (use-package org :straight t :defer t) ;load this early to avoid the built-in version
#+end_src

** Footer

#+name: early-init-footer-block
#+begin_src emacs-lisp
  (provide 'early-init)
  ;;; early-init.el ends here
#+end_src

-------------------------------------------------------------------

* Init
** Header

#+name: init-header-block
#+begin_src emacs-lisp
;;; init.el --- Emacs main configuration file -*- lexical-binding: t; buffer-read-only: t; coding: utf-8-*-
;;;
;;; Commentary:
;;; Emacs `init.el' config by dylanjm.
;;; This file was automatically generated by `org-babel-tangle'.
;;; Do not change this file.  Main config is located in emacs.d/dotemacs.org
;;;
;;; Code:
#+end_src

** General User Settings & Tools

#+name: init-settings-block
#+begin_src emacs-lisp
    (use-package cus-start
      :straight nil
      :custom
      (ad-redefinition-action 'accept)
      (cursor-in-non-selected-windows nil)
      (cursor-type 'bar)
      (display-time-default-load-average nil)
      (echo-keystrokes 0.02)
      (fill-column 80)
      (ffap-machine-p-known 'reject)
      (frame-title-format '("%b - Emacs"))
      (icon-title-format frame-title-format)
      (indent-tabs-mode nil)
      (mode-line-in-non-selected-windows nil)
      (mouse-wheel-progressive-speed nil)
      (mouse-wheel-scroll-amount '(1))
      (ring-bell-function #'ignore)
      (select-enable-clipboard t)
      (scroll-conservatively most-positive-fixnum)
      (scroll-margin 5)
      (scroll-preserve-screen-position t)
      (scroll-step 1)
      (sentence-end-double-space nil)
      (tab-always-indent 'complete)
      (tab-width 4)
      (use-dialog-box nil)
      (use-file-dialog nil)
      (uniquify-buffer-name-style 'post-forward-angle-brackets)
      (vc-follow-symlinks t)
      (window-combination-resize t))
#+end_src

** Theme & Aesthetics
*** Themes
**** Doom-Themes
#+name: init-doom-themes-block
#+begin_src emacs-lisp
  (use-package doom-themes
    :demand t
    :config
    (setq doom-gruvbox-brighter-comments t
          doom-themes-enable-italic t
          doom-themes-enable-bold t)
    (load-theme 'doom-gruvbox t)
    (doom-themes-org-config))
#+end_src

**** Emacs 27 Keyword Fix

#+name: init-keyword-fix-block
#+begin_src emacs-lisp
  ;; emacs 27 added new `:extend' keyword which breaks most themes
  (if (boundp 'hl-line)
      (set-face-attribute hl-line nil :extend t))

  (dolist (face '(region secondary-selection))
    (set-face-attribute face nil :extend t))

  (with-eval-after-load 'org
    (dolist (face '(org-block
                    org-block-begin-line
                    org-block-end-line
                    org-level-1
                    org-quote))
      (set-face-attribute face nil :extend t)))

  (with-eval-after-load 'magit
    (dolist (face '(magit-diff-hunk-heading
                    magit-diff-hunk-heading-highlight
                    magit-diff-hunk-heading-selection
                    magit-diff-hunk-region
                    magit-diff-lines-heading
                    magit-diff-lines-boundary
                    magit-diff-conflict-heading
                    magit-diff-added
                    magit-diff-removed
                    magit-diff-our
                    magit-diff-base
                    magit-diff-their
                    magit-diff-context
                    magit-diff-added-highlight
                    magit-diff-removed-highlight
                    magit-diff-our-highlight
                    magit-diff-base-highlight
                    magit-diff-their-highlight
                    magit-diff-context-highlight
                    magit-diff-whitespace-warning
                    magit-diffstat-added
                    magit-diffstat-removed
                    magit-section-heading
                    magit-section-heading-selection
                    magit-section-highlight
                    magit-section-secondary-heading
                    magit-diff-file-heading
                    magit-diff-file-heading-highlight
                    magit-diff-file-heading-selection))
      (set-face-attribute face nil :extend t)))
#+end_src

*** Modelines
**** Minions

#+name: init-minions-block
#+begin_src emacs-lisp
  (use-package minions
    :defer 0.5
    :custom
    (minions-mode-line-lighter "...")
    (minions-mode-line-delimiters '("" . ""))
    :config (minions-mode 1))
#+end_src

*** Aesthetics
**** Tab-Line

#+name: init-tab-line-block
#+begin_src emacs-lisp
  (use-package tab-line
    :disabled t
    :straight nil
    :custom
    (tab-line-new-tab-choice nil)
    (tab-line-separator nil)
    (tab-line-close-button-show nil)
    :init (global-tab-line-mode))
#+end_src

**** Page Break Lines

#+name: init-page-break-lines-block
#+begin_src emacs-lisp
  (use-package page-break-lines
    :defer 1.0
    :config
    (setq page-break-lines-modes '(prog-mode
                                   ibuffer-mode
                                   text-mode
                                   compilation-mode
                                   help-mode
                                   org-agenda-mode))
      (global-page-break-lines-mode))
#+end_src

**** Posframe

#+name: init-posframe-block
#+begin_src emacs-lisp
  (use-package posframe
    :defer 1.0
    :custom
    (posframe-arghandler #'hemacs-posframe-arghandler)
    :config
    (defun hemacs-posframe-arghandler (posframe-buffer arg-name value)
      (let ((info '(:internal-border-width 10 :min-width 90)))
        (or (plist-get info arg-name) value))))
#+end_src

** Editing
** Navigation
** Productivity
** Language Support
** Footer
-------------------------------------------------------------------
* Conclusion
* Citations
