#+title: Arco Emacs
#+author: Dylan McDowell
#+property: header-args :tangle "~/teton/config/emacs/init.el"

[[file:https://img.shields.io/badge/GNU%20Emacs-28.0.50-b48ead.svg]]

/last updated/: 2021-02-02 15:56:21

* Table of Contents :TOC@2:noexport:
- [[#about][About]]
- [[#early-init][Early-Init]]
    - [[#garbage-collection][Garbage Collection]]
    - [[#pre-gui-optimization][Pre-Gui Optimization]]
- [[#init][Init]]
    - [[#package-management][Package Management]]
    - [[#initial-demands][Initial Demands]]
    - [[#personal-configuration][Personal Configuration]]
    - [[#built-in-packages][Built-In Packages]]
    - [[#user-files][User Files]]
    - [[#themes--aesthetics][Themes & Aesthetics]]
    - [[#system][System]]
    - [[#frameworks][Frameworks]]
    - [[#autocompletion][Autocompletion]]
    - [[#documentation][Documentation]]
    - [[#editing-tools][Editing Tools]]
    - [[#minor-modes][Minor Modes]]
    - [[#navigation][Navigation]]
    - [[#org][Org]]
    - [[#media][Media]]
    - [[#version-control][Version Control]]
    - [[#language-server-protocol][Language Server Protocol]]
    - [[#syntax--linting][Syntax & Linting]]
    - [[#languages][Languages]]
    - [[#miscellaneous][Miscellaneous]]
- [[#citations][Citations]]

* About

This document is my current emacs config which contains the code for my =early-init.el= file and =init.el= file. You may be wondering how one file can contain code for two different configuration files. Through the power of =org-babel-tangle=, I am able to configure and document my entire emacs experience in a single Org file. There are several reasons to organize one's configuration this way. I hope these reasons become obvious as you browse through, but personally I find it much easier to document my choices using a markup language. This way I can store links and reference back to forum threads and other places when updating. I can also include pictures throughout and organize code-blocks with specific names to make navigation quick and painless. If you're interested in creating a similar setup, take a look at the raw-version of this file. There is important information contained in the header and throughout the file to make this work. Once you have a proper the proper settings, start adding src-blocks and then run =M-x org-babel-tangle <RET>=. Your config files will then be generated and Emacs will use those files when starting up. I have also written a hook that tangles this file everytime I save.

* Early-Init
:properties:
:header-args: :tangle "~/teton/config/emacs/early-init.el"
:end:
#+name: early-init-header-block
#+begin_src emacs-lisp :exports none
;;; early-init.el --- Arco Emacs Early Initialization. -*- lexical-binding: t; buffer-read-only: t -*-
;;;
;;; Commentary:
;;; Emacs `early-init.el' config by dylanjm for Arco Emacs
;;; This file was automatically generated by `org-babel-tangle'.
;;; Do not change this file.  Main config is located in emacs.d/dotemacs.org
;;;
;;; Code:
#+end_src

** Garbage Collection

You'll see this modification in many config files around the internet. The idea is that emacs sets it's memory
threshold 40 years in the past. This causes the garbage collector to run frequently and can cause delays or
muck up the speed of your setup. We pretty much disable garbage collection during the initial phase to improve
our startup time. After we have given enough time for everything to load we then set the gc-theshold to a
reasonable number. Sometimes people set the threshold back to its default value, but I keep it a little higher
to handle things like fuzzy completion and language-server requirements.

#+name: early-init-gc-block
#+begin_src emacs-lisp
(defvar default-file-name-handler-alist file-name-handler-alist)
(defvar extended-gc-cons-threshold most-positive-fixnum)
(defvar default-gc-cons-threshold (* 100 1024 1024))

;; Native Compilation Vars
;; (setq comp-speed 3
;;       comp-deferred-compilation t)

(setq-default auto-window-vscroll nil
              bidi-display-reordering 'left-to-right
              bidi-paragraph-direction 'left-to-right
              frame-inhibit-implied-resize t
              inhibit-default-init t
              site-run-file nil
              load-prefer-newer t
              read-process-output-max (* 1024 1024 3))

(setq file-name-handler-alist nil
      package-enable-at-startup nil
      gc-cons-threshold extended-gc-cons-threshold)

(defun arco/return-gc-to-default ()
  (setq-default gc-cons-threshold default-gc-cons-threshold
                load-prefer-newer nil))

(defun arco/reset-file-handler-alist-h ()
  (dolist (handler file-name-handler-alist)
    (add-to-list 'default-file-name-handler-alist handler))
  (setq file-name-handler-alist default-file-name-handler-alist))

(add-hook 'after-init-hook #'arco/reset-file-handler-alist-h)
(add-hook 'after-init-hook #'arco/return-gc-to-default)
(advice-add #'package--ensure-init-file :override #'ignore)
#+end_src

** Pre-Gui Optimization

Ever since Emacs 27.0 we can utilize the early-init file to setup a few graphical settings without seeing a
major slow down. The biggest speed ups I've seen from this is setting =vertical-scroll-bars= , =ns-appearance=,
and =ns-transparent-titlebar=. I also set the font during this time and handle a few other graphical settings.

#+name: early-init-pre-gui-block
#+begin_src emacs-lisp
;; Some nice UI tweaks that improve performance when specified
;; in early-init.el
(modify-all-frames-parameters '((width . 80)
                                (height . 50)
                                (left . 0)
                                (right . 0)
                                (internal-border-width . 1)
                                (vertical-scroll-bars . nil)
                                (tool-bar-lines . 0)
                                (ns-appearance . dark)
                                (font . "Iosevka-14")))

;; Not sure if I really need this on macOS
(advice-add 'x-apply-session-resources :override 'ignore)

;; Not sure if this is really needed anymore
(when (fboundp 'set-charset-priority)
  (set-charset-priority 'unicode))
(prefer-coding-system 'utf-8)
#+end_src


#+name: early-init-footer-block
#+begin_src emacs-lisp :exports none
(provide 'early-init)
;;; early-init.el ends here
#+end_src

* Init
#+name: init-header-block
#+begin_src emacs-lisp :exports none
;;; init.el --- Arco Emacs main configuration file -*- lexical-binding: t; buffer-read-only: t -*-
;;;
;;; Commentary:
;;; Emacs `init.el' config by dylanjm for Arco Emacs.
;;; This file was automatically generated by `org-babel-tangle'.
;;; Do not change this file.  Main config is located in emacs.d/dotemacs.org
;;;
;;; Code:
#+end_src

** Package Management
*** [[https://github.com/raxod502/straight.el][Straight]]

=Straight.el= is my package manager of choice. It is extremely powerful in its' design and ensures you have a
functional Emacs config. There are a few peculiar things about this package, but overall I prefer this setup
much more to anything I've tried.

#+name: early-init-straight-block
#+begin_src emacs-lisp
(setq-default straight-repository-branch "develop"
              straight-fix-org t
              straight-fix-flycheck t
              straight-use-package-by-default t
              straight-check-for-modifications '(check-on-save find-when-checking))

(defvar bootstrap-version)
(let ((bootstrap-file
	   (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	  (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
	    (url-retrieve-synchronously
	     "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	     'silent 'inhibit-cookies)
	  (goto-char (point-max))
	  (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

*** [[https://github.com/jwiegley/use-package][Use-Package]]

Use-Package is nearly ubiquitous in an Emacs config these days.

#+name: init-block-use-package-block
#+begin_src emacs-lisp
(setq-default use-package-verbose nil
              use-package-always-defer t
              use-package-compute-statistics nil
              use-package-expand-minimally t
              use-package-enable-imenu-support nil)
(straight-use-package 'use-package)
#+end_src

** Initial Demands

This section is for packages I need immediately upon launching emacs. My goal is to slim this section down a lot to try to further improve startup-times.

*** [[https://github.com/purcell/exec-path-from-shell][Exec-Path-From-Shell]]

Application launching on MacOS isn't handled by a specific system. This makes it really hard to get
envrionment variables from your shell to show up in Emacs. This package makes that easier.

#+name: init-exec-path-from-shell-block
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :demand t
  :straight t
  :if (eq system-type 'darwin)
  :init
  (setq exec-path-from-shell-variables '("XDG_CONFIG_HOME"
                                         "XDG_CACHE_HOME"
                                         "XDG_DATA_HOME"
                                         "XDG_BIN_HOME"
                                         "DOTFILES"
                                         "ORG_FILES"
                                         "EDITOR"
                                         "EMACS"
                                         "HISTFILE"
                                         "MOOSE_DIR"
                                         "HIST_IGNORE"
                                         "HISTSIZE"
                                         "SAVEHIST"
                                         "ATOM_HOME"
                                         "CCACHE_DIR"
                                         "CONDARC"
                                         "CONDA_ENVS_PATH"
                                         "EA_PATH"
                                         "FZF_DEFAULT_COMMAND"
                                         "GPG_TTY" "GNUPGHOME"
                                         "SSH_AUTH_SOCK"
                                         "GOKU_EDN_CONFIG_FILE"
                                         "GUILE_AUTO_COMPILE"
                                         "GUILE_HISTORY"
                                         "JAVA_HOME"
                                         "TREE_SITTER_DIR"
                                         "ZSH"
                                         "PYGMENTIZE_STYLE"
                                         "PYLINTHOME"
                                         "PYENV_ROOT"
                                         "IPYTHONDIR"
                                         "PYTHONSTARTUP"
                                         "MPLCONFIGDIR"
                                         "MYPY_CACHE_DIR"
                                         "CARGO_HOME"
                                         "TERMINFO"
                                         "WEECHAT_HOME"
                                         "PATH"
                                         "MANPATH"
                                         "FPATH")
        exec-path-from-shell-arguments '("-l"))
  :config
  (exec-path-from-shell-initialize))
#+end_src

*** [[https://github.com/emacscollective/no-littering][No-Littering]]

#+name: init-no-littering-block
#+begin_src emacs-lisp
(use-package no-littering
  :demand t
  :straight t
  :init
  (setq no-littering-etc-directory (expand-file-name "~/.local/share/emacs/")
        no-littering-var-directory (expand-file-name "~/.cache/emacs/"))
  (defalias 'nl-var-expand #'no-littering-expand-var-file-name)
  (defalias 'nl-etc-expand #'no-littering-expand-etc-file-name))
#+end_src

*** [[https://gitlab.com/jjzmajic/compdef][Compdef]]
#+name: init-compdef-block
#+begin_src emacs-lisp
(use-package compdef
  :demand t
  :straight (:host gitlab :repo "jjzmajic/compdef"))
#+end_src

*** [[https://github.com/raxod502/el-patch][El-Patch]]

Great package by the same author of Straight.el. It's similar to adding advice to functions but with a twist.
Helpful if you need to future proof your emacs or need to alter a function from a package.

#+name: init-el-patch-block
#+begin_src emacs-lisp
(use-package el-patch
  :demand t
  :straight t)
#+end_src

*** [[https://github.com/noctuid/general.el][General]]

Great package for managing key-bindings and other customizations.

#+name: init-general-block
#+begin_src emacs-lisp
(use-package general
  :demand t
  :straight t)
#+end_src

*** [[https://github.com/raxod502/blackout][Blackout]]

Similar to packages like =minions=, =diminish=, or =delight=. You can alter how your minor and major modes show up
in the mode-line.

#+name: init-blackout-block
#+begin_src emacs-lisp
(use-package blackout
  :demand t
  :straight (:host github :repo "raxod502/blackout"))
#+end_src

*** [[https://github.com/rejeep/f.el][Emacs-Lisp Libraries]]

Great Elisp library used throughout my config

#+name: init-emacs-lisp-libraries-block
#+begin_src emacs-lisp
(use-package dash
  :demand t
  :straight t)

(use-package dash-functional
  :demand t
  :straight t)

(use-package f
  :demand t
  :straight t)

(use-package s
  :demand t
  :straight t)

(use-package cl-lib
  :demand t
  :straight (:type built-in))
#+end_src

*** [[https://orgmode.org/worg/org-contrib/][Org-Plus-Contrib]]

We need to intercept the built-in org-version that ships with emacs. For some reason we have to do this early.
I'm not really sure why though.

#+name: init-org-plus-contrib-block
#+begin_src emacs-lisp
(straight-use-package '(org :host github :repo "emacs-straight/org-mode" :local-repo "org"))
#+end_src

** Personal Configuration
*** Variables

#+name: init-variables-block
#+begin_src emacs-lisp
;; Emacs Specific
(defvar arco--lisp-dir             (f-join user-emacs-directory "lisp/"))
(defvar arco--yasnippet-dir        (f-join user-emacs-directory "snippets/"))
(defvar arco--user-custom-file     (nl-etc-expand "custom.el"))
(defvar arco--user-secret-file     (nl-etc-expand "secret.el"))
(defvar arco--auto-save-file-cache (nl-var-expand "backups/"))

;; Org-Mode
(defvar arco--org-dir          (getenv "ORG_FILES"))
(defvar arco--org-archives     (f-join arco--org-dir "archive.org::"))
(defvar arco--org-agenda-files (--map `(f-join ,arco--org-dir it) '("inbox.org" "projects.org")))

;; Python
(defvar arco--flake8rc    (f-join (getenv "XDG_CONFIG_HOME") "flake8"))
(defvar arco--pylintrc    (f-join (getenv "XDG_CONFIG_HOME") "pylintrc"))
(defvar arco--mypy-config (f-join (getenv "XDG_CONFIG_HOME") "mypy" "config"))

;; Constants
(defconst IS-EMACS28+ (> emacs-major-version 27))
(defconst IS-MAC      (eq system-type 'darwin))
#+end_src

*** Functions
**** Active-Intervals

This function is a great way to conditional run functions at different intervals. For example, take a look at
my =recentf= config. Code taken from [[https://github.com/noctuid/dotfiles/blob/master/emacs/.emacs.d/awaken.org][noctuid dotfiles.]]

#+name: init-active-interval-block
#+begin_src emacs-lisp
(defmacro arco/run-at-active-interval (interval idle-interval &rest body)
  "Every INTERVAL seconds, unless idle for > IDLE-INTERVAL seconds, run BODY.
Also, after IDLE-INTERVAL seconds of idle time, run BODY. This allows using an
idle timer to quickly run BODY when Emacs becomes idle but also ensures that
BODY is run periodically even if Emacs is actively being used."
  (declare (indent 2))
  `(progn
     (run-at-time (current-time) ,interval
                  (lambda ()
                    (let* ((idle-time (current-idle-time))
                           (idle-secs (when idle-time
                                        (float-time idle-time))))
                      (unless (and idle-secs
                                   (> idle-secs ,idle-interval))
                        ,@body))))
     (run-with-idle-timer ,idle-interval t (lambda () ,@body))))
#+end_src

**** Screen-Capture

A quick work around function to easily snap screenshots of lecture videos while taking notes. Use the prefix
command =C-u M-x emacs-screen-capture RET= to insert it automatically as an org link.

#+name: init-screen-capture-block
#+begin_src emacs-lisp
(defun emacs-screen-capture (arg &optional name dir format)
  (interactive "P")
  (let* ((format (completing-read "Screenshot Format: "
                                  '(".png" ".pdf" ".jpg" ".tiff" ".svg")))
         (name (or name (read-string "Name of Screenshot: " nil)))
         (dir (or dir (read-directory-name (format "Save %s%s to: " name format))))
         (fp (concat dir name format))
         (abb-fp (concat "file:" (file-relative-name fp))))
    (set-process-sentinel
     (start-process-shell-command
      "imagecapture" nil (format "screencapture -i %s" fp))
     `(lambda (process msg)
        (when (memq (process-status process) '(exit signal))
          (message (concat (process-name process) " - " msg))
          (when (equal #',current-prefix-arg '(4))
            (org-insert-link nil ,abb-fp nil)))))))
#+end_src

**** Protect Buffers

There are certain buffers I don't want to delete on accident. Code taken from [[https://github.com/rememberYou/.emacs.d/blob/master/config.org][rememberYou dotfiles.]]

#+name: init-protected-buffers-func-block
#+begin_src emacs-lisp
(defvar *protected-buffers* '("*scratch*" "*Messages*"))

(defun arco/protected-buffers ()
  "Protects some buffers from being killed."
  (dolist (buffer *protected-buffers*)
    (if (get-buffer buffer)
        (with-current-buffer buffer
          (emacs-lock-mode 'kill))
      (get-buffer-create buffer)
      (with-current-buffer buffer
        (emacs-lock-mode 'kill)))))

(general-add-hook 'emacs-startup-hook #'arco/protected-buffers)
#+end_src

**** Eval-Print-Last-Sexp

#+name: init-eval-print-last-sexp-block
#+begin_src emacs-lisp
(el-patch-defun eval-print-last-sexp (&optional eval-last-sexp-arg-internal)
  "Evaluate sexp before point; print value into current buffer.

Normally, this function truncates long output according to the value
of the variables `eval-expression-print-length' and
`eval-expression-print-level'.  With a prefix argument of zero,
however, there is no such truncation.  Such a prefix argument
also causes integers to be printed in several additional formats
\(octal, hexadecimal, and character).

If `eval-expression-debug-on-error' is non-nil, which is the default,
this command arranges for all errors to enter the debugger.

[El-Patch] Adds a ';; ' before printing the output to the buffer."
  (interactive "P")
  (let ((standard-output (current-buffer)))
    (terpri)
    (el-patch-add (insert ";; "))
    (eval-last-sexp (or eval-last-sexp-arg-internal t))
    (terpri)))
#+end_src

**** Eval-To-Kill-Ring
#+name: init-eval-to-kill-ring-block
#+begin_src emacs-lisp
(defun arco/eval-to-kill-ring ()
  (interactive)
  (kill-new (with-output-to-string
              (princ (call-interactively 'eval-expression)))))
#+end_src

**** Async Tangle

This saves me tons of time tangling this config file. Code taken from [[https://github.com/rememberYou/.emacs.d/blob/master/config.org][rememberYou dotfiles.]]

#+name: init-async-tangle-func-block
#+begin_src emacs-lisp
(defvar *config-file* (f-join user-emacs-directory "dotemacs.org")
  "The Configuration File.")

(defvar *config-last-change* (nth 5 (file-attributes *config-file*))
  "Last modification time of the configuration file.")

(defvar *show-async-tangle-results* nil
  "Keeps *emacs* async buffers arround for later inspection.")

(defun arco/config-updated ()
  "Checks if the configuration file has been updated since the last time."
  (time-less-p *config-last-change*
               (nth 5 (file-attributes *config-file*))))

(defun arco/async-babel-tangle (org-file)
  "Tangles org-file async"
  (let ((init-tangle-start-time (current-time))
        (file (buffer-file-name))
        (async-quiet-switch "-q"))
    (async-start
     `(lambda ()
        (require 'org)
        (org-babel-tangle-file ,org-file))
     (unless *show-async-tangle-results*
       `(lambda (result)
          (if result
              (message "SUCCESS: %s successfully tangled (%.2fs)."
                       ,org-file
                       (float-time (time-subtract (current-time)
                                                  ',init-tangle-start-time)))
            (message "ERROR: %s as tangle failed." ,org-file)))))))

(defun arco/config-tangle ()
  "Tangle the org file asynchronously."
  (when (arco/config-updated)
    (setq *config-last-change*
          (nth 5 (file-attributes *config-file*)))
    (arco/async-babel-tangle *config-file*)))
#+end_src

**** Temp Buffers

Sometimes I need a different scratch buffer to do some work on.

#+name: init-temp-buffers-block
#+begin_src emacs-lisp
(defun arco/new-scratch ()
  "open up a guaranteed new scratch buffer"
  (interactive)
  (switch-to-buffer (cl-loop for num from 0
                             for name = (format "scratch-%03i" num)
                             while (get-buffer name)
                             finally return name)))
#+end_src

**** Font-Config

Fonts are a pain in the *ASS* in Emacs for some reason. I'm still working on setting this up perfectly but I do
set up Apple-Emoji Support.

#+name: init-font-config-block
#+begin_src emacs-lisp
(defconst arco/default-font "Iosevka")
(defconst arco/font-params "autohint=false:hintstyle=hintslight:embeddedbitmap=false")
(defconst arco/variable-pitch-font "Iosevka Sparkle")

(defun arco/set-face-attribute-font (family size)
  "Set `default' face font to FAMILY at SIZE."
  (set-face-attribute
   'default nil
   :font (concat family "-" (number-to-string size) ":" arco/font-params)))

(defun setup-main-fonts (frame)
  "Determine font-size based on FRAME."
  (select-frame frame)
  (when (display-graphic-p frame)
    (when window-system
      (if (> (x-display-pixel-width) 2000)
          (arco/set-face-attribute-font arco/default-font 14)
        (arco/set-face-attribute-font arco/default-font 12)))))

(defun configure-fonts (frame)
  "Set up fonts for FRAME.
Set the default font, and configure various overrides for
symbols, emojis, greek letters, as well as fall backs for."
  ;; Additional fonts for special characters and fallbacks
  ;; Test range: 🐷 ❤ ⊄ ∫ 𝛼 α 🜚 Ⓚ
  ;; ()[]{}<>«»‹›
  ;; 6bB8&0ODdo
  ;; 1tiIlL|
  ;; !ij
  ;; 5$Ss
  ;; 7Zz
  ;; gqp
  ;; nmMN
  ;; uvvwWuuw
  ;; x×X
  ;; .,·°;:¡!¿?
  ;; :;
  ;; `'
  ;; ‘’
  ;; ''"
  ;; '
  ;; "
  ;; “”
  ;; —-~≈=_.…
  ;; Sample character set
  ;; Check for monospacing and Greek glyphs
  ;; ABCDEFGHIJKLMNOPQRSTUVWXYZ
  ;; abcdefghijklmnopqrstuvwxyz
  ;; 1234567890#%^*
  ;; ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ
  ;; αβγδεζηθικλμνξοπρστυφχψω
  (set-face-attribute 'variable-pitch nil :family arco/variable-pitch-font :height 1.0)
  (set-face-attribute 'fixed-pitch nil :family arco/default-font :height 1.0)
  ;; Define a fontset stack for symbols, greek and math characters
  (dolist (script '(mathematical symbol greek))
    (set-fontset-font t script (font-spec :family "Symbola") nil 'prepend)
    (set-fontset-font t script (font-spec :family "XITS Math" nil 'prepend)))
  ;; Colored Emoji on OS X, prefer over everything else!
  (dolist (script '(unicode unicode-bmp unicode-sip unicode-smp unicode-ssp))
    (set-fontset-font t script (font-spec :family "Apple Color Emoji") nil 'prepend))
  ;; Apple Symbols for everything else
  (set-fontset-font t nil (font-spec :family "Apple Symbols") nil 'append))
#+end_src

**** Clean-Up-Yanked-Text

Sourced from [[https://github.com/chrisbarrett/.emacs.d/blob/master/config/config-basic-settings.el][chrisbarret]].

#+name: init-yank-ws-cleanup-block
#+begin_src emacs-lisp
(defun arco/display-ansi-codes (buf &rest _)
  (and (bufferp buf)
       (string= (buffer-name buf) "*Shell Command Output*")
       (with-current-buffer buf
         (ansi-color-apply-on-region (point-min) (point-max)))))

(general-add-advice #'display-message-or-buffer :before #'arco/display-ansi-codes)

(defun arco/cleanup-completions-buffer ()
  (when-let* ((buf (get-buffer "*Completions*")))
    (kill-buffer buf)))

(general-add-hook 'minibuffer-exit-hook #'arco/cleanup-completions-buffer)
#+end_src

**** Clipboard-Integration

Better clipboard integration for non-gui emacs. Code taken from [[https://github.com/raxod502/radian/blob/develop/emacs/radian.el][radian.el]].

#+name: init-clipboard-integration-block
#+begin_src emacs-lisp
(unless (display-graphic-p)
  (defvar clipboard-last-copy nil)

  (eval-and-compile
    (defun arco/clipboard-paste ()
      (let* ((default-directory "/")
             (text (shell-command-to-string "pbpaste")))
        (unless (string= text clipboard-last-copy)
          text)))

    (defun arco/clipboard-copy (text)
      (let* ((default-directory "/")
             (process-connection-type nil)
             (proc (start-process "pbcopy" nil "pbcopy")))
        (process-send-string proc text)
        (process-send-eof proc))
      (setq clipboard-last-copy text)))

  (general-setq interprogram-paste-function #'arco/clipboard-paste)
  (general-setq interprogram-cut-function #'arco/clipboard-copy))
#+end_src

*** Hooks, Macros & Advice

This just changes the time-stamp at the top of my config. It's super annoying to try and find up-to-date
config files online and always hard to tell just by commit times. I want people to see exactly when this file
was last updated.

#+name: init-personal-hooks-block
#+begin_src emacs-lisp
(general-add-hook 'write-file-functions 'time-stamp)
#+end_src

#+name: init-misc-settings-block
#+begin_src emacs-lisp
(mapc #'(lambda (c) (set-char-table-range auto-fill-chars c t)) "!-=+]};:'\",.?")
#+end_src

*** Keybindings & Aliases

#+name: init-personal-keybindings-block
#+begin_src emacs-lisp
(general-define-key
 "C-z" nil
 "s-m" nil)
#+end_src

#+name: init-aliases-block
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
(fset 'display-startup-echo-area-message 'ignore)
(fset 'view-hello-file 'ignore)
(fset 'custom-safe-themes 't)
#+end_src

** Built-In Packages
*** Abbrev (Built-In)
#+name: init-abbrev-block
#+begin_src emacs-lisp
(use-package abbrev
  :blackout t
  :straight (:type built-in)
  :ghook 'emacs-startup-hook
  :init
  (general-setq abbrev-file-name (nl-var-expand "abbrevs")
                only-global-abbrevs nil))
#+end_src

*** Advice (Built-In)

Ignore those warnings from the old advice system.

#+name: init-advice-block
#+begin_src emacs-lisp
(use-package advice
  :straight (:type built-in)
  :init
  (general-setq ad-redefinition-action 'accept))
#+end_src

*** Ansi-Color (Built-In)

Here we can setup proper coloring for compile buffers.

#+name: init-ansi-color-block
#+begin_src emacs-lisp
(use-package ansi-color
  :straight (:type built-in)
  :ghook ('compilation-filter-hook #'compilation-ansi-color-process-output)
  :functions (ansi-color-apply-on-region)
  :preface
  (defun compilation-ansi-color-process-output ()
    (ansi-color-process-output nil)
    (set (make-local-variable 'comint-last-output-start)
         (point-marker)))
  :init
  (general-setq ansi-color-for-comint-mode t))
#+end_src

*** Auth-Source (Built-In)
#+name: init-auth-source-block
#+begin_src emacs-lisp
(use-package auth-source
  :straight (:type built-in)
  :config
  (general-setq auth-sources `(,(nl-etc-expand "authinfo.gpg")
                               ,(nl-etc-expand "authinfo")
                               :macos-keychain-internet
                               :macos-keychain-generic)
                auth-source-do-cache t))
#+end_src

*** Auto-Insert (Built-In)
#+name: init-auto-insert-block
#+begin_src emacs-lisp
(use-package autoinsert
  :straight (:type built-in)
  :commands (auto-insert)
  :ghook ('emacs-startup-hook #'auto-insert-mode)
  :preface
  (defun arco/autoinsert-yas-expand()
    "Replace text in yasnippet template."
    (yas/expand-snippet (buffer-string) (point-min) (point-max)))
  :config
  (general-setq auto-insert 'other)
  (general-setq auto-insert-directory (nl-etc-expand "autoinsert/"))
  (general-setq auto-insert-alist
                '((("\\.py\\'" . "Python Plotting") . ["template.py" arco/autoinsert-yas-expand]))))
#+end_src

*** Autorevert (Built-In)

#+name: init-autorevert-block
#+begin_src emacs-lisp
(use-package autorevert
  :straight (:type built-in)
  :ghook ('emacs-startup-hook #'global-auto-revert-mode)
  :init
  (general-setq auto-revert-use-notify t
                auto-revert-avoid-polling t
                auto-revert-verbose nil
                global-auto-revert-non-file-buffers t
                revert-without-query '(".*")))
#+end_src

*** Bookmark (Built-In)
#+name: init-bookmark-block
#+begin_src emacs-lisp
(use-package bookmark
  :straight (:type built-in)
  :general
  ("H-b" #'bookmark-jump)
  :config
  (general-setq bookmark-save-flag +1))
#+end_src

*** Calculator (Built-In)

Let's add a few helpful units to the calculator.

#+name: init-calc-block
#+begin_src emacs-lisp
(use-package calc
  :straight (:type built-in)
  :commands (quick-calc calc)
  :config
  (general-setq math-additional-units
                '((GiB "1024 * MiB" "Giga Byte")
                  (MiB "1024 * KiB" "Mega Byte")
                  (KiB "1024 * B" "Kilo Byte")
                  (B nil "Byte")
                  (Gib "1024 * Mib" "Giga Bit")
                  (Mib "1024 * Kib" "Mega Bit")
                  (Kib "1024 * b" "Kilo Bit")
                  (b "B / 8" "Bit"))))
#+end_src

*** Calendar (Built-In)

#+name: init-calendar-block
#+begin_src emacs-lisp
(use-package calendar
  :straight (:type built-in)
  :ghook ('calendar-today-visible-hook #'calendar-mark-today)
  :config
  (general-setq calendar-longitude 43.492
                calendar-latitude -112.034
                calendar-location-name "Idaho Falls, Idaho"
                calendar-holiday-marker t))
#+end_src

*** Checkdoc (Built-In)

#+name: init-checkdoc-block
#+begin_src emacs-lisp
(use-package checkdoc
  :straight (:type built-in)
  :config
  (put 'checkdoc-package-keywords-flag 'safe-local-variable #'booleanp))
#+end_src

*** Comint (Built-In)

Added some functionality to kill buffers when their process ends. Code taken from [[https://www.eigenbahn.com/2020/05/13/emacs-comint-buffer-auto-close][Eigenbahn]].

#+name: init-comint-block
#+begin_src emacs-lisp
(use-package comint
  :no-require t
  :straight (:type built-in)
  :init
  (defvar arco--kill-on-exit-comint-hook-has-run nil
    "Whether or not `kill-on-exit-comint-hook' has run or not.
We need this buffer-local var to prevent the hook from running
several times, as can happen for example when calling `shell'.")

  (defun arco/kill-buffer-sentinel (process output)
    "Process sentinel to auto kill associated buffer once PROCESS dies."
    (unless (process-live-p process)
      (kill-buffer (process-buffer process))))

  (defun arco/add-kill-on-exit-sentinel ()
    "Replace current process sentinel with a new sentinel composed
of the current one and `my-kill-buffer-sentinel'."
    (let* ((process (get-buffer-process (current-buffer)))
           (og-sentinel (process-sentinel process))
           (sentinel-list (-remove #'null
                                   (list og-sentinel #'arco/kill-buffer-sentinel)))
           (combined-sentinel (lambda (process line)
                                (--each sentinel-list
                                  (funcall it process line)))))
      (setf (process-sentinel process) combined-sentinel)))

  (defun arco/async-funcall (function &optional buffer args delay)
    "Run FUNCTION with ARGS in the buffer after a short DELAY."
    (run-at-time (or delay 0.2) nil
                 `(lambda () (with-current-buffer ,buffer ,(cons function args)))))

  (defun arco/kill-on-exit-comint-hook ()
    (unless arco--kill-on-exit-comint-hook-has-run
      (setq-local arco--kill-on-exit-comint-hook-has-run t)
      (arco/async-funcall #'arco/add-kill-on-exit-sentinel (current-buffer))))

  (general-add-hook 'comint-mode-hook #'arco/kill-on-exit-comint-hook)
  :config
  (general-setq comint-prompt-read-only t
                comint-move-point-for-output t
                comint-scroll-show-maximum-output t
                comint-scroll-to-bottom-on-output t
                comint-scroll-to-botom-on-input t))
#+end_src

*** Compile (Built-In)
#+name: init-compile-block
#+begin_src emacs-lisp
(use-package compile
  :straight (:type built-in)
  :init
  (general-setq compilation-message-face 'compilation-base-face
                compilation-always-kill t
                compilation-ask-about-save nil
                compilation-scroll-output 'first-error))
#+end_src

*** Cus-Start (Built-In)

I bassically use this block to load all settings that don't have a loaded emacs library.

#+name: init-cus-start-block
#+begin_src emacs-lisp
(use-package cus-start
  :no-require t
  :straight (:type built-in)
  :init
  (general-setq-default auto-save-list-file-name nil
                        auto-save-list-file-prefix nil
                        auto-save-no-message t
                        bidi-paragraph-separate-re "^"
                        bidi-paragraph-start-re "^"
                        cursor-in-non-selected-windows nil
                        cursor-type 'bar
                        default-directory (f-expand "$HOME")
                        delete-by-moving-to-trash t
                        disabled-command-function nil
                        display-fill-column-indicator-column 82
                        echo-keystrokes 0.02
                        fast-but-imprecise-scrolling t
                        ffap-machine-p-known 'reject
                        fill-column 82
                        frame-resize-pixelwise t
                        frame-title-format '("%b - Emacs")
                        highlight-nonselected-windows nil
                        history-delete-duplicates t
                        history-length 3000
                        icon-title-format frame-title-format
                        indent-tabs-mode nil
                        indicate-buffer-boundaries nil
                        indicate-empty-lines nil
                        inhibit-compacting-font-caches t
                        inhibit-startup-echo-area-message t
                        inhibit-startup-screen t
                        initial-major-mode 'fundamental-mode
                        initial-scratch-message ";; Welcome to the Church of Emacs! 🙏\n"
                        line-spacing 0
                        max-mini-window-height 0.20
                        message-log-max 8192
                        resize-mini-windows 'grow-only
                        ring-bell-function #'ignore
                        scroll-conservatively 101
                        scroll-margin 5
                        scroll-preserve-screen-position t
                        sentence-end-double-space nil
                        tab-always-indent 'complete
                        tab-width 4
                        truncate-lines t
                        truncate-partial-width-windows nil
                        underline-minimum-offset 0
                        use-dialog-box nil
                        use-file-dialog nil
                        visible-bell nil
                        window-combination-resize t
                        window-resize-pixelwise t
                        word-wrap t
                        x-underline-at-descent-line t))
#+end_src

*** Dabbrev (Built-In)
#+name: init-dabbrev-block
#+begin_src emacs-lisp
(use-package dabbrev
  :straight (:type built-in)
  :commands (dabbrev-expand
             dabbrev-completion)
  :init
  (general-setq dabbrev-abbrev-char-regexp "\\sw\\|\\s_"
                dabbrev-abbrev-skip-leading-regexp "\\$\\|\\*\\|/\\|="
                dabbrev-backward-only nil
                dabbrev-case-distinction nil
                dabbrev-case-fold-search t
                dabbrev-case-replace nil
                dabbrev-check-other-buffers t
                dabbrev-eliminate-newlines nil
                dabbrev-upcase-means-case-search t))
#+end_src

*** Delsel (Built-In)

#+name: init-delsel-block
#+begin_src emacs-lisp
(use-package delsel
  :straight (:type built-in)
  :ghook ('emacs-startup-hook #'delete-selection-mode))
#+end_src

*** Ediff (Built-In)

#+name: init-ediff-block
#+begin_src emacs-lisp
(use-package ediff
  :straight (:type built-in)
  :config
  (general-setq ediff-window-setup-function #'ediff-setup-windows-plain
                ediff-diff-options "-w"
                ediff-split-window-function #'split-window-horizontally))
#+end_src

*** Eldoc (Built-In)
#+name: init-eldoc-block
#+begin_src emacs-lisp
(use-package eldoc
  :blackout t
  :straight (:type built-in)
  :ghook ('prog-mode-hook #'turn-on-eldoc-mode)
  :init
  (general-setq eldoc-idle-delay 0.2
                eldoc-echo-area-use-multiline-p nil))
#+end_src

*** Electric (Built-In)

#+name: init-electric-block
#+begin_src emacs-lisp
(use-package electric
  :straight (:type built-in)
  :ghook ('prog-mode-hook #'electric-indent-mode)
  :init
  (general-setq-default electric-indent-chars '(?\n ?\^?))
  (general-setq electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit
                electirc-pair-preserve-balance t
                electric-pair-pairs '((8216 . 8217) (8220 . 8221) (171 . 187))
                electric-pair-skip-self 'electric-pair-default-skip-self
                electric-pair-skip-whitespace nil
                electric-pair-skip-whitespace-chars '(9 10 32)
                electric-quote-context-sensitive t
                electric-quote-paragraph t
                electric-quote-string nil
                electric-quote-replace-double t))
#+end_src

*** Emacs-Lock (Built-In)
#+name: init-emacs-lock-block
#+begin_src emacs-lisp
(use-package emacs-lock
  :blackout ""
  :straight (:type built-in))
#+end_src

*** Epa (Built-In)

#+name: init-epa-block
#+begin_src emacs-lisp
(use-package epa
  :straight (:type built-in)
  :config
  (general-setq epa-replace-original-text 'ask))
#+end_src

*** Epg (Built-In)

#+name: init-epg-block
#+begin_src emacs-lisp
(use-package epg
  :straight (:type built-in)
  :config
  (general-setq epg-pinentry-mode 'loopback))
#+end_src

*** Eww (Built-In)

#+name: init-web-browsing-block
#+begin_src emacs-lisp
(use-package shr
  :straight (:type built-in)
  :commands (eww eww-browse-url)
  :config
  (general-setq browse-url-browser-function 'eww-browse-url
                shr-use-fonts t
                shr-use-colors t
                shr-max-image-proportion 0.2
                shr-width (current-fill-column)))

(use-package shr-tag-pre-highlight
  :disabled t
  :straight t
  :after shr
  :config
  (general-pushnew '(pre . shr-tag-pre-highlight) shr-external-rendering-functions))
#+end_src

*** Face-Remap (Built-In)

#+name: init-face-remap-block
#+begin_src emacs-lisp
(use-package face-remap
  :blackout (buffer-face-mode . "")
  :straight (:type built-in))
#+end_src

*** Files (Built-In)

#+name: init-files-block
#+begin_src emacs-lisp
(use-package files
  :straight (:type built-in)
  :init
  (general-setq-default auto-mode-case-fold nil
                        auto-save-file-name-transforms `((".*" ,arco--auto-save-file-cache t))
                        backup-by-copying t
                        backup-directory-alist `((".*" . ,arco--auto-save-file-cache))
                        confirm-kill-processes nil
                        confirm-nonexistent-file-or-buffer nil
                        create-lockfiles nil
                        delete-old-versions t
                        enable-local-variables t
                        find-file-suppress-same-file-warnings t
                        find-file-visit-truename t
                        insert-directory-program "/usr/local/bin/gls"
                        kept-new-versions 6
                        large-file-warning-threshold 10000000000
                        require-final-newline t
                        select-enable-clipboard t
                        version-control t
                        view-read-only t))
#+end_src

*** Flyspell (Built-In)

#+name: init-flyspell-block
#+begin_src emacs-lisp
(use-package flyspell
  :straight (:type built-in)
  :config
  (general-setq flyspell-abbrev-p t
                flyspell-use-global-abbrev-table-p t
                flyspell-issue-welcome-flag nil
                flyspell-issue-message-flag nil))
#+end_src

*** Font-Core (Built-In)
#+name: init-font-core-block
#+begin_src emacs-lisp
(use-package font-core
  :straight (:type built-in)
  :ghook ('emacs-startup-hook #'global-font-lock-mode))
#+end_src

*** Frame (Built-In)

#+name: init-frame-block
#+begin_src emacs-lisp
(use-package frame
  :straight (:type built-in)
  :init
  (general-setq window-divider-default-places t
                window-divider-default-bottom-width 1
                window-divider-default-right-width 1)
  (blink-cursor-mode -1)
  (unless (display-graphic-p)
    (menu-bar-mode -1)))
#+end_src

*** Fringe (Built-In)
#+name: init-fringe-block
#+begin_src emacs-lisp
(use-package fringe
  :straight (:type built-in)
  :init
  (set-fringe-mode 10))
#+end_src

*** Gnutls (Built-In)
#+name: init-gnutls-block
#+begin_src emacs-lisp
(use-package gnutls
  :straight (:type built-in)
  :config
  (general-setq gnutls-verify-error t
                gnutls-min-prime-bits 2048
                tls-checktrust gnutls-verify-error))
#+end_src

*** Help (Built-In)

#+name: init-help-block
#+begin_src emacs-lisp
(use-package help
  :straight (:type built-in)
  :gfhook #'visual-line-mode
  :init
  (general-setq help-window-select 'always)
  (general-add-advice 'help-window-display-message :override #'ignore))
#+end_src

*** Hideshow (Built-In)
#+name: init-hideshow-block
#+begin_src emacs-lisp
(use-package hideshow
  :blackout (hs-minor-mode . "")
  :straight (:type built-in)
  :ghook ('prog-mode-hook #'hs-minor-mode))
#+end_src

*** Hippie-Expand (Built-In)
#+name: init-hippie-expand-block
#+begin_src emacs-lisp
(use-package hippie-exp
  :straight (:type built-in)
  :general
  ("M-/" #'hippie-expand)
  :config
  (general-setq hippie-expand-try-functions-list
                '(try-expand-dabbrev-visible
                  try-expand-dabbrev
                  try-expand-dabbrev-all-buffers
                  try-expand-dabbrev-from-kill
                  try-expand-list-all-buffers
                  try-expand-list
                  try-expand-line-all-buffers
                  try-expand-line
                  try-complete-file-name-partially
                  try-complete-file-name
                  try-expand-all-abbrevs)
                hippie-expand-verbose nil))
#+end_src

*** iComplete (Built-In)
#+name: init-icomplete-block
#+begin_src emacs-lisp :tangle no
(use-package icomplete
  :straight (:type built-in)
  :ghook 'emacs-startup-hook
  :config
  (general-setq icomplete-delay-completions-threshold 0
                icomplete-max-chars 0
                icomplete-compute-delay 0
                icomplete-show-matches-on-no-input t
                icomplete-hide-common-prefix nil
                icomplete-prospects-height 1
                icomplete-separator " · "
                icomplete-with-completion-tables t
                icomplete-in-buffer t)
  (fido-mode -1))
#+end_src

*** iElm (Built-In)

#+name: init-ielm-block
#+begin_src emacs-lisp
(use-package ielm
  :straight (:type built-in)
  :config
  (general-add-hook 'inferior-emacs-lisp-mode-hook #'hs-minor-mode)
  (add-to-list 'display-buffer-alist
               `(,(rx bos "*ielm*" eos)
                 (display-buffer-reuse-window display-buffer-in-side-window)
                 (side . right)
                 (window-width . 120))))
#+end_src

*** iSearch (Built-In)
#+name: init-isearch-block
#+begin_src emacs-lisp
(use-package isearch
  :straight (:type built-in)
  :general
  ("C-s" #'isearch-forward)
  :init
  (general-setq lazy-highlight-initial-delay 0
                search-highlight t
                search-whitespace-regexp ".*?"
                isearch-lax-whitespace t
                isearch-regexp-lax-whitespace nil
                isearch-lazy-highlight t
                isearch-lazy-count t
                lazy-count-prefix-format "(%s/%s) "
                lazy-count-suffix-format nil
                isearch-yank-on-move 'shift
                isearch-allow-scroll 'unlimited))
#+end_src

*** iSpell (Built-In)
#+name: init-ispell-block
#+begin_src emacs-lisp
(use-package ispell
  :straight (:type built-in)
  :preface
  (defun djm/fetch-hunspell-dictionary ()
    (unless (file-exists-p (expand-file-name "~/Library/Spelling/en_US.aff"))
      (shell-command "bash ${DOTFILES}/bootstrap/setup-dictionaries.sh")))
  :config
  (djm/fetch-hunspell-dictionary)
  (general-setq ispell-dictionary "en_US"
                ispell-program-name (executable-find "hunspell")
                ispell-really-hunspell t
                ispell-silently-savep t)
  (dolist (regions '((":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:")
                     ("#\\+BEGIN_SRC" . "#\\+END_SRC")
                     ("#\\+BEGIN_EXAMPLE" . "#\\+END_EXAMPLE")))
    (general-pushnew regions ispell-skip-region-alist)))
#+end_src

*** Make-Mode (Built-In)
#+name: init-makefile-block
#+begin_src emacs-lisp
(use-package make-mode
  :blackout ((makefile-automake-mode . "Makefile")
             (makefile-gmake-mode . "Makefile")
             (makefile-makepp-mode . "Makefile")
             (makefile-bsdmake-mode . "Makefile")
             (makefile-imake-mode . "Makefile"))
  :straight (:type built-in)
  :gfhook #'(lambda () (setq-local indent-tabs-mode t)))
#+end_src

*** Message (Built-In)
#+name: init-message-block
#+begin_src emacs-lisp
(use-package message
  :straight (:type built-in)
  :config
  (general-setq send-mail-function 'sendmail-send-it
                sendmail-program "/usr/local/bin/msmtp"
                mail-specify-envelope-from t
                message-sendmail-envelope-from 'header
                mail-envelope-from 'header))
#+end_src

*** Minibuffer (Built-In)
#+name: init-mini-buffer-block
#+begin_src emacs-lisp
(use-package minibuffer
  :no-require t
  :straight (:type built-in)
  :preface
  (defun djm/minibuffer-setup-hook ()
    (general-setq gc-cons-threshold extended-gc-cons-threshold))

  (defun djm/minibuffer-exit-hook ()
    (general-setq gc-cons-threshold default-gc-cons-threshold))

  (defun arco/always-exit-minibuffer-first ()
    (if-let ((minibuffer (active-minibuffer-window)))
        (with-current-buffer (window-buffer minibuffer)
          (minibuffer-keyboard-quit))
      (funcall keyboard-quit)))

  :init
  (general-add-advice #'arco/always-exit-minibuffer-first :around 'keyboard-quit)
  (general-add-hook 'minibuffer-setup-hook #'djm/minibuffer-setup-hook)
  (general-add-hook 'minibuffer-exit-hook #'djm/minibuffer-exit-hook)
  (general-add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
  :config
  (general-setq completion-cycle-threshold 3
                completion-flex-nospace nil
                completion-pcm-complete-word-inserts-delimiters t
                completion-pcm-word-delimiters "-_./:| "
                completion-show-help nil
                completion-styles '(partial-completion substring initials flex)
                completion-category-overrides '((file (styles initials basic))
                                                (buffer (styles initials basic))
                                                (info-menu (styles basic)))
                completions-format 'vertical
                read-answer-short t
                read-buffer-completion-ignore-case t
                read-file-name-completion-ignore-case t
                resize-mini-windows t))
#+end_src

*** Mwheel (Built-In)
#+name: init-mwheel (built-in)-block
#+begin_src emacs-lisp
(use-package mwheel
  :straight (:type built-in)
  :init
  (general-setq mouse-wheel-scroll-amount '(1 ((shift) .5) ((control)))
                mouse-wheel-progressive-speed nil))
#+end_src

*** New-Comment (Built-In)
#+name: init-new-comment-block
#+begin_src emacs-lisp
(use-package newcomment
  :straight (:type built-in)
  :init
  (general-setq comment-empty-lines t
                comment-fill-column 72
                comment-multi-line t
                comment-style 'multi-line))
#+end_src

*** NS-Win (Built-In)

This block deserves some explanation. My keyboard config maps =caps-lock= to =left-control=, I then map the
=left-control= key to the =right-control= key. So my hyper key is technically the =left-control= key.

#+name: init-ns-win-block
#+begin_src emacs-lisp
(use-package ns-win
  :straight (:type built-in)
  :init
  (general-setq mac-command-modifier 'meta
                mac-option-modifier 'super
                ;; Karabiner binds left-ctrl to right-ctrl
                mac-right-control-modifier 'hyper))
#+end_src

*** Paren (Built-In)
#+name: init-paren-block
#+begin_src emacs-lisp
(use-package paren
  :straight (:type built-in)
  :ghook ('prog-mode-hook #'show-paren-mode)
  :config
  (general-setq show-paren-delay 0
                show-paren-style 'parenthesis
                show-paren-when-point-in-periphery t
                show-paren-when-point-inside-paren nil))
#+end_src

*** Pixel-Scroll (Built-In)
#+name: init-pixel-scroll-block
#+begin_src emacs-lisp
(use-package pixel-scroll
  :straight (:type built-in)
  :ghook 'after-init-hook
  :init
  (general-setq pixel-wait 1))
#+end_src

*** Proced (Built-In)
#+name: init-proced (built-in)-block
#+begin_src emacs-lisp
(use-package proced
  :straight (:type built-in)
  :commands proced
  :config
  (general-setq proced-auto-update-flag t
                proced-auto-update-interval 1
                proced-descend t
                proced-filter 'user))
#+end_src

*** Prog-Mode (Built-In)
#+name: init-prog-mode-block
#+begin_src emacs-lisp
(use-package prog-mode
  :no-require t
  :straight (:type built-in)
  :gfhook
  #'display-fill-column-indicator-mode
  #'show-paren-mode
  #'prettify-symbols-mode
  :init
  (general-setq prettify-symbols-unprettify-at-point 'right)
  (general-add-hook 'after-save-hook
                    #'executable-make-buffer-file-executable-if-script-p))
#+end_src

*** Project (Built-In)
#+name: init-project-block
#+begin_src emacs-lisp
(use-package project
  :straight (:type built-in)
  :init
  (general-setq project-vc-ignores '("__pycache__")
                project-find-functions nil))
#+end_src

*** Recentf (Built-In)

#+name: init-recentf-block
#+begin_src emacs-lisp
(use-package recentf
  :straight (:type built-in)
  :ghook 'emacs-startup-hook
  :general
  ("C-x C-r" #'crux-recentf-find-file)
  :config
  (general-setq recentf-max-saved-items 2000
                recentf-max-menu-items 100
                recentf-auto-cleanup 'never)
  (arco/run-at-active-interval (* 5 60) 10
    (let ((inhibit-message t))
      (recentf-save-list))))
#+end_src

*** Savehist (Built-In)
#+name: init-savehist-block
#+begin_src emacs-lisp
(use-package savehist
  :straight (:type built-in)
  :ghook 'emacs-startup-hook
  :config
  (general-setq savehist-autosave-interval nil
                savehist-save-minibuffer-history t
                savehist-additional-variables '(mark-ring
                                                global-mark-ring
                                                search-ring
                                                kill-ring
                                                regexp-search-ring
                                                extended-command-history)))
#+end_src

*** Saveplace (Built-In)
#+name: init-saveplace-block
#+begin_src emacs-lisp
(use-package saveplace
  :straight (:type built-in)
  :ghook ('emacs-startup-hook #'save-place-mode))
#+end_src

*** Select (Built-In)
#+name: init-select-block
#+begin_src emacs-lisp
(use-package select
  :straight (:type built-in)
  :init
  (general-setq select-enable-clipboard t
                x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src

*** Shell-Script (Built-In)
#+name: init-shell-script-block
#+begin_src emacs-lisp
(use-package sh-script
  :straight (:type built-in)
  :preface
  (defun arco/sh-prettify-mode-line ()
    (setq mode-line-process nil)
    (when (eq major-mode 'sh-mode)
      (setq mode-name (capitalize (symbol-name sh-shell)))))

  (defun sh-script-extra-font-lock-is-in-double-quoted-string ()
    "Non-nil if point in inside a double-quoted string."
    (let ((state (syntax-ppss)))
      (eq (nth 3 state) ?\")))

  (defun sh-script-extra-font-lock-match-var-in-double-quoted-string (limit)
    "Search for variables in double-quoted strings."
    (let (res)
      (while
          (and (setq res
                     (re-search-forward
                      "\\$\\({#?\\)?\\([[:alpha:]_][[:alnum:]_]*\\|[-#?@!]\\)"
                      limit t))
               (not (sh-script-extra-font-lock-is-in-double-quoted-string))))
      res))

  (defvar sh-script-extra-font-lock-keywords
    '((sh-script-extra-font-lock-match-var-in-double-quoted-string
       (2 font-lock-variable-name-face prepend))))

  (defun sh-script-extra-font-lock-activate ()
    (interactive)
    (font-lock-add-keywords nil sh-script-extra-font-lock-keywords)
    (if (fboundp 'font-lock-flush)
        (font-lock-flush)
      (when font-lock-mode
        (with-no-warnings
          (font-lock-fontify-buffer)))))
  :init
  (general-add-hook 'sh-mode-hook #'arco/sh-prettify-mode-line)
  (general-add-hook 'sh-mode-hook #'sh-script-extra-font-lock-activate)
  :config
  (general-setq-default sh-basic-offset 2)
  (compdef
   :modes '(sh-mode shell-script-mode)
   :capf #'sh-completion-at-point-function
   :company '(company-capf
              company-shell
              company-shell-env
              company-files
              company-dabbrev-code)))
#+end_src

*** Shell (Built-In)
#+name: init-shell-block
#+begin_src emacs-lisp
(use-package shell
  :straight (:type built-in)
  :commands shell-command
  :config
  (general-setq ansi-color-for-comint-mode t
                shell-command-prompt-show-cwd t))
#+end_src

*** Simple (Built-In)

#+name: init-simple-block
#+begin_src emacs-lisp
(use-package simple
  :blackout ((visual-line-mode . "")
             (auto-fill-mode . ""))
  :straight (:type built-in)
  :general
  ("C-x p" #'pop-to-mark-command)
  :init
  (general-setq blink-matching-paren t
                column-number-mode t
                delete-trailing-lines nil
                eval-expression-print-length nil
                eval-expression-print-level nil
                idle-update-delay 1
                kill-do-not-save-duplicates t
                kill-ring-max 300
                line-move-visual nil
                line-number-mode t
                mode-line-percent-position nil
                save-interprogram-paste-before-kill t
                set-mark-command-repeat-pop t
                shift-select-mode nil
                show-trailing-whitespace nil))
#+end_src

*** Smerge (Built-In)

#+name: init-smerge-block
#+begin_src emacs-lisp
(use-package smerge-mode
  :straight (:type built-in)
  :commands (smerge-mode))
#+end_src

*** Subr-X (Built-In)
#+name: init-subr-x-block
#+begin_src emacs-lisp
(use-package subr-x
  :straight (:type built-in)
  :preface
  (defun display-buffer-fullframe (buffer alist)
    (when-let* ((window (or (display-buffer-reuse-window buffer alist)
                            (display-buffer-same-window buffer alist)
                            (display-buffer-pop-up-window buffer alist)
                            (display-buffer-use-some-window buffer alist))))
      (delete-other-windows window)
      window)))
#+end_src

*** Subword (Built-In)

#+name: init-subword-block
#+begin_src emacs-lisp
(use-package subword
  :blackout t
  :straight (:type built-in)
  :ghook #'emacs-startup-hook)
#+end_src

*** Term (Built-In)
#+name: init-term-block
#+begin_src emacs-lisp
(use-package term
  :straight (:type built-in)
  :commands term
  :config
  (general-setq term-buffer-maximum-size 9999
                term-completion-autolist t
                term-completion-recexact t
                term-scroll-to-bottom-on-output t))
#+end_src

*** Time (Built-In)

#+name: init-time-block
#+begin_src emacs-lisp
(use-package time
  :straight (:type built-in)
  :ghook (#'emacs-startup-hook #'display-time-mode)
  :config
  (general-setq display-time-24hr-format nil
                display-time-day-and-date t
                display-time-default-load-average nil))
#+end_src

*** Tramp (Built-In)
#+name: init-tramp-block
#+begin_src emacs-lisp
(use-package tramp
  :straight (:type built-in)
  :preface
  (defun tramp-precious-flags ()
    (when (file-remote-p default-directory)
      (set (make-local-variable 'file-precious-flag) t)))

  (defun tramp-dired-switches ()
    (when (file-remote-p default-directory)
      (setq dired-actual-switches "-la")))
  :init
  (general-add-hook 'find-file-hook #'tramp-precious-flags)
  (general-add-hook 'dired-before-readin-hook #'tramp-dired-switches)

  (general-setq tramp-ssh-controlmaster-options
                (concat
                 "-o ControlPath=/tmp/ssh-ControlPath-%%r%%h:%%p "
                 "-o ControlMaster=auto -o ControlPersist=yes"))

  (general-setq tramp-default-method "scp"
                tramp-terminal-type "tramp"
                tramp-verbose 3
                tramp-completion-reread-directory-timeout nil
                tramp-use-ssh-controlmaster-options t
                tramp-histfile-override "/tmp/tramp_history"
                remote-file-name-inhibit-cache nil
                tramp-chunksize 500
                vc-ignore-dir-regexp (format "\\(%s\\)\\|\\(%s\\)"
                                             vc-ignore-dir-regexp
                                             tramp-file-name-regexp)))
#+end_src

*** Uniquify (Built-In)

#+name: init-uniquify-block
#+begin_src emacs-lisp
(use-package uniquify
  :straight (:type built-in)
  :init
  (general-setq uniquify-ignore-buffers-re "^\\*"
                uniquify-buffer-name-style 'post-forward-angle-brackets
                uniquify-strip-common-suffix t
                uniquify-after-kill-buffer-p t
                uniquify-separator "/"))
#+end_src

*** VC-Hooks (Built-In)

#+name: init-vc-hooks-block
#+begin_src emacs-lisp
(use-package vc-hooks
  :straight (:type built-in)
  :init
  (general-setq vc-follow-symlinks t
                vc-handled-backends nil))
#+end_src

*** View (Built-In)

#+name: init-view-block
#+begin_src emacs-lisp
(use-package view
  :straight (:type built-in)
  :init
  (general-setq view-inhibit-help-message t))
#+end_src

*** Window (Built-In)
#+name: init-window-block
#+begin_src emacs-lisp
(use-package window
  :straight nil
  :init
  (general-setq display-buffer-alist
                '(;; top side window
                  ("\\*\\(Flycheck\\|Package-Lint\\).*"
                   (display-buffer-in-side-window)
                   (window-height . 0.16)
                   (side . bottom)
                   (slot . 0)
                   (window-parameters . ((no-other-window . t))))
                  ("\\*\\(Backtrace\\|Warnings\\|Compile-Log\\|Messages\\)\\*"
                   (display-buffer-in-side-window)
                   (window-height . 0.16)
                   (side . bottom)
                   (slot . 1)
                   (window-parameters . ((no-other-window . t))))
                  ;; bottom side window
                  (".*\\*Completions.*"
                   (display-buffer-in-side-window)
                   (window-height . 0.16)
                   (side . bottom)
                   (slot . 0)
                   (window-parameters . ((no-other-window . t))))
                  ("\\*e?shell.*"
                   (display-buffer-in-side-window)
                   (window-height . 0.16)
                   (side . bottom)
                   (slot . 1))
                  ;; left side window
                  ("\\*helpful.*"
                   (display-buffer-in-side-window)
                   (window-width . 0.30)       ; See the :hook
                   (side . right)
                   (slot . 0)
                   (window-parameters . ((no-other-window . t))))
                  ("\\*Help.*"
                   (display-buffer-in-side-window)
                   (window-width . 0.30)       ; See the :hook
                   (side . right)
                   (slot . 0)
                   (window-parameters . ((no-other-window . t))))
                  ;; right side window
                  ("\\*Faces\\*"
                   (display-buffer-in-side-window)
                   (window-width . 0.25)
                   (side . right)
                   (slot . 0)
                   (window-parameters . ((no-other-window . t)
                                         (mode-line-format . (" "
                                                              mode-line-buffer-identification)))))
                  ("\\*Custom.*"
                   (display-buffer-in-side-window)
                   (window-width . 0.25)
                   (side . right)
                   (slot . 1))))
  (general-setq window-combination-resize t
                even-window-sizes 'height-only
                window-sides-vertical nil))
#+end_src

*** Winner (Built-In)
#+name: init-winner-block
#+begin_src emacs-lisp
(use-package winner
  :straight (:type built-in)
  :ghook 'emacs-startup-hook
  :config
  (general-setq winner-boring-buffers '("*Completions*"
                                        "*Compile-Log*"
                                        "*inferior-lisp*"
                                        "*Fuzzy Completions*"
                                        "*Apropos*"
                                        "*Help*"
                                        "*Buffer List*"
                                        "*Ibuffer*")))
#+end_src

** User Files
*** Custom File

#+name: init-custom-load-block
#+begin_src emacs-lisp
(use-package cus-edit
  :straight (:type built-in)
  :init
  (general-setq custom-file arco--user-custom-file)
  (when (file-exists-p custom-file)
    (load custom-file :noerror)))
#+end_src

*** Secret File

#+name: init-secret-load-block
#+begin_src emacs-lisp
(when (file-exists-p arco--user-secret-file)
  (load arco--user-secret-file :noerror)
  (general-setq-default user-mail-address arco--user-email
                        user-full-name arco--user-name))
#+end_src

** Themes & Aesthetics
*** [[https://github.com/yoshiki/yaml-mode][All-The-Icons]]

Sort of a standard package in most emacs-configs these days.

#+name: init-all-the-icons-block
#+begin_src emacs-lisp
(use-package all-the-icons
  :straight t
  :commands (all-the-icons-icon-for-buffer)
  :config
  (general-setq all-the-icons-scale-factor 1)
  (general-pushnew '("\\.db$" all-the-icons-faicon
                     "database" :face all-the-icons-blue)
                   all-the-icons-icon-alist)
  (general-pushnew '("\\.edn$" all-the-icons-alltheicon
                     "clojure" :face all-the-icons-green)
                   all-the-icons-icon-alist))
#+end_src

*** [[https://github.com/purcell/default-text-scale][Default-Text-Scale]]

- TODO: Figure out how to config my fonts so this changes all font sizes consistently.

#+name: init-default-text-scale-block
#+begin_src emacs-lisp
(use-package default-text-scale
  :straight t
  :general
  ("<s-up>" #'default-text-scale-increase
   "<s-down>" #'default-text-scale-decrease
   "s-r" #'default-text-scale-reset)
  :config
  (general-setq default-text-scale-amount 20))
#+end_src


*** [[https://github.com/Fanael/rainbow-delimiters][Rainbow-Delimiters]]
#+name: init-rainbow-delimiters-block
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :blackout t
  :straight t
  :ghook 'prog-mode-hook)
#+end_src

*** [[https://github.com/dylanjm/emacs-theme-gruvbox][Gruvbox-Theme]]

My own personal fork of the gruvbox-theme. I've mostly added color-modes for missing packages.

#+name: init-gruvbox-theme-block
#+begin_src emacs-lisp
(use-package doom-themes
  :straight t
  :ghook ('emacs-startup-hook #'arco/load-theme)
  :preface
  (defun arco/load-theme ()
    (setq doom-themes-enable-bold t
          doom-themes-enable-italic t)
    (load-theme 'doom-tomorrow-night t)
    (doom-themes-org-config)
    (when (daemonp)
      (general-add-hook
       'after-make-frame-functions #'setup-main-fonts))
    (when-let (frame (selected-frame))
      (setup-main-fonts frame)
      (configure-fonts frame))))
#+end_src

*** [[https://github.com/seagle0128/doom-modeline][Doom-Modeline]]
#+name: init-doom-modeline-block
#+begin_src emacs-lisp
(use-package doom-modeline
  :straight t
  :ghook ('window-setup-hook)
  :config
  (general-setq doom-modeline-buffer-encoding nil
                doom-modeline-checker-simple-format nil))
#+end_src

*** [[https://github.com/hlissner/emacs-hide-mode-line][Hide-Mode-Line-Mode]]

#+name: init-hide-mode-line-block
#+begin_src emacs-lisp
(use-package hide-mode-line
  :straight t
  :commands (hide-mode-line-mode))
#+end_src

*** [[https://github.com/purcell/page-break-lines][Page-Break-Lines]]

This package is great, but can be a little annoying. It can sometimes slow-down emacs a ton.
#+name: init-page-break-lines-block
#+begin_src emacs-lisp
(use-package page-break-lines
  :blackout t
  :straight t
  :ghook arco--page-break-line-hooks
  :preface
  (defconst arco--page-break-line-hooks '( ibuffer-mode-hook
                                           text-mode-hook
                                           comint-mode-hook
                                           compilation-mode-hook
                                           ledger-report-mode-hook
                                           help-mode-hook
                                           helpful-mode-hook
                                           org-agenda-mode-hook)))
#+end_src

** System
*** [[https://gitlab.com/koral/gcmh/][GCMH]]
#+name: init-gcmh-block
#+begin_src emacs-lisp
(use-package gcmh
  :blackout t
  :straight t
  :ghook 'after-init-hook
  :init
  (general-add-hook 'focus-out-hook #'gcmh-idle-garbage-collect)
  (general-add-hook 'suspend-hook #'gcmh-idle-garbage-collect)
  (general-setq gcmh-idle-delay 10))
#+end_src

*** [[https://github.com/politza/pdf-tools][PDF-Tools]]
#+name: init-pdf-tools-block
#+begin_src emacs-lisp
(use-package pdf-tools
  :straight t
  :mode ("\\.pdf$" . 'pdf-view-mode)
  :preface
  (setenv "PKG_CONFIG_PATH" "/usr/local/Cellar/zlib/1.2.8/lib/pkgconfig:/usr/local/lib/pkgconfig:/opt/X11/lib/pkgconfig")
  :init
  (pdf-loader-install)
  :config
  (pdf-tools-enable-minor-modes))
#+end_src

*** [[https://github.com/emacsorphanage/osx-trash][Restart-Emacs]]
A nice way to restart emacs on the fly if you need to.
#+name: init-restart-emacs-block
#+begin_src emacs-lisp
(use-package restart-emacs
  :straight t
  :init
  (defalias 're #'restart-emacs))
#+end_src

*** [[https://github.com/emacsorphanage/osx-trash][OSX-Trash]]
#+name: init-osx-trash-block
#+begin_src emacs-lisp
(use-package osx-trash
  :straight t
  :ghook ('emacs-startup-hook #'osx-trash-setup))
#+end_src

*** [[https://github.com/suonlight/multi-libvterm][Multi-Libvterm]]
#+name: init-multi-vterm-block
#+begin_src emacs-lisp
(use-package multi-libvterm
  :straight (:host github :repo "suonlight/multi-libvterm")
  :commands (multi-vterm-dedicated-toggle)
  :general
  ("C-c x v" #'multi-vterm-dedicated-toggle)
  :init
  (general-setq multi-vterm-dedicated-window-height 15
                multi-vterm-dedicated-window t))
#+end_src

*** [[https://github.com/akermu/emacs-libvterm][Vterm]]
#+name: init-vterm-block
#+begin_src emacs-lisp
(use-package vterm
  :straight t
  :preface
  (general-setq vterm-install t
                vterm-always-compile-module t)
  :config
  (general-setq vterm-use-vterm-prompt-detection-method t
                vterm-kill-buffer-on-exit t
                vterm-shell "/usr/local/bin/zsh"
                vterm-max-scrollback 10000))
#+end_src

** Frameworks
*** [[https://github.com/raxod502/prescient.el][Prescient]]
#+name: init-prescient-block
#+begin_src emacs-lisp
(use-package prescient
  :straight t
  :ghook ('selectrum-prescient-mode-hook #'prescient-persist-mode)
  :init
  (setq prescient-history-length 1000))
#+end_src

*** [[https://github.com/raxod502/selectrum][Selectrum
]]
#+name: init-selectrum-block
#+begin_src emacs-lisp
(use-package selectrum
  :straight (:host github :repo "raxod502/selectrum" :files ("*.el"))
  :ghook 'emacs-startup-hook
  :init
  (general-setq selectrum-num-candidates-displayed 10))

(use-package selectrum-prescient
  :straight (:host github :repo "raxod502/prescient.el")
  :ghook 'selectrum-mode-hook)
#+end_src

*** [[https://github.com/minad/consult][Consult]]
#+name: init-consult-block
#+begin_src emacs-lisp
(use-package consult
  :straight (:host github :repo "minad/consult"))
#+end_src

*** [[https://github.com/minad/marginalia][Marginalia]]
#+name: init-marginalia-block
#+begin_src emacs-lisp
(use-package marginalia
  :straight t
  :init
  (marginalia-mode))
#+end_src

*** [[https://github.com/raxod502/ctrlf][CTRL-F
]]
#+name: init-ctrl-f-block
#+begin_src emacs-lisp
(use-package ctrlf
  :straight t
  :ghook 'emacs-startup-hook)
#+end_src

*** [[https://github.com/bbatsov/projectile][Projectile]]
#+name: init-projectile-block
#+begin_src emacs-lisp
(use-package projectile
  :blackout t
  :straight t
  :general
  (:prefix "C-c p"
           "s" #'projectile-switch-project
           "c" #'projectile-compile-project
           "f" #'projectile-find-file
           "d" #'projectile-find-dir
           "b" #'projectile-switch-to-buffer
           "k" #'projectile-kill-buffers)
  :preface
  (defun projectile-project-find-function (dir)
    (let* ((root (projectile-project-root dir)))
      (and root (cons 'transient root))))
  :config
  (general-setq projectile-completion-system 'default
                projectile-enable-caching t
                projectile-switch-project-action 'projectile-dired)
  (general-pushnew ".ccls-cache" projectile-globally-ignored-directories)
  (general-pushnew ".ccls-root" projectile-project-root-files-bottom-up)
  (general-pushnew "compile_commands.json" projectile-project-root-files-top-down-recurring)
  (general-pushnew 'projectile-project-find-function project-find-functions)
  (projectile-global-mode))
#+end_src

** Autocompletion
*** [[https://github.com/company-mode/company-mode][Company]]
#+name: init-company-block
#+begin_src emacs-lisp
(use-package company
  :blackout t
  :straight t
  :commands company-complete-common company-manual-begin company-grab-line
  :ghook ('emacs-startup-hook #'global-company-mode)
  :general
  ([remap completion-at-point] #'company-manual-begin
   [remap complete-symbol] #'company-manual-begin)
  (:keymaps 'company-active-map
            "TAB"     #'company-complete-selection
            "<tab>"   #'company-complete-selection
            "C-n"     #'company-select-next-if-tooltip-visible-or-complete-selection
            "C-p"     #'company-select-previous-or-abort)
  (:keymaps 'company-active-map
            :predicate '(company-explicit-action-p)
            "<return>" #'company-complete-selection
            "RET"      #'company-complete-selection)
  (:keymaps 'comint-mode-map
            [remap indent-for-tab-command] #'company-manual-begin)
  :init
  (general-unbind :keymaps 'company-active-map "C-w" "C-h")
  (general-setq company-async-timeout 10
                company-auto-complete nil
                company-auto-complete-chars nil
                company-dabbrev-other-buffers nil
                company-dabbrev-ignore-case nil
                company-dabbrev-downcase nil
                company-idle-delay 0.0
                company-minimum-prefix-length 1
                company-show-numbers t
                company-require-match 'never
                company-tooltip-limit 14
                company-tooltip-align-annotations t)
  (general-setq company-frontends '(company-pseudo-tooltip-frontend
                                    company-echo-metadata-frontend))
  (general-setq company-global-modes '(not message-mode
                                           help-mode
                                           gud-mode
                                           vterm-mode
                                           eshell-mode
                                           term-mode))
  (general-setq company-backends '(company-capf company-files company-dabbrev)))
#+end_src

*** [[https://github.com/sebastiencs/company-box][Company-Box]]
#+name: init-company-box-block
#+begin_src emacs-lisp
(use-package company-box
  :blackout t
  :straight t
  :ghook 'company-mode-hook
  :config
  (general-setq company-box-show-single-candidate t
                company-box-backends-colors nil
                company-box-max-candidates 14
                company-box-icons-alist 'company-box-icons-all-the-icons))
#+end_src

*** [[https://github.com/raxod502/prescient.el][Company-Prescient]]
#+name: init-company-prescient-block
#+begin_src emacs-lisp
(use-package company-prescient
  :straight t
  :ghook 'company-mode-hook)
#+end_src

*** [[https://github.com/PythonNut/company-flx][Company-FLX]]
#+name: init-company-flx-block
#+begin_src emacs-lisp
(use-package company-flx
  :straight t
  :ghook 'company-mode-hook)
#+end_src

*** [[https://github.com/joaotavora/yasnippet][Yasnippet]]
#+name: init-yasnippet-block
#+begin_src emacs-lisp
(use-package yasnippet
  :blackout ((yas-global-mode . "")
             (yas-minor-mode . ""))
  :straight t
  :ghook ('(prog-mode-hook org-mode-hook) #'yas-global-mode)
  :general ("C-;" #'yas-expand)
  :config
  (general-setq yas-verbosity 1
                yas-wrap-around-region t
                yas-prompt-functions '(yas-completing-prompt)
                yas-snippet-dirs `(,arco--yasnippet-dir)))
#+end_src

** Documentation
*** [[https://github.com/Wilfred/helpful][Helpful]]
#+name: init-helpful-block
#+begin_src emacs-lisp
(use-package helpful
  :straight t
  :general
  ([remap describe-function] #'helpful-callable
   "C-h C"                   #'helpful-command
   [remap describe-variable] #'helpful-variable
   [remap describe-key]      #'helpful-key
   "C-c C-d"                 #'helpful-at-point
   "C-h x"                   #'helpful-macro))
#+end_src

*** [[https://github.com/justbur/emacs-which-key][Which-Key]]
#+name: init-which-key-block
#+begin_src emacs-lisp
(use-package which-key
  :blackout t
  :straight t
  :ghook 'emacs-startup-hook
  :config
  (general-setq which-key-separator " "
                which-key-prefix-prefix "+")
  (which-key-setup-side-window-bottom))
#+end_src

*** [[https://github.com/jguenther/discover-my-major][Discover-My-Major]]
#+name: init-discover-my-major-block
#+begin_src emacs-lisp
(use-package discover-my-major
  :straight t
  :general
  ("C-h C-m" #'discover-my-major))
#+end_src

*** [[https://github.com/stanaka/dash-at-point#readme][Dash-At-Point]]
#+name: init-dash-at-point-block
#+begin_src emacs-lisp
(use-package dash-at-point
  :straight t
  :commands (dash-at-point
             dash-at-point-with-docset)
  :general
  ("H-d" #'dash-at-point
   "H-D" #'dash-at-point-with-docset))
#+end_src

** Editing Tools
*** [[https://github.com/syohex/emacs-anzu][Anzu]]
#+name: init-anzu-block
#+begin_src emacs-lisp
(use-package anzu
  :blackout t
  :straight t
  :general
  ([remap query-replace] #'anzu-query-replace-regexp
   [remap query-replace-regexp] #'anzu-query-replace)
  :init
  (defalias 'qr #'anzu-query-replace)
  (defalias 'qrr #'anzu-query-replace-regexp)
  :config
  (global-anzu-mode))
#+end_src

*** [[https://github.com/Wilfred/deadgrep][Deadgrep]]
#+name: init-deadgrep-block
#+begin_src emacs-lisp
  (use-package deadgrep
    :straight t
    :if (executable-find "rg")
    :init (defalias 'rg #'deadgrep))
#+end_src

*** [[https://github.com/bbatsov/crux][Crux]]
#+name: init-crux-block
#+begin_src emacs-lisp
(use-package crux
  :straight t
  :general
  ([remap move-beginning-of-line] #'crux-move-beginning-of-line
   [remap kill-line] #'crux-smart-kill-line))
#+end_src

*** [[https://github.com/justbur/emacs-vdiff][Emacs-VDiff]]
#+name: init-vdiff-block
#+begin_src emacs-lisp
(use-package vdiff
  :straight t)
#+end_src

*** [[https://github.com/magnars/multiple-cursors.el][Multiple-Cursors]]
#+name: init-multiple-cursors-block
#+begin_src emacs-lisp
(use-package multiple-cursors
  :straight t
  :general
  ("C->" #'mc/mark-next-like-this
   "C-<" #'mc/mark-previous-like-this))
#+end_src

*** [[https://github.com/thierryvolpiatto/zop-to-char][Zop-To-Char]]
#+name: init-zop-to-char-block
#+begin_src emacs-lisp
(use-package zop-to-char
  :straight t
  :general
  ("M-z" #'zop-to-char
   "M-Z" #'zop-up-to-char))
#+end_src

** Minor Modes
*** [[https://github.com/Malabarba/aggressive-indent-mode][Aggressive-Indent]]
#+name: init-aggressive-indent-block
#+begin_src emacs-lisp
(use-package aggressive-indent
  :straight t
  :ghook '(emacs-lisp-mode-hook lisp-mode-hook))
#+end_src

*** [[https://github.com/editorconfig/editorconfig-emacs][EditorConfig]]
#+name: init-editorconfig-block
#+begin_src emacs-lisp
(use-package editorconfig
  :blackout t
  :straight t
  :ghook #'emacs-startup-hook
  :init
  (defun arco/hack-makefile-indent (props)
    (when (derived-mode-p 'makefile-mode)
      (puthash 'indent_style "tab" props)))
  :config
  (general-setq editorconfig-trim-whitespaces-mode 'ws-butler-mode)
  (general-add-hook 'editorconfig-hack-properties-functions
                    #'arco/hack-makefile-indent))
#+end_src

*** [[https://github.com/DarthFennec/highlight-indent-guides][Highlight-Indent-Guides]]
#+name: init-highlight-indent-guides-block
#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :blackout t
  :straight t
  :ghook '(python-mode-hook yaml-mode-hook moose-mode-hook))
#+end_src

*** [[https://github.com/nflath/hungry-delete][Hungry-Delete]]
#+name: init-hungry-delete-block
#+begin_src emacs-lisp
(use-package hungry-delete
  :blackout t
  :straight t
  :ghook '(emacs-lisp-mode-hook lisp-mode-hook))
#+end_src


*** [[https://github.com/apchamberlain/undo-tree.el][Undo-Tree]]
#+name: init-undo-tree-block
#+begin_src emacs-lisp
(use-package undo-tree
  :blackout t
  :straight t
  :commands (undo-tree-undo
             undo-tree-redo)
  :general
  ("C-/" #'undo-tree-undo
   "C-?" #'undo-tree-redo)
  :config
  (general-setq undo-tree-save-history t
                undo-tree-visualizer-timestamps t
                undo-tree-enable-undo-in-region nil
                undo-tree-visualizer-diff t
                undo-limit 800000
                undo-strong-limit 1200000
                undo-outer-limit 1200000)
  (global-undo-tree-mode +1))
#+end_src

*** [[https://github.com/lewang/ws-butler][WS-Butler]]
#+name: init-ws-butler-block
#+begin_src emacs-lisp
(use-package ws-butler
  :blackout t
  :straight t
  :ghook ('prog-mode-hook #'ws-butler-global-mode)
  :config
  (dolist (modes '(special-mode comint-mode term-mode eshell-mode vterm-mode))
    (general-pushnew modes ws-butler-global-exempt-modes)))
#+end_src

** Navigation
*** [[https://github.com/abo-abo/ace-window][Ace-Window]]
#+name: init-ace-window-block
#+begin_src emacs-lisp
(use-package ace-window
  :straight t
  :general ("C-x o" #'ace-window)
  :config
  (general-setq aw-keys '(?a ?s ?d ?f ?j ?k ?l)
                aw-scope 'frame
                aw-dispatch-always nil
                aw-minibuffer-flag t
                aw-ignore-current nil
                aw-display-mode-overlay t
                aw-background t))
#+end_src

*** [[https://github.com/jacktasia/dumb-jump][Dumb-Jump]]
#+name: init-dumb-jump-block
#+begin_src emacs-lisp
(use-package dumb-jump
  :straight t
  :commands (dumb-jump-mode dumb-jump-go)
  :config
  (general-setq dumb-jump-prefer-searcher 'rg
                dumb-jump-rg-search-args "--pcre2 --no-ignore"))
#+end_src

*** [[https://github.com/emacs-mirror/emacs/blob/master/lisp/ibuffer.el][iBuffer]]
#+name: init-ibuffer-block
#+begin_src emacs-lisp
(use-package ibuffer
  :straight (:type built-in)
  :gfhook '(hl-line-mode hide-mode-line-mode)
  :commands (ibuffer ibuffer-forward-line ibuffer-backward-line)
  :defines (ibuffer-show-empty-filter-groups ibuffer-never-show-predicates)
  :general
  ([remap list-buffers] #'ibuffer)
  :config/el-patch
  (general-setq ibuffer-expert t
                ibuffer-display-summary nil
                ibuffer-use-other-window nil
                ibuffer-show-empty-filter-groups nil
                ibuffer-movement-cycle nil
                ibuffer-default-sorting-mode 'filename/process
                ibuffer-title-face 'font-lock-doc-face
                ibuffer-use-header-line t
                ibuffer-default-shrink-to-minimum-size nil)
  (general-setq ibuffer-formats
                '((mark modified " " (mode 1 1) " " (name 25 25 :left :elide) " " filename-and-process)))
  (general-setq ibuffer-never-show-predicates
                (list (rx (or "*magit-" "*git-auto-push*" "*Backtrace*"
                              "*new*" "*Org*" "*helpful"
                              "*Flycheck error messages*" "*Help*"))))

  (define-ibuffer-column mode
    (:inline t)
    (with-current-buffer (current-buffer)
      (let ((icon (all-the-icons-icon-for-buffer)))
        (if (and (stringp icon) (window-system))
            icon
          " "))))

  ;; Dim directory part of file path.
  (define-ibuffer-column filename-and-process
    (:name "Filename/Process")
    (let ((proc (get-buffer-process buffer))
          (filename (ibuffer-make-column-filename buffer mark)))
      (if proc
          (concat (propertize (format "(%s %s)" proc (process-status proc))
                              'font-lock-face 'italic)
                  (if (> (length filename) 0)
                      (format " %s" filename)
                    ""))
        (propertize (f-abbrev filename) 'face 'dired-symlink))))

  ;; Show buffer name in a consistent way.
  (define-ibuffer-column name
    (:inline t)
    (let ((string (buffer-name)))
      (if (not (seq-position string ?\n))
          string
        (replace-regexp-in-string
         "\n" (propertize "^J" 'font-lock-face 'escape-glyph) string))))
  
  ;; Show a horizontal rule using page-break-lines instead of using dashes.
  (el-patch-defun ibuffer-update-title-and-summary (format)
    (ibuffer-assert-ibuffer-mode)
    ;; Don't do funky font-lock stuff here
    (let ((inhibit-modification-hooks t))
      (if (get-text-property (point-min) 'ibuffer-title)
          (delete-region (point-min)
                         (next-single-property-change
                          (point-min) 'ibuffer-title)))
      (goto-char (point-min))
      (add-text-properties
       (point)
       (progn
         (let ((opos (point)))
           ;; Insert the title names.
           (dolist (element format)
             (insert
              (if (stringp element)
                  element
                (pcase-let ((`(,sym ,min ,_max ,align) element))
                  ;; Ignore a negative min when we're inserting the title
                  (when (cl-minusp min)
                    (setq min (- min)))
                  (let* ((name (or (get sym 'ibuffer-column-name)
                                   (error "Unknown column %s in ibuffer-formats" sym)))
                         (len (length name))
                         (hmap (get sym 'header-mouse-map))
                         (strname (if (< len min)
                                      (ibuffer-format-column name
                                                             (- min len)
                                                             align)
                                    name)))
                    (when hmap
                      (setq
                       strname
                       (propertize strname 'mouse-face 'highlight 'keymap hmap)))
                    strname)))))
           (add-text-properties opos (point) '(ibuffer-title-header t))
           (insert "\n")
           ;; Add the underlines

           (el-patch-swap (let ((str (save-excursion
                                       (forward-line -1)
                                       (beginning-of-line)
                                       (buffer-substring (point) (line-end-position)))))
                            (apply #'insert (mapcar
                                             (lambda (c)
                                               (if (not (or (eq c ?\s)
                                                            (eq c ?\n)))
                                                   ?-
                                                 ?\s))
                                             str)))
                          (insert ""))
           (insert "\n"))
         (point))
       `(ibuffer-title t font-lock-face ,ibuffer-title-face))
      ;; Now, insert the summary columns.
      (goto-char (point-max))
      (if (get-text-property (1- (point-max)) 'ibuffer-summary)
          (delete-region (previous-single-property-change
                          (point-max) 'ibuffer-summary)
                         (point-max)))
      (if ibuffer-display-summary
          (add-text-properties
           (point)
           (progn
             (insert "\n")
             (dolist (element format)
               (insert
                (if (stringp element)
                    (make-string (length element) ?\s)
                  (pcase-let ((`(,sym ,min ,_max ,align) element))
                    ;; Ignore a negative min when we're inserting the title.
                    (when (cl-minusp min)
                      (setq min (- min)))
                    (let* ((summary
                            (if (get sym 'ibuffer-column-summarizer)
                                (funcall (get sym 'ibuffer-column-summarizer)
                                         (get sym 'ibuffer-column-summary))
                              (make-string
                               (length (get sym 'ibuffer-column-name))
                               ?\s)))
                           (len (length summary)))
                      (if (< len min)
                          (ibuffer-format-column summary
                                                 (- min len)
                                                 align)
                        summary))))))
             (point))
           '(ibuffer-summary t)))))

  ;; Change the way groups are rendered.
  (el-patch-defun ibuffer-insert-filter-group (name display-name filter-string format bmarklist)
    (add-text-properties
     (point)
     (progn
       (insert (el-patch-remove "[ ")
               display-name
               (el-patch-remove " ]"))
       (point))
     `(ibuffer-filter-group-name
       ,name
       font-lock-face ,ibuffer-filter-group-name-face
       keymap ,ibuffer-mode-filter-group-map
       mouse-face highlight
       help-echo ,(let ((echo '(if tooltip-mode
                                   "mouse-1: toggle marks in this group\nmouse-2: hide/show this filtering group"
                                 "mouse-1: toggle marks  mouse-2: hide/show")))
                    (if (> (length filter-string) 0)
                        `(concat ,filter-string
                                 (if tooltip-mode "\n" " ")
                                 ,echo)
                      echo))))
    (insert "\n")
    (when bmarklist
      (put-text-property
       (point)
       (progn
         (dolist (entry bmarklist)
           (ibuffer-insert-buffer-line (car entry) (cdr entry) format))
         (point))
       'ibuffer-filter-group
       name))
    (el-patch-add (insert "\n"))))
#+end_src

*** [[https://github.com/emacs-mirror/emacs/blob/master/lisp/ibuf-ext.el][iBuffer-Extension]]
#+name: init-ibuffer-ext-block
#+begin_src emacs-lisp
(use-package ibuf-ext
  :straight (:type built-in)
  :ghook ('ibuffer-mode-hook #'ibuffer-auto-mode)
  :config
  (general-setq ibuffer-show-empty-filter-groups nil))
#+end_src

*** [[https://github.com/purcell/ibuffer-projectile][iBuffer-Projectile]]
#+name: init-ibuffer-projectile-block
#+begin_src emacs-lisp
(use-package ibuffer-projectile
  :straight t
  :commands (ibuffer-projectile-set-filter-groups)
  :preface
  (defun djm/config-ibuffer-projectile ()
    (ibuffer-projectile-set-filter-groups)
    ;; (add-to-list 'ibuffer-filter-groups '("Dired" (mode . dired-mode)))
    (add-to-list 'ibuffer-filter-groups
                 '("System" (predicate . (-contains? '("*direnv*" "*straight-process*"
                                                       "*lsp-log*"
                                                       "*ccls*" "*ccls::stderr*"
                                                       "*mspyls*" "*mspyls::stderr*"
                                                       "flycheck")
                                                     (buffer-name)))))
    (unless (eq ibuffer-sorting-mode 'alphabetic)
      (ibuffer-do-sort-by-alphabetic))

    (when (bound-and-true-p page-break-lines-mode)
      (page-break-lines--update-display-tables)))
  :init
  (general-add-hook 'ibuffer-hook #'djm/config-ibuffer-projectile)
  :config
  (general-setq ibuffer-projectile-prefix ""))
#+end_src

*** [[https://gitlab.com/ambrevar/emacs-windower][Windmove]]
#+name: init-windmove-block
#+begin_src emacs-lisp
(use-package windmove
  :straight t
  :general
  ("C-c w j" #'windmove-left
   "C-c w l" #'windmove-right
   "C-c w n" #'windmove-down
   "C-c w u" #'windmove-up))
#+end_src

*** [[https://gitlab.com/ambrevar/emacs-windower][Windower
]]
#+name: init-windower-block
#+begin_src emacs-lisp
(use-package windower
  :straight (:host gitlab :repo "ambrevar/emacs-windower")
  :general
  ("C-c w o" #'windower-switch-to-last-buffer
   "C-c w t" #'windower-toggle-split
   "C-c w s" #'windower-swap
   "C-c w m" #'windower-move-border
   "C-c w a" #'windower-toggle-single))
#+end_src

*** Dired (Built-In)
#+name: init-dired-block
#+begin_src emacs-lisp
(use-package dired
  :blackout "Dired"
  :straight (:type built-in)
  :gfhook '(hl-line-mode arco/dired-for-tramp)
  :general
  (:keymaps 'dired-mode-map
            "h" #'dired-up-directory
            "n" #'dired-next-line
            "p" #'dired-previous-line
            "f" #'find-file)
  :init
  (defun arco/dired-for-tramp ()
    (when (file-remote-p dired-directory)
      (setq-local dired-actual-switches "-alhF")))
  :config
  (general-setq dired-auto-revert-buffer t
                dired-dwim-target t
                dired-use-ls-dired t
                dired-ls-F-marks-symlinks t
                dired-hide-details-hide-symlink-targets nil
                dired-listing-switches "-AFhlv --time=ctime --time-style=long-iso --group-directories-first"
                dired-recursive-deletes 'always
                dired-recursive-copies 'always
                ;; Don't confirm deleting files
                dired-deletion-confirmer '(lambda (x) t)))
#+end_src

*** Dired-Aux (Built-In)
#+name: init-dired-aux-block
#+begin_src emacs-lisp
(use-package dired-aux
  :straight (:type built-in)
  :after (dired)
  :general
  (:keymaps 'dired-mode-map
            "C-c +" #'dired-create-empty-file)
  :init
  (general-setq dired-isearch-filenames 'dwim
                dired-create-destination-dirs 'ask
                dired-vc-rename-file t))
#+end_src

*** WDired (Built-In)
#+name: init-wdired-block
#+begin_src emacs-lisp
(use-package wdired
  :straight (:type built-in)
  :after (dired)
  :general
  (:keymaps 'dired-mode-map
            "C-c C-e" #'wdired-change-to-wdired-mode)
  :init
  (general-setq wdired-create-parent-directories t
                wdired-allow-to-change-permissions t))
#+end_src

*** Dired-X (Built-In)
#+name: init-dired-x-block
#+begin_src emacs-lisp
(use-package dired-x
  :blackout ((dired-omit-mode . ""))
  :straight (:type built-in)
  :after (dired)
  :ghook ('dired-mode-hook #'dired-omit-mode)
  :general
  ("C-x C-j" #'dired-jump
   "s-j" #'dired-jump
   "C-x 4 C-j" #'dired-jump-other-window
   "s-J" #'dired-jump-other-window)
  :config
  (general-setq dired-x-hands-off-my-keys t
                dired-omit-verbose nil
                dired-omit-files-p t
                dired-clean-up-buffers-too t
                dired-clean-confirm-killing-deleted-buffers t
                dired-bind-man nil
                dired-bind-info nil
                dired-omit-files (concat dired-omit-files
                                         "\\|^.DS_Store\\'"
                                         "\\|^.project\\(?:ile\\)?\\'"
                                         "\\|^__pycache__\\'"
                                         "\\|\\(?:\\.js\\)?\\.meta\\'"
                                         "\\|\\.\\(?:elc\\|\\zwc\\|o\\|pyo\\|swp\\|class\\)\\'")))
#+end_src

*** Find-Dired (Built-In)
#+name: init-find-dired-block
#+begin_src emacs-lisp
(use-package find-dired
  :straight (:type built-in)
  :config
  (general-setq find-ls-option '("-ls" . "-AFhlv --group-directories-first")
                find-name-arg "-iname"))
#+end_src

*** Image-Dired (Built-In)

#+name: init-image-dired-block
#+begin_src emacs-lisp
(use-package image-dired
  :demand t
  :straight (:type built-in)
  :after (dired)
  :general
  (:keymaps 'image-dired-thumbnail-mode-map
            "<return>" #'image-dired-thumbnail-display-external)
  :config
  (general-setq image-dired-thumb-size 80
                image-dired-thumb-margin 2
                image-dired-thumb-relief 0
                image-dired-thumbs-per-row 4))
#+end_src

*** [[https://github.com/yqrashawn/fd-dired][FD-Dired]]
#+name: init-fd-dired-block
#+begin_src emacs-lisp
(use-package fd-dired
  :straight t
  :init
  (general-setq fd-dired-ls-option '("| xargs -0 gls -ld --quoting-style=literal" . "-ld")))
#+end_src

*** [[https://github.com/jtbm37/all-the-icons-dired][All-The-Icons-Dired]]
#+name: init-dired-all-the-icons-block
#+begin_src emacs-lisp
(use-package all-the-icons-dired
  :blackout t
  :straight t
  :ghook 'dired-mode-hook)
#+end_src

*** [[https://github.com/clemera/dired-git-info][Dired-Git-Info]]
#+name: init-dired-git-info-block
#+begin_src emacs-lisp
(use-package dired-git-info
  :straight t
  :general
  (:keymaps 'dired-mode-map
            ":" #'dired-git-info-mode)
  :config
  (general-setq dgi-commit-message-format "%h\t%s\t%cr"))
#+end_src

*** [[https://github.com/Fuco1/dired-hacks][Dired-Hacks]]
#+name: init-dired-hacks-block
#+begin_src emacs-lisp
  (use-package dired-hacks
    :straight t)

  (use-package dired-hacks-utils
    :straight nil)

  (use-package dired-filter
    :straight nil)

  (use-package dired-rainbow
    :demand t
    :straight nil
    :after (dired)
    :config
    (dired-rainbow-define-chmod executable-unix "Orange" "-[rw-]+x.*"))

  (use-package dired-narrow
    :straight nil
    :after dired
    :commands (dired-narrow
               dired-narrow-fuzzy
               dired-narrow-regexp)
    :general
    (:keymaps 'dired-mode-map
              "C-c C-n" #'dired-narrow
              "C-c C-f" #'dired-narrow-fuzzy
              "C-c C-r" #'dired-narrow-regexp)
    :config
    (general-setq dired-narrow-exit-when-one-left t
                  dired-narrow-enable-blinking t
                  dired-narrow-blink-time 0.3))

  (use-package dired-collapse
    :straight nil
    :general
    (:keymaps 'dired-mode-map
              "c" #'dired-collapse-mode))

  (use-package dired-open
    :straight nil
    :config
    (general-setq dired-open-functions '(dired-open-by-extension
                                         dired-open-subdir)))

  (use-package dired-list
    :straight nil)

  ;; (use-package dired-images
  ;;   :straight (dired-hacks eimp))

  (use-package dired-ranger
    :straight nil
    :general
    (:keymaps 'dired-mode-map
              "C-c C-c" #'dired-ranger-copy
              "C-c C-m" #'dired-ranger-move
              "C-c C-p" #'dired-ranger-paste
              "C-c C-b" #'dired-ranger-bookmark
              "C-c b v" #'dired-ranger-bookmark-visit))

  (use-package dired-subtree
    :straight nil
    :general
    (:keymaps 'dired-mode-map
              "<tab>"     #'dired-subtree-toggle
              "<backtab>" #'dired-subtree-cycle)
    :config
    (general-setq dired-subtree-use-backgrounds nil))
#+end_src

*** [[https://github.com/stsquad/dired-rsync][Dired-Rsync]]
#+name: init-dired-rsync-block
#+begin_src emacs-lisp
(use-package dired-rsync
  :straight t
  :general
  (:keymaps 'dired-mode-map
            "r" #'dired-rsync))
#+end_src

*** [[https://github.com/purcell/diredfl][Diredfl]]
#+name: init-diredfl-block
#+begin_src emacs-lisp
(use-package diredfl
  :straight t
  :ghook 'dired-mode-hook)
#+end_src

** Org
*** Org
#+name: init-org-block
#+begin_src emacs-lisp
(use-package org
  :straight nil
  :mode (("\\.org\\'" . org-mode))
  :gfhook #'set-buffer-fixed-pitch
  :general
  (:keymaps 'org-mode-map
            "M-n" #'outline-next-visible-heading
            "M-p" #'outline-previous-visible-heading)
  :preface
  (defun set-buffer-fixed-pitch ()
    (general-setq-local line-spacing 2
                        fill-column 110)
    (variable-pitch-mode)
    (set-face-attribute 'variable-pitch nil
                        :family "Iosevka Sparkle"
                        :inherit 'default)
    (set-face-attribute 'fixed-pitch nil
                        :family "Iosevka"
                        :inherit 'default)
    (set-face-attribute 'org-block nil
                        :background (doom-color 'base3)
                        :extend t
                        :inherit 'fixed-pitch))
  :config
  ;; Directory Settings
  (general-setq org-archive-location arco--org-archives
                org-directory arco--org-dir)

  ;; Startup Settings
  (general-setq org-startup-folded 'content
                org-startup-with-inline-images t)

  ;; Fontify Settings
  (general-setq org-fontify-whole-heading-line t
                org-fontify-quote-and-verse-blocks t
                org-fontify-done-headline t
                org-fontify-todo-headline t)

  ;; Refile Settings
  (general-setq org-refile-allow-creating-parent-nodes 'confirm
                org-refile-use-outline-path 'f
                org-refile-targets '(("~/Documents/org-files/projects.org" :maxlevel . 3)))

  ;; Log Settings
  (general-setq org-log-done 'time
                org-log-into-drawer t
                org-log-state-notes-insert-after-drawers nil)

  ;; Usage Settings
  (general-setq org-use-fast-todo-selection t
                org-use-fast-tag-selection t
                org-use-speed-commands t
                org-use-tag-inheritance t)

  ;; Aesthetic Settings
  (general-setq org-pretty-entities t
                org-hide-emphasis-markers t
                org-hide-leading-stars t
                org-ellipsis "…"
                org-image-actual-width nil)

  (setf (cdr (assoc 'file org-link-frame-setup)) #'find-file-other-window)

  (font-lock-add-keywords 'org-mode
                          `((,(rx bol (* space) (group "-") (+ space))
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))
                            (,(rx bol (* space) (group "#+begin_src") symbol-end)
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "λ"))))
                            (,(rx bol (* space) (group "#+end_src") symbol-end)
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "⋱"))))
                            (,(rx bol (* space) (group "#+begin_quote") symbol-end)
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "“"))))
                            (,(rx bol (* space) (group "#+end_quote") symbol-end)
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "”"))))))

  ;; ;; List Settings
  (general-setq org-list-indent-offset 2)

  ;; ;; Other Settings
  (general-setq org-catch-invisible-edits 'smart
                org-cycle-separator-lines 0
                org-enforce-todo-dependencies t
                org-enforce-todo-checkbox-dependencies t
                org-insert-heading-respect-content t
                org-special-ctrl-a/e t
                org-special-ctrl-k t
                org-tags-column 0
                org-yank-adjusted-subtrees t)

  (general-pushnew '("el" . "src emacs-lisp") org-structure-template-alist))
#+end_src

*** Org-Indent
#+name: init-org-indent-block
#+begin_src emacs-lisp
(use-package org-indent
  :blackout t
  :straight nil
  :ghook 'org-mode-hook)
#+end_src

*** Org-Agenda
#+name: init-org-agenda-block
#+begin_src emacs-lisp
(use-package org-agenda
  :straight nil
  :general
  ("C-c a" #'org-agenda
   "C-c c" #'org-capture)
  :config
  (general-setq org-agenda-block-separator nil
                org-agenda-diary-file "~/Documents/org-files/diary.org"
                org-agenda-dim-blocked-tasks 'invisible
                org-agenda-files arco--org-agenda-files
                org-agenda-inhibit-startup nil
                org-agenda-show-all-dates t
                org-agenda-skip-deadline-if-done t
                org-agenda-skip-scheduled-if-done t
                org-agenda-span 'day
                org-agenda-start-on-weekday nil
                org-agenda-start-with-log-mode nil
                org-agenda-tags-column -100
                org-agenda-use-time-grid t
                org-agenda-window-setup 'only-window))
#+end_src

*** Org-Src
#+name: init-org-src-block
#+begin_src emacs-lisp
(use-package org-src
  :straight nil
  :preface
  (defun arco/org-src-supress-final-newline ()
    (setq-local require-final-newline nil))

  (defun arco/org-src-delete-trailing-space (&rest _)
    (delete-trailing-whitespace))

  (defun arco/disable-flycheck-in-org-src-block ()
    (setq-local flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
  :init
  (general-add-hook 'org-src-mode-hook #'arco/org-src-supress-final-newline)
  (general-add-hook 'org-src-mode-hook #'arco/disable-flycheck-in-org-src-block)
  (general-add-advice 'org-edit-src-exit :before #'arco/org-src-delete-trailing-space)
  :config/el-patch
  (el-patch-defun org-src--construct-edit-buffer-name (org-buffer-name lang)
    (concat "[" org-buffer-name "]"))

  (general-setq org-src-window-setup 'current-window
                org-src-fontify-natively t
                org-src-preserve-indentation t
                org-src-tab-acts-natively t
                org-edit-src-content-indentation 0))
#+end_src

*** Org-Ob
#+name: init-org-ob-block
#+begin_src emacs-lisp
(use-package ob
  :straight nil
  :preface
  (defun arco/org-redisplay-inline-images ()
    (interactive)
    (when org-inline-image-overlays
      (org-redisplay-inline-images)))
  :init
  (general-add-hook 'org-babel-after-execute-hook #'arco/org-redisplay-inline-images)
  :config
  (general-setq org-babel-load-languages '((emacs-lisp . t)
                                           (shell . t)
                                           (ditaa . t))
                org-confirm-babel-evaluate nil))

(use-package ob-ditaa
  :straight nil
  :commands (org-babel-execute:ditaa)
  :config
  (general-setq org-ditaa-jar-path ;; The custom var set in ob-ditaa.el breaks the ditaa path
                "/usr/local/Cellar/ditaa/0.11.0_1/libexec/ditaa-0.11.0-standalone.jar"))
#+end_src

*** Org-Ox
#+name: init-org-ox-block
#+begin_src emacs-lisp
(use-package ox
  :straight nil
  :config
  (general-setq org-export-with-toc nil
                org-export-headline-levels 8
                org-export-backends '(ascii html latex md)
                org-export-dispatch-use-expert-ui nil
                org-export-coding-system 'utf-8
                org-export-exclude-tags '("noexport" "no_export" "ignore")
                org-export-with-author t
                org-export-with-drawers t
                org-export-with-email t
                org-export-with-footnotes t
                org-export-with-latex t
                org-export-with-properties t
                org-export-with-smart-quotes t
                org-html-html5-fancy t
                org-html-postamble nil))

(use-package ox-latex
  :straight nil
  :config
  ;; LaTeX Settings
  (general-setq org-latex-pdf-process '("latexmk -shell-escape -bibtex -pdf %f")
                org-latex-remove-logfiles t
                org-latex-prefer-user-labels t
                bibtex-dialect 'biblatex)

  (dolist (ext '("lof" "lot" "tex"
                 "aux" "idx" "log"
                 "out" "toc" "nav"
                 "snm" "vrb" "dvi"
                 "fdb_latexmk" "blg"
                 "brf" "fls" "entoc"
                 "ps" "spl" "bbl"
                 "bcf" "run.xml"))
    (general-pushnew ext org-latex-logfiles-extensions)))


(use-package ox-gfm
  :straight t)

(use-package ox-jdf-report
  :straight (:host github :repo "dylanjm/ox-jdf"))
#+end_src

*** [[https://github.com/integral-dw/org-superstar-mode][Org-SuperStar]]
#+name: init-org-bullets-block
#+begin_src emacs-lisp
(use-package org-superstar
  :straight t
  :ghook 'org-mode-hook
  :config
  (general-setq org-superstar-remove-leading-stars t
                org-superstar-special-todo-items t))
#+end_src

*** [[https://github.com/snosov1/toc-org][TOC-Org]]
#+name: init-toc-org-block
#+begin_src emacs-lisp
(use-package toc-org
  :blackout t
  :straight t
  :ghook 'org-mode-hook 'markdown-mode-hook)
#+end_src

** Media
*** [[https://github.com/jorenvo/simple-mpc][Simple-MPC]]
#+name: init-simple-mpc-block
#+begin_src emacs-lisp
(use-package simple-mpc
  :straight t
  :config ;; These are TAB separators <C-q TAB>
  (general-setq simple-mpc-playlist-format "%artist%	%album%	%title%	%file%"
                simple-mpc-table-separator "	"))
#+end_src

*** [[https://github.com/hniksic/emacs-htmlize][HTMLize]]
#+name: init-htmlize-block
#+begin_src emacs-lisp
(use-package htmlize
  :straight t
  :config
  (general-setq htmlize-ignore-face-size t))
#+end_src

** Version Control
*** [[https://github.com/magit/magit][Magit]]
#+name: init-magit-block
#+begin_src emacs-lisp
(use-package magit
  :straight t
  :general ("C-x g"   #'magit-status
            "C-x M-g" #'magit-dispatch)
  :init
  (general-add-hook 'magit-mode-mode-hook #'hide-mode-line-mode)
  :config
  (general-setq magit-view-git-manual-method 'woman
                magit-revision-show-gravatars '("^Author:     " . "^Commit:     ")
                magit-diff-refine-hunk t
                magit-save-repository-buffers nil
                magit-display-buffer-function #'magit-display-buffer-fullframe-status-v1))

(use-package git-commit
  :straight nil
  :ghook ('emacs-startup-hook #'global-git-commit-mode)
  :config
  (general-setq git-commit-summary-max-length 50
                git-commit-style-convention-checks '(overlong-summary-line non-empty-second-line)))
#+end_src

*** [[https://github.com/magit/forge][Forge]]
#+name: init-forge-block
#+begin_src emacs-lisp
(use-package forge
  :straight t
  :config
  (general-setq ghub-use-workaround-for-emacs-bug 'force))
#+end_src

*** [[https://gitlab.com/pidu/git-timemachine][Git-Time-Machine]]
#+name: init-git-timemachine-block
#+begin_src emacs-lisp
(use-package git-timemachine
  :straight (:host gitlab :repo "pidu/git-timemachine")
  :config
  (general-setq git-timemachine-show-minibuffer-details t))
#+end_src

*** [[https://github.com/emacsorphanage/git-gutter-fringe][Git-Gutter-Fringe]]
#+name: init-git-gutter-fringe-block
#+begin_src emacs-lisp
(use-package git-gutter-fringe
  :straight t
  :ghook ('prog-mode-hook #'global-git-gutter-mode))
#+end_src

*** [[https://github.com/justbur/emacs-vdiff-magit][Vdiff-Magit]]
#+name: init-vdiff-magit-block
#+begin_src emacs-lisp
(use-package vdiff-magit
  :straight t
  :commands (vdiff-magit vdiff-magit-dwim)
  :general
  (:keymaps 'magit-mode-map
            "e" #'vdiff-magit-dwim
            "E" #'vdiff-magit)
  :config
  (transient-suffix-put 'magit-dispatch "e" :description "vdiff (dwim)")
  (transient-suffix-put 'magit-dispatch "e" :command #'vdiff-magit-dwim)
  (transient-suffix-put 'magit-dispatch "E" :description "vdiff")
  (transient-suffix-put 'magit-dispatch "E" :command #'vdiff-magit))
#+end_src

*** [[https://github.com/magit/with-editor][With-Editor]]
#+name: init-with-editor-block
#+begin_src emacs-lisp
(use-package with-editor
  :straight t
  :commands (with-editor-export-editor)
  :general
  ([remap async-shell-command] #'with-editor-async-shell-command
   [remap shell-command] #'with-editor-shell-command)
  :init
  (general-add-hook 'shell-mode-hook 'with-editor-export-editor)
  (general-add-hook 'term-exec-hook 'with-editor-export-editor)
  (general-add-hook 'eshell-mode-hook 'with-editor-export-editor))
#+end_src

** Language Server Protocol
*** [[https://github.com/emacs-lsp/lsp-mode][LSP-Mode]]
#+name: init-lsp-mode-block
#+begin_src emacs-lisp
(use-package lsp-mode
  :straight t
  :commands (lsp lsp-deferred)
  :gfhook #'lsp-enable-which-key-integration
  :config
  (general-setq lsp-completion-provider :capf
                lsp-idle-delay 0.500
                lsp-modeline-diagnostics-enable t
                lsp-headerline-breadcrumb-enable t
                lsp-enable-file-watchers nil))
#+end_src

*** [[https://github.com/emacs-lsp/lsp-ui][LSP-UI]]
#+name: init-lsp-ui-block
#+begin_src emacs-lisp
(use-package lsp-ui
  :straight t
  :commands (lsp-ui-mode)
  :ghook 'lsp-mode-hook
  :config
  (general-setq lsp-ui-doc-enable t
                lsp-ui-doc-position 'top
                lsp-ui-flycheck-list-position 'right
                lsp-ui-imenu-kind-position 'right))
#+end_src

** Syntax & Linting
*** [[https://github.com/flycheck/flycheck][Flycheck]]
#+name: init-flycheck-block
#+begin_src emacs-lisp
(use-package flycheck
  :straight t
  :ghook ('prog-mode-hook #'global-flycheck-mode)
  :commands (flycheck-list-errors)
  :config
  (general-setq flycheck-emacs-lisp-load-path 'inherit
                flycheck-display-errors-delay 0.25)

  (general-setq flycheck-flake8rc arco--flake8rc
                flycheck-python-mypy-config arco--mypy-config)

  (general-setq flycheck-sh-shellcheck-executable "/usr/local/bin/shellcheck"
                flycheck-shellcheck-supported-shells '(bash sh)
                flycheck-shellcheck-follow-sources nil
                flycheck-sh-bash-executable "/usr/local/bin/bash"
                flycheck-sh-zsh-executable "/usr/local/bin/zsh")
  (general-setq flycheck-global-modes '(not dir-locals-mode
                                            text-mode
                                            org-mode
                                            org-agenda-mode
                                            vterm-mode))
  (general-pushnew 'sh-shellcheck flycheck-checkers))
#+end_src

** Languages
*** Lisp
**** Elisp-Mode (Built-In)
#+name: init-emacs-lisp-mode-block
#+begin_src emacs-lisp
(use-package elisp-mode
  :blackout ((emacs-lisp-mode . "Elisp")
             (lisp-interaction-mode . "Lisp-Interaction"))
  :straight (:type built-in)
  :mode (("\\.el\\'" . emacs-lisp-mode)
         ("\\.Cask\\'" . emacs-lisp-mode))
  :gfhook #'outline-minor-mode
  :init
  (general-setq emacs-lisp-docstring-fill-column 72))
#+end_src

**** [[https://github.com/joaotavora/sly][SLY]]
#+name: init-sly-block
#+begin_src emacs-lisp
(use-package sly
  :straight t
  :ghook 'lisp-mode-hook
  :config
  (general-setq inferior-lisp-program "/usr/local/bin/sbcl"
                sly-mrepl-history-file-name (nl-var-expand "sly-mrepl-history")))
#+end_src

**** [[https://github.com/wasamasa/firestarter][Firestarter]]

This is a nifty package that allows me to define functions as local variables in elisp files that will be run
on save. I use this to auto-tangle the config file when editing.

#+name: init-firestarter-block
#+begin_src emacs-lisp
(use-package firestarter
  :straight t
  :ghook 'before-save-hook)
#+end_src

**** [[https://github.com/jwiegley/emacs-async][Async]]
#+name: init-async-block
#+begin_src emacs-lisp
(use-package async
  :straight t
  :ghook ('dired-mode-hook #'dired-async-mode)
  :init
  (general-setq dired-async-mode-lighter ""))
#+end_src

**** [[https://github.com/clojure-emacs/clojure-mode][Clojure-Mode]]
#+name: init-clojure-mode-block
#+begin_src emacs-lisp
(use-package clojure-mode
  :straight t
  :mode ("\\.edn$"))
#+end_src

*** Markdown
**** [[https://github.com/defunkt/markdown-mode][Mardown-Mode]]
#+name: init-markdown-block
#+begin_src emacs-lisp
  (use-package markdown-mode
    :straight t
    :mode ("\\.md$")
    :config
    (general-setq markdown-fontify-code-blocks-natively t
                  markdown-enable-wiki-links t
                  markdown-italic-underscore t
                  markdown-asymmetric-header t
                  markdown-gfm-uppercase-checkbox t
                  markdown-gfm-additional-languages '("sh")
                  markdown-make-gfm-checkboxes-buttons t
                  mardown-indent-nenter 'indent-and-new-item))
#+end_src

**** [[https://github.com/milkypostman/markdown-mode-plus][Markdown-Mode-Plus]]
#+name: init-markdown-mode-plus-block
#+begin_src emacs-lisp
(use-package markdown-mode+
  :straight t)
#+end_src

*** LaTeX
**** AuCTeX
#+name: init-auctex-block
#+begin_src emacs-lisp
(use-package tex
  :straight auctex
  :gfhook ('LaTeX-mode-hook '(TeX-fold-mode
                              flycheck-mode
                              reftex-mode))
  :init
  (general-setq TeX-view-program-selection '((output-pdf "pdf-tools"))
                TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view"))))

(use-package auctex-latexmk
  :straight t
  :after tex
  :init
  (general-setq auctex-latexmk-inherit-TeX-PDF-mode t)
  :config
  (auctex-latexmk-setup))

(use-package bibtex
  :straight nil
  :init
  (general-setq-default bibtex-dialect 'biblatex))

(use-package biblio
  :straight t)

(use-package reftex
  :straight t
  :init
  (general-setq reftex-plug-into-AUCTeX t))
#+end_src

**** [[https://github.com/cdominik/cdlatex][CDLaTeX]]
#+name: init-cdlatex-block
#+begin_src emacs-lisp :tangle no
(use-package cdlatex
  :straight t)
#+end_src

*** Python
**** Python (Built-In)
#+name: init-python-block
#+begin_src emacs-lisp
(use-package python
  :straight (:type built-in)
  :config
  (general-setq python-shell-interpreter "ipython"
                python-shell-interpreter-args "-i --simple-prompt --no-color-info"
                python-indent-guess-indent-offset-verbose nil
                python-indent-offset 4
                comment-inline-offset 2))
#+end_src

**** Pyright
#+name: init-pyright-block
#+begin_src emacs-lisp
(use-package lsp-pyright
  :straight t
  :ghook ('python-mode-hook #'(lambda ()
                              (require 'lsp-pyright)
                              (lsp-deferred))))
#+end_src

*** C++
**** [[https://github.com/MaskRay/emacs-ccls][CCLS]]
#+name: init-ccls-block
#+begin_src emacs-lisp
(use-package ccls
  :demand t
  :after lsp-mode
  :straight t
  :init
  (general-setq ccls-executable "/usr/local/bin/ccls")
  :config
  (general-setq-local company-transformers nil)
  (setq ccls-sem-highlight-method 'overlay)
  (general-setq ccls-initialization-options
                `(:clang
                  ,(list
                    :extraArgs
                    ["-isystem/Library/Developer/CommandLineTools/usr/include/c++/v1"
                     "-isysroot/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include"
                     "-isystem/usr/local/include"]
                    :resourceDir (string-trim
                                  (shell-command-to-string
                                   "clang -print-resource-dir")))))
  (ccls-use-default-rainbow-sem-highlight))

  ;; (defun ccls/callee ()
  ;;   (interactive)
  ;;   (lsp-ui-peek-find-custom "$ccls/call" '(:callee t)))
  ;;
  ;; (defun ccls/caller ()
  ;;   (interactive)
  ;;   (lsp-ui-peek-find-custom "$ccls/call"))
  ;;
  ;; (defun ccls/vars (kind)
  ;;   (lsp-ui-peek-find-custom "$ccls/vars" `(:kind ,kind)))
  ;;
  ;; (defun ccls/base (levels)
  ;;   (lsp-ui-peek-find-custom "$ccls/inheritance" `(:levels ,levels)))
  ;;
  ;; (defun ccls/derived (levels)
  ;;   (lsp-ui-peek-find-custom "$ccls/inheritance" `(:levels ,levels :derived t)))
  ;;
  ;; (defun ccls/member (kind)
  ;;   (interactive)
  ;;   (lsp-ui-peek-find-custom "$ccls/member" `(:kind ,kind)))
  ;;
  ;; ;; References w/ Role::Role
  ;; (defun ccls/references-read ()
  ;;   (interactive)
  ;;   (lsp-ui-peek-find-custom "textDocument/references"
  ;;                            (plist-put
  ;;                             (lsp--text-document-position-params) :role 8)))
  ;;
  ;; ;; References w/ Role::Write
  ;; (defun ccls/references-write ()
  ;;   (interactive)
  ;;   (lsp-ui-peek-find-custom "textDocument/references"
  ;;                            (plist-put
  ;;                             (lsp--text-document-position-params) :role 16)))
  ;;
  ;; ;; References w/ Role::Dynamic bit (macro expansions)
  ;; (defun ccls/references-macro ()
  ;;   (interactive)
  ;;   (lsp-ui-peek-find-custom "textDocument/references"
  ;;                            (plist-put
  ;;                             (lsp--text-document-position-params) :role 64)))
  ;;
  ;; ;; References w/o Role::Call bit (e.g. where functions are taken addresses)
  ;; (defun ccls/references-not-call ()
  ;;   (interactive)
  ;;   (lsp-ui-peek-find-custom "textDocument/references"
  ;;                            (plist-put
  ;;                             (lsp--text-document-position-params) :excludeRole 32)))
  ;;
  ;; ;; References whose filenames are under this project
  ;; (lsp-ui-peek-find-references nil (list :folders (vector (projectile-project-root)))))
#+end_src

**** [[https://github.com/sonatard/clang-format][Clang-Format]]
#+name: init-clang-format-block
#+begin_src emacs-lisp
(use-package clang-format
  :straight t
  :config
  (general-setq clang-format-executable "/usr/local/opt/llvm/bin/clang-format"))
#+end_src

*** MOOSE
**** [[https://github.com/dylanjm/emacs-moose-mode][Moose-Mode]]
#+name: init-moose-mode-block
#+begin_src emacs-lisp
(use-package moose-mode
  :straight (:host github :repo "dylanjm/emacs-moose-mode"))
#+end_src

**** [[https://github.com/dylanjm/moose-hit-format.el][Hit-Formatter]]
#+name: init-hit-formatter-block
#+begin_src emacs-lisp
(use-package moose-hit-format
  :straight (:host github :repo "dylanjm/moose-hit-format.el" :files ("*")))
#+end_src

*** [[https://github.com/tequilasunset/apples-mode][Apple-Script]]
#+name: init-apple-script-block
#+begin_src emacs-lisp
(use-package apples-mode
  :straight t
  :mode "\\.\\(applescri\\|sc\\)pt\\'")
#+end_src

*** CMake-Mode
#+name: init-cmake-mode-block
#+begin_src emacs-lisp
(use-package cmake-mode
  :straight t)
#+end_src

*** Crontab-Mode
#+name: init-crontab-mode-block
#+begin_src emacs-lisp
(use-package crontab-mode
  :straight t)
#+end_src

*** CSV-Mode
#+name: init-csv-mode-block
#+begin_src emacs-lisp
(use-package csv-mode
  :straight t
  :commands (csv-mode
             csv-align-mode)
  :gfhook #'csv-align-mode)
#+end_src

*** [[https://github.com/magit/git-modes][Gitconfig-Mode]]
#+name: init-gitconfig-mode-block
#+begin_src emacs-lisp
(use-package gitconfig-mode
  :straight t)
#+end_src

*** [[https://github.com/vkazanov/crontab-mode][Gitignore-Mode]]
#+name: init-gitignore-mode-block
#+begin_src emacs-lisp
(use-package gitignore-mode
  :straight t)
#+end_src

*** [[https://github.com/joshwnj/json-mode][JSON-Mode]]
#+name: init-json-mode-block
#+begin_src emacs-lisp
(use-package json-mode
  :straight t)
#+end_src

*** [[https://github.com/jhgorrell/ssh-config-mode-el][SSH-Config-Mode]]
#+name: init-ssh-config-block
#+begin_src emacs-lisp
(use-package ssh-config-mode
  :straight t)
#+end_src

*** [[https://github.com/dryman/toml-mode.el][TOML-Mode]]
#+name: init-toml-mode-block
#+begin_src emacs-lisp
(use-package toml-mode
  :blackout "TOML"
  :straight t
  :mode "Pipfile\\'")
#+end_src

*** [[https://github.com/yoshiki/yaml-mode][YAML-Mode]]
#+name: init-yaml-block
#+begin_src emacs-lisp
(use-package yaml-mode
  :straight t
  :mode ("\\.yaml'" "\\.yml'"))
#+end_src

** Miscellaneous
*** [[https://github.com/ubolonton/emacs-tree-sitter][Tree-Sitter]]
#+name: init-tree-sitter-block
#+begin_src emacs-lisp :tangle no
(use-package tree-sitter
  :demand t
  :straight ( :host github
              :repo "ubolonton/emacs-tree-sitter"
              :files ("lisp/*.el") ))

(use-package tree-sitter-langs
  :demand t
  :after tree-sitter
  :straight ( :host github
              :repo "ubolonton/emacs-tree-sitter"
              :files ("langs/*.el" "langs/queries")))
#+end_src

*** [[https://github.com/parkouss/speed-type][SpeedType]]
#+name: init-speed-type-block
#+begin_src emacs-lisp
(use-package speed-type
  :straight t)
#+end_src

*** [[https://github.com/emacsmirror/2048-game][2048-Game]]
#+name: init-2048-block
#+begin_src emacs-lisp
(use-package 2048-game
  :straight t)
#+end_src

*** [[https://github.com/dylanjm/emacs-anywhere][Emacs-Anywhere]]
#+name: init-emacs-anywhere-block
#+begin_src emacs-lisp :tangle no
(use-package emacs_anywhere
  :straight (:host github :repo "dylanjm/emacs-anywhere")
  :init
  (defun github-conversation-p (window-title)
    (or (string-match-p "Pull Request" window-title)
        (string-match-p "Issues" window-title)))

  (defun popup-handler (app-name window-title x y w h)
    (set-frame-position (selected-frame) x (+ y (- h 300)))
    (unless (zerop w)
      (set-frame-size (selected-frame) w 400 5))

    (when (equal app-name "iTerm2")
      ;; Tell Emacs Anywhere not to paste if launched from Terminal
      (setq ea-paste nil)
      (shell-script-mode))

    (cond
     ((github-conversation-p window-title) (gfm-mode))
     (t (markdown-mode))))

  (general-add-hook 'ea-popup-hook #'popup-handler))
#+end_src

*** [[https://github.com/tarsius/keycast][Keycast]]
#+name: init-keycast-block
#+begin_src emacs-lisp
(use-package keycast
  :straight t
  :commands keycast-mode
  :config
  (general-setq keycast-separator-width 1
                keycast-insert-after 'mode-line-buffer-identification
                keycast-remove-tail-elements nil))
#+end_src

#+name: init-footer-block
#+begin_src emacs-lisp :exports none
(provide 'init)
  ;;; init.el ends here
#+end_src

* Citations
+ [[https://github.com/rememberYou/.emacs.d/blob/master/config.org][rememberYou config]]
+ [[https://github.com/chrisbarrett/.emacs.d][chrisbarret config]]
+ [[https://github.com/raxod502/radian][raxod502 config]]
+ [[https://github.com/noctuid/dotfiles][noctuid dotfiles]]
+ [[https://www.eigenbahn.com/2020/05/13/emacs-comint-buffer-auto-close][Eigenbahn]]

* COMMENT Local Variables
# Local Variables:
# time-stamp-line-limit: 2000
# time-stamp-format: "%Y-%m-%d %H:%M:%S"
# time-stamp-active: t
# time-stamp-start: "\/last updated\/:[ ]*"
# time-stamp-end: "$"
# page-break-lines-mode: nil
# firestarter: (arco/config-tangle)
# End:
