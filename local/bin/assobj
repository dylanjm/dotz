#!/usr/bin/env bash
#                                            88          88
#                                            88          ""
#                                            88
# ,adPPYYba, ,adPPYba, ,adPPYba,  ,adPPYba,  88,dPPYba,  88
# ""     `Y8 I8[    "" I8[    "" a8"     "8a 88P'    "8a 88
# ,adPPPPP88  `"Y8ba,   `"Y8ba,  8b       d8 88       d8 88
# 88,    ,88 aa    ]8I aa    ]8I "8a,   ,a8" 88b,   ,a8" 88
# `"8bbdP"Y8 `"YbbdP"' `"YbbdP"'  `"YbbdP"'  8Y"Ybbd8"'  88
#                                                       ,88
#                                                     888P"
#
# assobj - Assessment Objects
#
# Script that maps assessment test objects to respective input file names.
#
# Usage:
#    assobj [-h]
#
# Depends on:
#    local BISON repo
#    local BISON executable
#    gnu parallel
#    fd-find (https://github.com/sharkdp/fd)
#
# Example:
#    assobj -j 16
#
# Submit issues to https://github.com/dylanjm/teton/issues
#
# Copyright 2020 Dylan McDowell â—Œ git@djmcdowell.com

# Notes ################################################################

# Constants ############################################################

readonly ME="$(basename "${0}")"
readonly ARGS=("${@}")
readonly BISON="${BISON_DIR:-$HOME/Documents/projects/bison}"

readonly NORMAL='\033[0m'
readonly RED='\033[1;31m'
readonly GREEN='\033[1;32m'
readonly BLUE='\033[1;34m'
readonly YELLOW='\033[1;33m'

declare -i USE_PARALLEL
declare -i PROCS

export PARALLEL_HOME="${HOME}/.cache/parallel"

# Utilities ############################################################

magenta()  { echo "${MAGENTA}$*${NORMAL}"; }
yellow()   { echo "${YELLOW}$*${NORMAL}"; }
green()    { echo "${GREEN}$*${NORMAL}"; }
blue()     { echo "${BLUE}$*${NORMAL}"; }
red()      { echo "${RED}$*${NORMAL}"; }
bold()     { echo "${BOLD}$*${NORMAL}"; }

usage() {
  cat <<-EOF
$(echo -e "$(bold "assobj - Assessment Objects")")

Script that maps assessment test objects to respective input file names.

$(echo -e "$(yellow "USAGE")"):
       ${ME} [-h] [-j <number>]

$(echo -e "$(yellow "OPTIONS")"):
       -h    Display this help information.
       -j    Number of processors to use with gnu parallel

$(echo -e "$(yellow "EXAMPLES")"):
       assobj -j 16
EOF
}

get_args() {
  while getopts ":hj:" flag; do
    case "$flag" in
      h)
        usage
        exit 0
        ;;
      j)
        USE_PARALLEL=1
        PROCS=${OPTARG}
        ;;
      \?)
        usage
        exit 1
        ;;
    esac
  done
}

# Core #################################################################

get_constructed_objects() {
  local line="${1}"
  "$HOME/Documents/projects/bison/bison-opt" \
    -i "${line}" \
    --list-constructed-objects \
    --no-gdb-backtrace 2>&1 \
    | awk -v line="$line" '
    /^\*\*\* ERROR \*\*\*$/{printf "%s,ERROR\n", line}
    /^\*\*START OBJECT DATA\*\*/{flag=1;next}
    /^\*\*END OBJECT DATA\*\*$/{flag=0} flag {printf "%s,%s\n", line, $0}'
}

get_input_files() {
  mapfile -t INPUT_FILES < <(fd -e i . "${BISON}/assessment/LWR" --exec printf "%s\n" "{}";)
}

main() {
  get_args "${ARGS[@]}"
  get_input_files
  if [[ ${USE_PARALLEL:-0} == 0 ]]; then
    for input in "${INPUT_FILES[@]}"; do
      get_constructed_objects "${input}"
    done
  else
    parallel -j "${PROCS}" get_constructed_objects ::: "${INPUT_FILES[@]}"
  fi
}

# we need to export this function to use with gnu parallel
export -f get_constructed_objects
main "${ARGS[@]}"

# Local Variables:
# mode: sh-mode
# sh-basic-offset: 2
# End:
