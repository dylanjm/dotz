#!/usr/bin/env bash

# Constants ############################################################
_ME=$(basename "${0}")

NORMAL='\033[0m'
RED='\033[1;31m'
GREEN='\033[1;32m'
BLUE='\033[1;34m'
YELLOW='\033[1;33m'

# Utilities ############################################################

magenta() { echo "${MAGENTA}$*${NORMAL}"; }
yellow()  { echo "${YELLOW}$*${NORMAL}"; }
green()   { echo "${GREEN}$*${NORMAL}"; }
bold()    { echo "${BOLD}$*${NORMAL}"; }
blue()    { echo "${BLUE}$*${NORMAL}"; }
red()     { echo "${RED}$*${NORMAL}"; }


usage() {
  cat <<HEREDOC
     ___     _       _
 ___|  _|___| |_ ___| |_
| . |  _| -_|  _|  _|   |
|  _|_| |___|_| |___|_|_|
|_|

Performance Fetch
Script to fetch target BISON performance runs.

Usage:

    ${_ME} [-h] [-n]

Options:

    -h    Display this help information.
    -n    Dry run to show which files will be copied.

HEREDOC
}

get_args() {
  while getopts ":hn" flag; do
    case "$flag" in
      h)
        usage
        exit 0
        ;;
      n)
        dry_run=1
        ;;
      \?)
        printf "Usage: pfetch [-h] [-n]"
        exit 1
        ;;
    esac
  done
  shift $((OPTIND - 1))
  date_code="$(date "+%Y%m%d")"
  basedir=${1:-/projects/bison/git/bison_"${date_code}"/assessment}
  dirb=$(basename "$(dirname "$basedir")")
  maindir=$(dirname "$(dirname "$basedir")")/
}

# Core #################################################################

get_ostat() {
  mapfile -t stat < <(ssh -qn falcon1 '/home/mcdodyla/.config/cargo/bin/fd -t f ' \
                          '-g "**/*.txt" ' \
                          '-E "**/positions.txt" ' \
                          '-E "**/moose/**" --no-ignore ' \
                          '--exec printf "%s\n" {} \;' \
                          ''"${basedir}"'')
  printf "%s\n" "${stat[@]}" > "${dirb}_stats.csv"
}

main() {

  get_args "${@}"
  get_ostat
  while read -r line; do
    lpath=${line//$maindir/}         # path to check if file exists.
    fpath=${lpath//*\/assessment\//} # truncated output path

    # alignment and color for output.
    folder=$(printf "%-100b" "$(yellow "$(dirname "$fpath")")" | tr ' ' '.')
    file=$(printf "%-80b" "$(blue "$(basename "$line")")" | tr ' ' '.')

    if [[ -e "$(pwd)/$lpath" ]]; then
      if [[ "$dry_run" -eq "1" ]]; then
        status=$(red "(DR) skipping")
      else
        status=$(red "skipping")
      fi
      printf "%s%s%b\n" "$folder" "$file" "$status"
      continue
    else
      if [[ "$dry_run" -eq "1" ]]; then
        status=$(green "(DR) copying")
        printf "%s%s%b\n" "$folder" "$file" "$status"
      else
        status=$(green "copying")
        printf "%s%s%b\n" "$folder" "$file" "$status"
        rsync -a --inplace --relative falcon1:"$line" "$(pwd)"
      fi
    fi
    # The output of our ssh command has to have a './' where we want rsync
    # to copy the relative file-path.
  done < <(ssh -qn falcon1 '/home/mcdodyla/.config/cargo/bin/fd -t f ' \
               '-g "**/*_metrics.csv" ' \
               '-E "**/moose/**" --no-ignore '"${basedir}"' |' \
               'sed -re "s|(^.+/)'"$dirb"'|\1./'"$dirb"'|g"')

}

main "${@}"
