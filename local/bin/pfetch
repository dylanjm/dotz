#!/usr/bin/env bash
#
#               ad88                             88
#              d8"               ,d              88
#              88                88              88
# 8b,dPPYba, MM88MMM ,adPPYba, MM88MMM ,adPPYba, 88,dPPYba,
# 88P'    "8a  88   a8P_____88   88   a8"     "" 88P'    "8a
# 88       d8  88   8PP"""""""   88   8b         88       88
# 88b,   ,a8"  88   "8b,   ,aa   88,  "8a,   ,aa 88       88
# 88`YbbdP"'   88    `"Ybbd8"'   "Y888 `"Ybbd8"' 88       88
# 88
# 88
#
# pfetch - Performance Fetch:
#    A script to fetch remote BISON performance data.
#
# Usage:
#    pfetch [-h] [-n]
#
# Depends On:
#    BISON access
#    Remote HPC access
#    fd-find
#
# Example:
#    pfetch -n
#
# Submit issues to https://github.com/dylanm/teton/issues
#
# MIT License
#
# Copyright (c) 2019-2020 Dylan McDowell
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

# Notes ################################################################


# Constants ############################################################
_ME=$(basename "${0}")

NORMAL='\033[0m'
BOLD='\033[1m'
RED='\033[1;31m'
GREEN='\033[1;32m'
BLUE='\033[1;34m'
YELLOW='\033[1;33m'

# Flags
DRY_RUN=0

# Utilities ############################################################

magenta() { echo "${MAGENTA}$*${NORMAL}"; }
yellow()  { echo "${YELLOW}$*${NORMAL}"; }
green()   { echo "${GREEN}$*${NORMAL}"; }
bold()    { echo "${BOLD}$*${NORMAL}"; }
blue()    { echo "${BLUE}$*${NORMAL}"; }
red()     { echo "${RED}$*${NORMAL}"; }

usage() {
  cat <<-HEREDOC
$(echo -e "$(bold "pfetch - Performance Fetch")"):
    A script to fetch remote BISON performance data.

$(echo -e "$(bold USAGE)"):
    ${_ME} [-h] [-n]

$(echo -e "$(bold OPTIONS)"):
    -h    Display this help information.
    -n    Dry run to show which files will be copied.

HEREDOC
}

get_args() {
  while getopts ":hn" flag; do
    case "$flag" in
      h)
        usage
        exit 0
        ;;
      n)
        DRY_RUN=1
        ;;
      \?)
        printf "%s\n" "Usage: ${_ME} [-h] [-n]"
        exit 1
        ;;
    esac
  done
  shift $((OPTIND - 1))
  date_code="$(date "+%Y%m%d")"
  basedir=${1:-/projects/bison/git/bison_"${date_code}"/assessment}
  dirb=$(basename "$(dirname "$basedir")")
  maindir=$(dirname "$(dirname "$basedir")")/
}

# Core #################################################################

get_ostat() {
  mapfile -t stat < <(ssh -qn falcon1 \
                          '/home/mcdodyla/.config/cargo/bin/fd -t f ' \
                          '-g "**/*.txt" ' \
                          '-E "**/positions.txt" ' \
                          '-E "**/moose/**" --no-ignore ' \
                          '--exec printf "%s\n" {} \;' \
                          ''"${basedir}"'')
  printf "%s\n" "${stat[@]}" > "${dirb}_stats.csv"
}

skip_file() {
  local folder="${1}"
  local file="${2}"
  local status
  status="$(red "skipping")"
  printf "%s%s%b\n" "${folder}" "${file}" "${status}"
  return
}

display_copy() {
  local folder="${1}"
  local file="${2}"
  local status
  status=$(green "copying")
  printf "%s%s%b\n" "$folder" "$file" "$status"
}

main() {
  get_args "${@}"
  get_ostat
  while read -r line; do
    lpath=${line//$maindir/}         # path to check if file exists.
    fpath=${lpath//*\/assessment\//} # truncated output path

    # alignment and color for output.
    folder=$(printf "%-100b" "$(yellow "$(dirname "$fpath")")" | tr ' ' '.')
    file=$(printf "%-80b" "$(blue "$(basename "$line")")" | tr ' ' '.')

    [[ -e "$(pwd)/$lpath" ]] && skip_file "${folder}" "${file}"

    display_copy "${folder}" "${file}"
    [[ ${DRY_RUN:-0} == 0 ]] && {
      rsync -a --inplace --relative falcon1:"$line" "$(pwd)"
    }

    # The output of our ssh command has to have a './' where we want rsync
    # to copy the relative file-path.
  done < <(ssh -qn falcon1 '/home/mcdodyla/.config/cargo/bin/fd -t f ' \
               '-g "**/*_metrics.csv" ' \
               '-E "**/moose/**" --no-ignore '"${basedir}"' |' \
               'sed -re "s|(^.+/)'"$dirb"'|\1./'"$dirb"'|g"')
}

if [[ "${BASH_SOURCE[0]}" = "${0}" ]]; then
  main "${@}"
fi

# Local Variables:
# mode: sh-script
# sh-indentation: 2
# End:
