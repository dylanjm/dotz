#!/usr/bin/env bash
#
# 88          88              ad88                             88
# 88          ""             d8"               ,d              88
# 88                         88                88              88
# 88,dPPYba,  88 ,adPPYba, MM88MMM ,adPPYba, MM88MMM ,adPPYba, 88,dPPYba,
# 88P'    "8a 88 I8[    ""   88   a8P_____88   88   a8"     "" 88P'    "8a
# 88       d8 88  `"Y8ba,    88   8PP"""""""   88   8b         88       88
# 88b,   ,a8" 88 aa    ]8I   88   "8b,   ,aa   88,  "8a,   ,aa 88       88
# 8Y"Ybbd8"'  88 `"YbbdP"'   88    `"Ybbd8"'   "Y888 `"Ybbd8"' 88       88
#
# bisfetch - BISON Fetch:
#    A script to fetch remote assessment output data
#
# Usage:
#    bisfetch [-h] [-n] [-l INTEGER] [-f <folder>] <folder> ...
#
# Depends on:
#    local BISON repo
#    access to remote hpc
#
# Example:
#    bisfetch -n -l 2 HBEP
#
# Submit issues to https://github.com/dylanm/teton/issues
#
# MIT License
#
# Copyright (c) 2019-2020 Dylan McDowell
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

# Notes ################################################################

# Settings #############################################################


# Globals & Constants ##################################################

ME="$(basename "${0}")"
ARGS=("${@}")
BISON="${BISON_DIR:-$HOME/Documents/projects/bison}"

# Colors
NORMAL='\033[0m'
BOLD='\033[1m'
RED='\033[1;31m'
GREEN='\033[1;32m'
BLUE='\033[1;34m'
MAGENTA='\033[1;4;35m'
YELLOW='\033[1;33m'

# Flags
DRYRUN=0
LOOKBACK=1
FOLDER=""

# Utilities ############################################################

magenta() { echo "${MAGENTA}$*${NORMAL}"; }
yellow() { echo "${YELLOW}$*${NORMAL}"; }
green() { echo "${GREEN}$*${NORMAL}"; }
bold() { echo "${BOLD}$*${NORMAL}"; }
blue() { echo "${BLUE}$*${NORMAL}"; }
red() { echo "${RED}$*${NORMAL}"; }

foldernames() {
  [[ -z "${ALLOWED_FOLDERS+x}" ]] && {
    ALLOWED_FOLDERS=$(
      find "${BISON}/assessment/LWR/validation" \
           -mindepth 1 \
           -maxdepth 1 \
           -type d \
           -exec basename "{}" \; \
        | sort \
        | awk '{printf "%-35s", $0} !(NR%3) {printf "\n"}')
  }
  echo -e "${ALLOWED_FOLDERS}"
}

bison_exists_p() {
  [[ ! -e "${BISON}" ]] && {
    cat <<-HEREDOC
You must have a local copy of BISON to use this script.
If you do have a local copy, add the following to your .bashrc:

export BISON_DIR="<path/to/your/bison/folder>"
HEREDOC
    exit 1
  }
  return 0
}

folder_not_found() {
  cat <<-HEREDOC
$(echo -e "$(red "ERROR: Folder '$FOLDER' Not Found!")")
Permissions on the most recent run might've not been changed yet.
Try using the LOOKBACK flag (-l) to fetch a previous nightly run.

$(echo -e "$(yellow "Possible Folder Names Include")"):
$(foldernames)
HEREDOC
  exit 1
}

usage() {
  cat <<-HEREDOC
$(echo -e "$(bold "bisfetch (BISON Fetch)")"):

A script to fetch remote assessment performance data.

$(echo -e "$(yellow "USAGE")"):
        $ME [-h] [-n] [-l INTEGER] [-f folder] [<folder> ...]

$(echo -e "$(yellow "OPTIONS")"):
        -h        - Show this message
        -n        - Perform a dry-run
        -l        - Look back a previous run; Defaults to 1 (most-recent)
        -f        - Folder of interest; the flag is optional but a folder is required.

$(echo -e "$(yellow "ARGS")"):
        <folder>  - Folder of interest from remote machine.
                    To fetch all folders specify '*'

$(echo -e "$(yellow "EXAMPLES")"):
To fetch the most recent data from IFA_677, the following commands are
equivalent:

        bisfetch IFA_677
        bisfetch -f IFA_677

To perform a dry-run and fetch the data that was output two runs ago:

        bisfetch -n -l 2 IFA_677

$(echo -e "$(yellow "Possible folder names include")"):
$(foldernames)
HEREDOC
  exit 0
}

get_args() {
  while getopts ":hnl:f:" flag; do
    case "$flag" in
      n)
        DRYRUN=1
        ;;
      l)
        LOOKBACK=${OPTARG}
        ;;
      h)
        bison_exists_p && usage
        exit 0
        ;;
      f)
        FOLDER="${OPTARG}"
        ;;
      :)
        printf "%s\n" "Invalid options: ${OPTARG} requires an argurment" 1>&2
        exit 1
        ;;
      \?)
        bison_exists_p && usage
        exit 1
        ;;
    esac
  done

  shift $((OPTIND - 1))

  # Check to ensure folder is specified
  [[ -z "${FOLDER}" ]] && [[ -z "${1}" ]] && folder_not_found

  # If no -f flag then assign folder to first ARG
  [[ -n "${1}" ]] && FOLDER="${1}"
}

# Core #################################################################

fetch_folder_files() {
  # Find all *_out.csv files on Falcon1 for specific folder
  # This is some bash-fu, but bassically we want to find the most recently
  # modified folder of the type 'bison_XXXXXXXX'
  # We then want to find all the *_out.csv files inside the folder specified at the
  # command-line within the 'bison_XXXXXXXX' folder.

  # shellcheck disable=SC2087
  ssh falcon1 -q << EOF | sed 1,3d  # remove ssh storage message from output
newest=\$(find /projects/bison/git/* \
               -mindepth 0 \
               -maxdepth 0 \
               -type d \
               -regex ".*/bison_[0-9]+" \
               -printf "%T@\t%f\n" \
               | sort -t"$(printf '\t')" -r -nk1,5 \
               | sed -n "${LOOKBACK}"p \
               | cut -f2-);

find /projects/bison/git/\$newest/assessment/LWR/validation/${FOLDER}/* \
     -type f \
     -name "*_out.csv" \
     -perm 660 \
     -not -path "*/doc/*" \
     -printf "%p\n" 2>/dev/null
EOF
}

create_local_paths() {
  [[ "${#files[@]}" == 0 ]] && folder_not_found

  printf "\nüìÅ %b%b%b%b:\n" \
         "$(bold "Inspecting Nightly Folder") " \
         "$(magenta "${files[0]:20:14}") " \
         "$(bold "for Assessment") " \
         "$(magenta "$FOLDER")"

  # Modify remote paths to fit for local paths
  # We need extglob for '+([0-9])' to match multiple numbers.
  local i
  shopt -s extglob
  for i in "${files[@]}"; do
    echo -e "${i/\/projects\/bison\/git\/bison_+([0-9])/${BISON}}"
  done
}

copy_files() {
  for ((i = 0; i < ${#files[@]}; i++)); do
    if [[ ${DRYRUN} == 0 ]]; then
      printf "‚ï≠‚îÄ %b %s\n" "$(blue "Remote =>")" "${files[i]}"
      printf "‚îú‚îÄ %b %s\n" "$(yellow "Local  =>")" "${local_paths[i]}"
      printf "‚ï∞‚îÄ Fetching Remote File...\r"

      if scp -qp falcon1:"${files[i]}" "${local_paths[i]}" 2>/dev/null; then
        printf "%b\n\n" "‚ï∞‚îÄ Fetching Remote File‚Ä¶ $(green "Successful!")"
      else
        printf "%b\n\n" "‚ï∞‚îÄ Fetching Remote File‚Ä¶ $(red "Error!")"
      fi
    else
      printf "‚ï≠‚îÄ %b %s\n" "$(blue "Remote =>")" "${files[i]}"
      printf "‚ï∞‚îÄ %b %s\n\n" "$(yellow "Local  =>")" "${local_paths[i]}"
    fi
  done
}

# Main #################################################################

main() {
  bison_exists_p  # make sure bison folder exists
  get_args "${@}"
  mapfile -t files < <(fetch_folder_files)
  mapfile -t local_paths < <(create_local_paths)
  copy_files
}

if [[ "${BASH_SOURCE[0]}" = "${0}" ]]; then
  main "${ARGS[@]}"
fi

# Local Variables:
# mode: sh-script
# sh-indentation: 2
# sh-basic-offset: 2
# End:
