#!/usr/local/bin/zsh
dry_run=0
yesterday=1

function usage() {
    print -P "%12F%{Usage:%}%f bfetch [flags] (<folder name>)"
    print -P "—— -h \t - usage information"
    print -P "—— -n \t - perform a dry-run before copying files over"
    print -P "—— -y \t - Integer value; Look back at a previous run; Defaults to 1 (most-recent)"
    print -Pn "\n"
    print -P "Folder of interest required! Possible folder names include:\n"
    print -P "Calvert_Cliffs-1_PROTOTYPE		IFA_636					RIA_CABRI_REP_Na4
FUMEXII_Regate				IFA_677					RIA_NSRR_FK
HBEP					LOCA_ANL_cladding_burst_tests		Riso_AN2
HbepR1					LOCA_Hardy_cladding_test		Riso_AN3
IFA_431					LOCA_IFA_650				Riso_AN4
IFA_432					LOCA_MT4_MT6A				Riso_AN8
IFA_513					LOCA_ORNL_cladding_burst_tests		Riso_GE7_ZX115
IFA_515_RodA1				LOCA_PUZRY_cladding_burst_tests		Riso_GEm_STR013
IFA_519					LOCA_REBEKA_cladding_burst_tests	Riso_II3
IFA_534					OSIRIS_H09				Riso_II5
IFA_535					OSIRIS_J12				Super_Ramp
IFA_562					RE_Ginna_Rodlets			Tribulation
IFA_597_3				RIA_CABRI_REP_Na			US_PWR_16_x_16\n"
    exit 1;
}

# Establish -n flag means to do a dry run.
while getopts "hny:" flag; do
    case "$flag" in
	    n) dry_run=1 ;;
	    y) yesterday=${OPTARG} ;;
        h) usage ;;
	    *) echo 'error in command line parsing' >&2
	       exit 1
    esac
done
shift $(($OPTIND-1))

folder=${1:?"You must define a folder of interest"}

# Check to see if dry-run, if not proceed with copying the files over. 
if [ "$dry_run" -eq 1 ]; then
    print -Pn "\n%S%11F%{Initiating Dry-Run%}%s%f"
    
    # Grab the most recently updated bison file off of Falcon1; return as string
    # in the form of bison_XXXXXXXX/assessment/LWR/validation/
    bison_remote_files=($(
        {
            {
                bison_latest_run=$(ssh -qn falcon1 'find /projects/bison/git/* -mindepth 0 -maxdepth 0 -type d -printf "%T@\t%f\n"' |
	                sort -t$'\t' -r -nk1,5 |
	                sed -n "$yesterday"p |
	                cut -f2-)

                bison_remote_path=$(
                    echo $bison_latest_run |
                        awk -v folder="$folder" '{print "/projects/bison/git/"$1"/assessment/LWR/validation/"folder}')

                ssh -qn falcon1 \
		            "find $bison_remote_path -type f -name '*_out.csv' -not -path '*/doc/*' 2>/dev/null" >&3 3>&-; echo "$?"

                print -Pn "\n\n%U%B%13F%{Fetching data from:%}%u %B%12F%{ /projects/bison/git/${bison_latest_run}%}%b%f\n" >&2
                
            } | {
                until read -t1 ret; do
                    print -Pn "%S%11F%{.%}%s%f" >&2
                done
                exit "$ret"
            }
        } 3>&1))


    # Maninpulate file paths to match the local machine directory
    local_file_path=($(for i in "${bison_remote_files[@]}"; do
		                   echo $i |
		                       gsed -E "s|/projects/bison/git/bison_[0-9]{8}|$HOME/Documents/projects/bison|g"
	                   done
	                 ))

    for ((i=1; i<=${#bison_remote_files[@]}; i++)); do
	    print -P "\u251C\U2500%B%1F%{Remote File ->%}%b%f ${bison_remote_files[i]}"
	    print -P "\u251C\U2500%B%10F%{Local File  ->%}%b%f ${local_file_path[i]}"

        if [[ $i -lt ${#bison_remote_files[@]} ]]; then
	        print -Pn "\U2502\n"
        else
            print -Pn "\U2514\n"
        fi
    done

    print -n "\n"
    print -Pn "This was a %U%1F%{dry run%}%u%f. Would you like to copy the above files now?"
    read -rk "response? [y/N] "
    if [[ "$response" =~ ^[Yy]$ ]]; then
        print -P "\n%B%13F%{Using SCP to fetch remote files...%}%b%f\n"
        
        for ((i=1; i<=${#bison_remote_files[@]}; i++)); do
            
	        scp -qp falcon1:"${bison_remote_files[i]}" "${local_file_path[i]}" 2>/dev/null
        
	        if [ $? -eq 0 ]; then      
                print -P "%B%10F%{File Created/Updated at:%}%b%f ${local_file_path[i]}"
	        else
                print -P "%B%1F%{Error Fetching File:%}%b%f ${bison_remote_files[i]}"
	        fi
        done
	    print -P "\n%S%11F%{Bison Remote Fetch Complete!%}%s%f\n"
    else
	    return 0
    fi
else
    print -Pn "\n%S%11F%{Using SCP to fetch remote files%}%s%f"
    # Grab the most recently updated bison file off of Falcon1; return as string
    # in the form of bison_XXXXXXXX/assessment/LWR/validation/
    bison_remote_files=($(
        {
            {
                bison_latest_run=$(ssh -qn falcon1 'find /projects/bison/git/* -mindepth 0 -maxdepth 0 -type d -printf "%T@\t%f\n"' |
	                sort -t$'\t' -r -nk1,5 |
	                sed -n "$yesterday"p |
	                cut -f2-)

                bison_remote_path=$(
                    echo $bison_latest_run |
                        awk -v folder="$folder" '{print "/projects/bison/git/"$1"/assessment/LWR/validation/"folder}')

                ssh -qn falcon1 \
		            "find $bison_remote_path -type f -name '*_out.csv' -not -path '*/doc/*' 2>/dev/null" >&3 3>&-; echo "$?"

                print -Pn "\n\n%U%B%13F%{Fetching data from:%}%u %B%12F%{ /projects/bison/git/${bison_latest_run}%}%b%f\n" >&2
                
            } | {
                until read -t1 ret; do
                    print -Pn "%S%11F%{.%}%s%f" >&2
                done
                exit "$ret"
            }
        } 3>&1))


    # Maninpulate file paths to match the local machine directory
    local_file_path=($(for i in "${bison_remote_files[@]}"; do
		                   echo $i |
		                       gsed -E "s|/projects/bison/git/bison_[0-9]{8}|$HOME/Documents/projects/bison|g"
	                   done
	                 ))

    for ((i=1; i<=${#bison_remote_files[@]}; i++)); do
        
	    scp -qp falcon1:"${bison_remote_files[i]}" "${local_file_path[i]}" 2>/dev/null
        
	    if [ $? -eq 0 ]; then      
            print -P "%B%10F%{File Created/Updated at:%}%b%f ${local_file_path[i]}"
	    else
            print -P "%B%1F%{Error Fetching File:%}%b%f ${bison_remote_files[i]}"
	    fi
    done
	print -P "\n%S%11F%{Bison Remote Fetch Complete!%}%s%f\n"
fi
									 

