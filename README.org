#+title: Teton

[[file:https://img.shields.io/badge/platform-macOS-blue.svg]]
[[file:https://img.shields.io/badge/editor-Emacs27%2B-blueviolet.svg]]
[[file:https://img.shields.io/badge/shell-ZSH-orange.svg]]
[[file:https://img.shields.io/github/last-commit/dylanjm/dotz.svg]]

* Summary
My personal dotfile configuration focused on macOS support. At the moment there are no plans to add support for other operating systems. This is because both my personal and work machine run macOS; However I have tried to implement these files in a modular way that would easily support other *nix operating systems in the future. The focus on macOS allows for a simplicity in configuration that should be easy to understand and implement in your own workflow. While creating these dotfiles, my major development goals (in no particular order)  are:

- Startup speed
- Seamless navigation within/between applications
- Max out native customisation before resorting to 3rd party applications
- Clear and concise documentation for all features and settings

My design phillosphy is that a personal  configuration should remain relatively transparent and not abstract away the bulk of  customisation. Each line of code should be clearly understood and purposefully written to contribute to the organization of the entire configuration. Dotfiles should serve as a measure of convience, but also as a long-running history of workflow experiments. Through time, dotfiles should evolve and and adopt new features and methods. So often, I come across monolithic  configurations that haven't been updated in two years. At this day and age, two years is outdated. This is why  my configuration  maxes out native features, to establish a base of conistency. I am then free to experiment with actively developed projects to keep my config up-to-date and relevant.

#+begin_src bash :results output :exports results
   echo "Directory structure:"
   mapfile -t dirs < <(tree -d -L 1 ~/dotz)
   comments=(
     ""
     "# Config files for apps like: BTT, iTerm, Python, Julia, etc."
     "# Personal scripts that I've added to my path."
     "# Bootstraping files to install fonts, homebrew, command-line-tools, etc."
     "# Git submodule that manages installation and symlinking dotfiles to proper locations."
     "# Editor configurations for Emacs, Vim, etc."
     "# Global git config and ignore files."
     "# Temporary location for random files."
     "# Environment and shell configuration files for zsh, bash, and fish."
     ""
   )
   paste <(printf "%-20s\n" "${dirs[@]}") <(printf "%s\n" "${comments[@]}")
#+end_src

#+RESULTS:
#+begin_example
Directory structure:
/Users/djm/dotz
├── apps        # Config files for apps like: BTT, iTerm, Python, Julia, etc.
├── bin         # Personal scripts that I've added to my path.
├── bootstrap   # Bootstraping files to install fonts, homebrew, command-line-tools, etc.
├── dotbot      # Git submodule that manages installation and symlinking dotfiles to proper locations.
├── editors     # Editor configurations for Emacs, Vim, etc.
├── git         # Global git config and ignore files.
├── misc        # Temporary location for random files.
└── shells      # Environment and shell configuration files for zsh, bash, and fish.

8 directories
#+end_example

* Installation
I use a simple dotfile management tool called [[https://github.com/anishathalye/dotbot][dotbot]] that runs all my bootstrap scripts and symlinks files to their proper location. Dotbot is configured through the =install.conf.yaml= file. You can choose to clone this repo directly or fork it to make your own changes. Then run the following commands in your shell.

#+begin_src bash :exports code
$ git clone https://github.com/dylanjm/dotz.git ~/dotz
$ cd ~/dotz
$ ./install
#+end_src

Dotbot will then launch the =bootstrap-tools= script and walk you through the installation and symlinking process. If the script encounters any errors, it will automatically exit and the configuration will not be complete.
* Features
** Zsh
- Extremly fast and configurable package manager - [[https://github.com/zdharma/zplugin][Zplugin]].
** Emacs
