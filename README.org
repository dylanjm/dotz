#+title: Dotz
#+author: Dylan McDowell

#+BEGIN_EXPORT html
<style>
  .inline-block {
   display: inline-block;
}
</style>

<div id="banner">
    <div class="inline-block">
      <img alt="macOS Support" src="https://img.shields.io/badge/platform-macOS-blue">
    </div>

    <div class="inline-block">
      <img alt="Main Editor: Emacs" src="https://img.shields.io/badge/editor-Emacs27%2B-blueviolet">
    </div>

    <div class="inline-block">
      <img alt="Main Shell: ZSH" src="https://img.shields.io/badge/shell-ZSH-orange">
    </div>

    <div class="inline-block">
      <img alt="GitHub last commit" src="https://img.shields.io/github/last-commit/dylanjm/dotz">
    </div>
</div>
#+END_EXPORT

/file last updated/: 2019-12-20 12:28:22

* Summary
My personal dotfile configuration focused on macOS support. At the moment there are no plans to add support for other operating systems. This is because both my personal and work machine run macOS; However I have tried to implement these files in a modular way that would easily support other *nix operating systems in the future. The focus on macOS allows for a simplicity in configuration that should be easy to understand and implement in your own workflow. While creating these dotfiles, my major development goals (in no particular order)  are:

- Startup speed
- Seamless navigation within/between applications
- Max out native customisation before resorting to 3rd party applications
- Clear and concise documentation for all features and settings

My design phillosphy is that a personal  configuration should remain relatively transparent and not abstract away the bulk of  customisation. Each line of code should be clearly understood and purposefully written to contribute to the organization of the entire configuration. Dotfiles should serve as a measure of convience, but also as a long-running history of workflow experiments. Through time, dotfiles should evolve and and adopt new features and methods. So often, I come across monolithic  configurations that haven't been updated in two years. At this day and age, two years is outdated. This is why  my configuration  maxes out native features, to establish a base of conistency. I am then free to experiment with actively developed projects to keep my config up-to-date and relevant.

#+begin_src sh :results output :exports results
  echo "Directory structure:"
  tree -d -L 1 ~/dotz
#+end_src

#+RESULTS:
#+begin_example
Directory structure:
├── apps         # Configuration files for apps like: BTT, iTerm, Python, Julia, Rust, etc.
├── bin          # Personal scripts that I've added to my path.
├── bootstrap    # Bootstraping files to install fonts, homebrew, command-line-tools, etc.
├── dotbot       # Git submodule that manages installation and symlinking dotfiles to proper locations.
├── editors      # Editor configurations for Emacs, Vim, etc.
├── git          # Global git config and ignore files.
├── misc         # Temporary location for random files.
└── shells       # Environment and shell configuration files for zsh, bash, and fish.
#+end_example

* Installation
** [[https://github.com/anishathalye/dotbot][Dotbot]]

* Features
** Zsh
- Extremly fast and configurable package manager - [[https://github.com/zdharma/zplugin][Zplugin]].
** Emacs

* COMMENT Local Variables
# Local Variables:
# time-stamp-line-limit: 2000
# time-stamp-format: "%Y-%m-%d %H:%M:%S"
# time-stamp-active: t
# time-stamp-start: "\/file last updated\/:[ ]*"
# time-stamp-end: "$"
# End:
